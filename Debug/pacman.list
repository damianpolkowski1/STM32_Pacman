
pacman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08007148  08007148  00017148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800739c  0800739c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800739c  0800739c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800739c  0800739c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800739c  0800739c  0001739c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073a0  080073a0  000173a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080073a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000068  0800740c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800740c  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce20  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002203  00000000  00000000  0002cefb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  0002f100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b8  00000000  00000000  0002fdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d5b  00000000  00000000  00030768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5a1  00000000  00000000  000594c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe2f4  00000000  00000000  00067a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000413c  00000000  00000000  00165d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00169e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007130 	.word	0x08007130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007130 	.word	0x08007130

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000a54:	e002      	b.n	8000a5c <Delay+0x10>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1f9      	bne.n	8000a56 <Delay+0xa>
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <lcd_delay>:
void lcd_delay(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	Delay(200);
 8000a74:	20c8      	movs	r0, #200	; 0xc8
 8000a76:	f7ff ffe9 	bl	8000a4c <Delay>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 8000a8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000a94:	4b5e      	ldr	r3, [pc, #376]	; (8000c10 <lcd_cmd+0x190>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000a9a:	4b5e      	ldr	r3, [pc, #376]	; (8000c14 <lcd_cmd+0x194>)
 8000a9c:	2220      	movs	r2, #32
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000aa0:	4b5c      	ldr	r3, [pc, #368]	; (8000c14 <lcd_cmd+0x194>)
 8000aa2:	2210      	movs	r2, #16
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000aa6:	4b5b      	ldr	r3, [pc, #364]	; (8000c14 <lcd_cmd+0x194>)
 8000aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000aae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000ab8:	f7ff ffda 	bl	8000a70 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000abc:	4b54      	ldr	r3, [pc, #336]	; (8000c10 <lcd_cmd+0x190>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	4a53      	ldr	r2, [pc, #332]	; (8000c10 <lcd_cmd+0x190>)
 8000ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac6:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <lcd_cmd+0x5a>
 8000ad2:	4b50      	ldr	r3, [pc, #320]	; (8000c14 <lcd_cmd+0x194>)
 8000ad4:	2220      	movs	r2, #32
 8000ad6:	619a      	str	r2, [r3, #24]
 8000ad8:	e003      	b.n	8000ae2 <lcd_cmd+0x62>
 8000ada:	4b4e      	ldr	r3, [pc, #312]	; (8000c14 <lcd_cmd+0x194>)
 8000adc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ae0:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <lcd_cmd+0x74>
 8000aec:	4b49      	ldr	r3, [pc, #292]	; (8000c14 <lcd_cmd+0x194>)
 8000aee:	2210      	movs	r2, #16
 8000af0:	619a      	str	r2, [r3, #24]
 8000af2:	e003      	b.n	8000afc <lcd_cmd+0x7c>
 8000af4:	4b47      	ldr	r3, [pc, #284]	; (8000c14 <lcd_cmd+0x194>)
 8000af6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000afa:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d004      	beq.n	8000b10 <lcd_cmd+0x90>
 8000b06:	4b43      	ldr	r3, [pc, #268]	; (8000c14 <lcd_cmd+0x194>)
 8000b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0c:	619a      	str	r2, [r3, #24]
 8000b0e:	e003      	b.n	8000b18 <lcd_cmd+0x98>
 8000b10:	4b40      	ldr	r3, [pc, #256]	; (8000c14 <lcd_cmd+0x194>)
 8000b12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b16:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	da05      	bge.n	8000b2c <lcd_cmd+0xac>
 8000b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b28:	619a      	str	r2, [r3, #24]
 8000b2a:	e004      	b.n	8000b36 <lcd_cmd+0xb6>
 8000b2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b34:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000b36:	f7ff ff9b 	bl	8000a70 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000b3a:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <lcd_cmd+0x190>)
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000b40:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <lcd_cmd+0x194>)
 8000b42:	2220      	movs	r2, #32
 8000b44:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000b46:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <lcd_cmd+0x194>)
 8000b48:	2210      	movs	r2, #16
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000b4c:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <lcd_cmd+0x194>)
 8000b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000b54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000b5e:	f7ff ff87 	bl	8000a70 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000b62:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <lcd_cmd+0x190>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	4a2a      	ldr	r2, [pc, #168]	; (8000c10 <lcd_cmd+0x190>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <lcd_cmd+0x100>
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <lcd_cmd+0x194>)
 8000b7a:	2220      	movs	r2, #32
 8000b7c:	619a      	str	r2, [r3, #24]
 8000b7e:	e003      	b.n	8000b88 <lcd_cmd+0x108>
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <lcd_cmd+0x194>)
 8000b82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b86:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <lcd_cmd+0x11a>
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <lcd_cmd+0x194>)
 8000b94:	2210      	movs	r2, #16
 8000b96:	619a      	str	r2, [r3, #24]
 8000b98:	e003      	b.n	8000ba2 <lcd_cmd+0x122>
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <lcd_cmd+0x194>)
 8000b9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ba0:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d004      	beq.n	8000bb6 <lcd_cmd+0x136>
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <lcd_cmd+0x194>)
 8000bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb2:	619a      	str	r2, [r3, #24]
 8000bb4:	e003      	b.n	8000bbe <lcd_cmd+0x13e>
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <lcd_cmd+0x194>)
 8000bb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bbc:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d005      	beq.n	8000bd4 <lcd_cmd+0x154>
 8000bc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd0:	619a      	str	r2, [r3, #24]
 8000bd2:	e004      	b.n	8000bde <lcd_cmd+0x15e>
 8000bd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bdc:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000bde:	f7ff ff47 	bl	8000a70 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <lcd_cmd+0x190>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <lcd_cmd+0x194>)
 8000bea:	2220      	movs	r2, #32
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <lcd_cmd+0x194>)
 8000bf0:	2210      	movs	r2, #16
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <lcd_cmd+0x194>)
 8000bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000bfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	48000800 	.word	0x48000800
 8000c14:	48000400 	.word	0x48000400

08000c18 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8000c22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c30:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000c32:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <lcd_char_cp+0x194>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000c38:	4b5d      	ldr	r3, [pc, #372]	; (8000db0 <lcd_char_cp+0x198>)
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000c3e:	4b5c      	ldr	r3, [pc, #368]	; (8000db0 <lcd_char_cp+0x198>)
 8000c40:	2210      	movs	r2, #16
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000c44:	4b5a      	ldr	r3, [pc, #360]	; (8000db0 <lcd_char_cp+0x198>)
 8000c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000c4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000c56:	f7ff ff0b 	bl	8000a70 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000c5a:	4b54      	ldr	r3, [pc, #336]	; (8000dac <lcd_char_cp+0x194>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	4a53      	ldr	r2, [pc, #332]	; (8000dac <lcd_char_cp+0x194>)
 8000c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c64:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <lcd_char_cp+0x60>
 8000c70:	4b4f      	ldr	r3, [pc, #316]	; (8000db0 <lcd_char_cp+0x198>)
 8000c72:	2220      	movs	r2, #32
 8000c74:	619a      	str	r2, [r3, #24]
 8000c76:	e003      	b.n	8000c80 <lcd_char_cp+0x68>
 8000c78:	4b4d      	ldr	r3, [pc, #308]	; (8000db0 <lcd_char_cp+0x198>)
 8000c7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c7e:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 0320 	and.w	r3, r3, #32
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <lcd_char_cp+0x7a>
 8000c8a:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <lcd_char_cp+0x198>)
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	619a      	str	r2, [r3, #24]
 8000c90:	e003      	b.n	8000c9a <lcd_char_cp+0x82>
 8000c92:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <lcd_char_cp+0x198>)
 8000c94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c98:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d004      	beq.n	8000cae <lcd_char_cp+0x96>
 8000ca4:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <lcd_char_cp+0x198>)
 8000ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000caa:	619a      	str	r2, [r3, #24]
 8000cac:	e003      	b.n	8000cb6 <lcd_char_cp+0x9e>
 8000cae:	4b40      	ldr	r3, [pc, #256]	; (8000db0 <lcd_char_cp+0x198>)
 8000cb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cb4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	da05      	bge.n	8000cca <lcd_char_cp+0xb2>
 8000cbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc6:	619a      	str	r2, [r3, #24]
 8000cc8:	e004      	b.n	8000cd4 <lcd_char_cp+0xbc>
 8000cca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000cd2:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000cd4:	f7ff fecc 	bl	8000a70 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000cd8:	4b34      	ldr	r3, [pc, #208]	; (8000dac <lcd_char_cp+0x194>)
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <lcd_char_cp+0x198>)
 8000ce0:	2220      	movs	r2, #32
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000ce4:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <lcd_char_cp+0x198>)
 8000ce6:	2210      	movs	r2, #16
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <lcd_char_cp+0x198>)
 8000cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000cf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000cfc:	f7ff feb8 	bl	8000a70 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <lcd_char_cp+0x194>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	4a29      	ldr	r2, [pc, #164]	; (8000dac <lcd_char_cp+0x194>)
 8000d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d0a:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <lcd_char_cp+0x106>
 8000d16:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <lcd_char_cp+0x198>)
 8000d18:	2220      	movs	r2, #32
 8000d1a:	619a      	str	r2, [r3, #24]
 8000d1c:	e003      	b.n	8000d26 <lcd_char_cp+0x10e>
 8000d1e:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <lcd_char_cp+0x198>)
 8000d20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d24:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <lcd_char_cp+0x120>
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <lcd_char_cp+0x198>)
 8000d32:	2210      	movs	r2, #16
 8000d34:	619a      	str	r2, [r3, #24]
 8000d36:	e003      	b.n	8000d40 <lcd_char_cp+0x128>
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <lcd_char_cp+0x198>)
 8000d3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d3e:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d004      	beq.n	8000d54 <lcd_char_cp+0x13c>
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <lcd_char_cp+0x198>)
 8000d4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d50:	619a      	str	r2, [r3, #24]
 8000d52:	e003      	b.n	8000d5c <lcd_char_cp+0x144>
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <lcd_char_cp+0x198>)
 8000d56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d5a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d005      	beq.n	8000d72 <lcd_char_cp+0x15a>
 8000d66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d6e:	619a      	str	r2, [r3, #24]
 8000d70:	e004      	b.n	8000d7c <lcd_char_cp+0x164>
 8000d72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d7a:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000d7c:	f7ff fe78 	bl	8000a70 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <lcd_char_cp+0x194>)
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <lcd_char_cp+0x198>)
 8000d88:	2220      	movs	r2, #32
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <lcd_char_cp+0x198>)
 8000d8e:	2210      	movs	r2, #16
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <lcd_char_cp+0x198>)
 8000d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000d9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	48000800 	.word	0x48000800
 8000db0:	48000400 	.word	0x48000400

08000db4 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	while(*out_char)
 8000dbc:	e008      	b.n	8000dd0 <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff26 	bl	8000c18 <lcd_char_cp>
        lcd_delay();
 8000dcc:	f7ff fe50 	bl	8000a70 <lcd_delay>
	while(*out_char)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f2      	bne.n	8000dbe <lcd_out_cp+0xa>
	}

}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	460b      	mov	r3, r1
 8000dee:	71bb      	strb	r3, [r7, #6]
 8000df0:	4613      	mov	r3, r2
 8000df2:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000df4:	20fa      	movs	r0, #250	; 0xfa
 8000df6:	f001 fcf1 	bl	80027dc <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f7ff fe40 	bl	8000a80 <lcd_cmd>
    HAL_Delay(50);
 8000e00:	2032      	movs	r0, #50	; 0x32
 8000e02:	f001 fceb 	bl	80027dc <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8000e06:	79fa      	ldrb	r2, [r7, #7]
 8000e08:	79bb      	ldrb	r3, [r7, #6]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	797b      	ldrb	r3, [r7, #5]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f043 0320 	orr.w	r3, r3, #32
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fe30 	bl	8000a80 <lcd_cmd>
    HAL_Delay(50);
 8000e20:	2032      	movs	r0, #50	; 0x32
 8000e22:	f001 fcdb 	bl	80027dc <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8000e26:	2006      	movs	r0, #6
 8000e28:	f7ff fe2a 	bl	8000a80 <lcd_cmd>
    HAL_Delay(50);
 8000e2c:	2032      	movs	r0, #50	; 0x32
 8000e2e:	f001 fcd5 	bl	80027dc <HAL_Delay>
    lcd_cmd(0x0E);
 8000e32:	200e      	movs	r0, #14
 8000e34:	f7ff fe24 	bl	8000a80 <lcd_cmd>
    HAL_Delay(50);
 8000e38:	2032      	movs	r0, #50	; 0x32
 8000e3a:	f001 fccf 	bl	80027dc <HAL_Delay>
    lcd_cmd(0x0C);
 8000e3e:	200c      	movs	r0, #12
 8000e40:	f7ff fe1e 	bl	8000a80 <lcd_cmd>
    HAL_Delay(50);
 8000e44:	2032      	movs	r0, #50	; 0x32
 8000e46:	f001 fcc9 	bl	80027dc <HAL_Delay>
    lcd_cmd(0x01);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff fe18 	bl	8000a80 <lcd_cmd>
    HAL_Delay(100);
 8000e50:	2064      	movs	r0, #100	; 0x64
 8000e52:	f001 fcc3 	bl	80027dc <HAL_Delay>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	460a      	mov	r2, r1
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d106      	bne.n	8000e82 <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	337f      	adds	r3, #127	; 0x7f
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fe00 	bl	8000a80 <lcd_cmd>
 8000e80:	e008      	b.n	8000e94 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d105      	bne.n	8000e94 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	3b41      	subs	r3, #65	; 0x41
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fdf6 	bl	8000a80 <lcd_cmd>
	}
    HAL_Delay(5);
 8000e94:	2005      	movs	r0, #5
 8000e96:	f001 fca1 	bl	80027dc <HAL_Delay>

}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <lcd_print>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	603a      	str	r2, [r7, #0]
 8000eac:	71fb      	strb	r3, [r7, #7]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000eb2:	79ba      	ldrb	r2, [r7, #6]
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ffd0 	bl	8000e5e <lcd_gotoxy>
	lcd_out_cp(out_char);
 8000ebe:	6838      	ldr	r0, [r7, #0]
 8000ec0:	f7ff ff78 	bl	8000db4 <lcd_out_cp>
    HAL_Delay(5);
 8000ec4:	2005      	movs	r0, #5
 8000ec6:	f001 fc89 	bl	80027dc <HAL_Delay>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <lcd_clear>:
void lcd_clear(void) {
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff fdd2 	bl	8000a80 <lcd_cmd>
    HAL_Delay(5);
 8000edc:	2005      	movs	r0, #5
 8000ede:	f001 fc7d 	bl	80027dc <HAL_Delay>

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <przycisk>:
	int wynik;
	char nazwa[4];
} record;

int przycisk()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000eee:	485e      	ldr	r0, [pc, #376]	; (8001068 <przycisk+0x180>)
 8000ef0:	f001 ffcc 	bl	8002e8c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	485c      	ldr	r0, [pc, #368]	; (8001068 <przycisk+0x180>)
 8000ef8:	f002 f882 	bl	8003000 <HAL_ADC_PollForConversion>
	int x = HAL_ADC_GetValue(&hadc1);
 8000efc:	485a      	ldr	r0, [pc, #360]	; (8001068 <przycisk+0x180>)
 8000efe:	f002 f957 	bl	80031b0 <HAL_ADC_GetValue>
 8000f02:	4603      	mov	r3, r0
 8000f04:	607b      	str	r3, [r7, #4]

	float y = x*(3.3/(pow(2, 12) - 1));
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fc36 	bl	8000778 <__aeabi_i2d>
 8000f0c:	a344      	add	r3, pc, #272	; (adr r3, 8001020 <przycisk+0x138>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff f9b5 	bl	8000280 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f7ff fd45 	bl	80009ac <__aeabi_d2f>
 8000f22:	4603      	mov	r3, r0
 8000f24:	603b      	str	r3, [r7, #0]

	if(y > 2.8)
 8000f26:	6838      	ldr	r0, [r7, #0]
 8000f28:	f7ff fc38 	bl	800079c <__aeabi_f2d>
 8000f2c:	a33e      	add	r3, pc, #248	; (adr r3, 8001028 <przycisk+0x140>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff fd09 	bl	8000948 <__aeabi_dcmpgt>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <przycisk+0x58>
	{
		return 6; //Nic nie wcisnieto
 8000f3c:	2306      	movs	r3, #6
 8000f3e:	e069      	b.n	8001014 <przycisk+0x12c>
	else if(y > 1.75 && y < 2.33)	return 2;//Left
	else if(y > 1.23 && y < 1.75)	return 3;//Down
	else if(y > 0.59 && y < 1.23)	return 4;//Up
	else if(y < 0.58)				return 5;//Right*/

	if(y > 2.1 && y < 2.5)
 8000f40:	6838      	ldr	r0, [r7, #0]
 8000f42:	f7ff fc2b 	bl	800079c <__aeabi_f2d>
 8000f46:	a33a      	add	r3, pc, #232	; (adr r3, 8001030 <przycisk+0x148>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff fcfc 	bl	8000948 <__aeabi_dcmpgt>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00a      	beq.n	8000f6c <przycisk+0x84>
 8000f56:	edd7 7a00 	vldr	s15, [r7]
 8000f5a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f66:	d501      	bpl.n	8000f6c <przycisk+0x84>
	{
		return 1;//Select
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e053      	b.n	8001014 <przycisk+0x12c>
	}
	else if(y > 1.6 && y < 1.9)
 8000f6c:	6838      	ldr	r0, [r7, #0]
 8000f6e:	f7ff fc15 	bl	800079c <__aeabi_f2d>
 8000f72:	a331      	add	r3, pc, #196	; (adr r3, 8001038 <przycisk+0x150>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff fce6 	bl	8000948 <__aeabi_dcmpgt>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00c      	beq.n	8000f9c <przycisk+0xb4>
 8000f82:	6838      	ldr	r0, [r7, #0]
 8000f84:	f7ff fc0a 	bl	800079c <__aeabi_f2d>
 8000f88:	a32d      	add	r3, pc, #180	; (adr r3, 8001040 <przycisk+0x158>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fcbd 	bl	800090c <__aeabi_dcmplt>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <przycisk+0xb4>
	{
		return 2;//Left
 8000f98:	2302      	movs	r3, #2
 8000f9a:	e03b      	b.n	8001014 <przycisk+0x12c>
	}
	else if(y > 1.1 && y < 1.4)
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f7ff fbfd 	bl	800079c <__aeabi_f2d>
 8000fa2:	a329      	add	r3, pc, #164	; (adr r3, 8001048 <przycisk+0x160>)
 8000fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa8:	f7ff fcce 	bl	8000948 <__aeabi_dcmpgt>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00c      	beq.n	8000fcc <przycisk+0xe4>
 8000fb2:	6838      	ldr	r0, [r7, #0]
 8000fb4:	f7ff fbf2 	bl	800079c <__aeabi_f2d>
 8000fb8:	a325      	add	r3, pc, #148	; (adr r3, 8001050 <przycisk+0x168>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fca5 	bl	800090c <__aeabi_dcmplt>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <przycisk+0xe4>
	{
		return 3;//Down
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e023      	b.n	8001014 <przycisk+0x12c>
	}
	else if(y > 0.5 && y < 0.65)
 8000fcc:	edd7 7a00 	vldr	s15, [r7]
 8000fd0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fdc:	dd0c      	ble.n	8000ff8 <przycisk+0x110>
 8000fde:	6838      	ldr	r0, [r7, #0]
 8000fe0:	f7ff fbdc 	bl	800079c <__aeabi_f2d>
 8000fe4:	a31c      	add	r3, pc, #112	; (adr r3, 8001058 <przycisk+0x170>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	f7ff fc8f 	bl	800090c <__aeabi_dcmplt>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <przycisk+0x110>
	{
		return 4;//Up
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	e00d      	b.n	8001014 <przycisk+0x12c>
	}
	else if(y < 0.3)
 8000ff8:	6838      	ldr	r0, [r7, #0]
 8000ffa:	f7ff fbcf 	bl	800079c <__aeabi_f2d>
 8000ffe:	a318      	add	r3, pc, #96	; (adr r3, 8001060 <przycisk+0x178>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff fc82 	bl	800090c <__aeabi_dcmplt>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <przycisk+0x12a>
	{
		return 5;//Right
 800100e:	2305      	movs	r3, #5
 8001010:	e000      	b.n	8001014 <przycisk+0x12c>
	}
	else
	{
		return 6;
 8001012:	2306      	movs	r3, #6
	}
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	f3af 8000 	nop.w
 8001020:	e734d9b4 	.word	0xe734d9b4
 8001024:	3f4a680c 	.word	0x3f4a680c
 8001028:	66666666 	.word	0x66666666
 800102c:	40066666 	.word	0x40066666
 8001030:	cccccccd 	.word	0xcccccccd
 8001034:	4000cccc 	.word	0x4000cccc
 8001038:	9999999a 	.word	0x9999999a
 800103c:	3ff99999 	.word	0x3ff99999
 8001040:	66666666 	.word	0x66666666
 8001044:	3ffe6666 	.word	0x3ffe6666
 8001048:	9999999a 	.word	0x9999999a
 800104c:	3ff19999 	.word	0x3ff19999
 8001050:	66666666 	.word	0x66666666
 8001054:	3ff66666 	.word	0x3ff66666
 8001058:	cccccccd 	.word	0xcccccccd
 800105c:	3fe4cccc 	.word	0x3fe4cccc
 8001060:	33333333 	.word	0x33333333
 8001064:	3fd33333 	.word	0x3fd33333
 8001068:	20000084 	.word	0x20000084

0800106c <leaderBoard>:

void leaderBoard(record* leaderboard)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b0b9      	sub	sp, #228	; 0xe4
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	HAL_Delay(150);
 8001074:	2096      	movs	r0, #150	; 0x96
 8001076:	f001 fbb1 	bl	80027dc <HAL_Delay>

	char opcje[12][15];
	strcpy(opcje[0],"Leaderboard:");
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	4aa5      	ldr	r2, [pc, #660]	; (8001314 <leaderBoard+0x2a8>)
 8001080:	461c      	mov	r4, r3
 8001082:	4613      	mov	r3, r2
 8001084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001086:	c407      	stmia	r4!, {r0, r1, r2}
 8001088:	7023      	strb	r3, [r4, #0]
	strcpy(opcje[11],"Powrot");
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	33a5      	adds	r3, #165	; 0xa5
 8001090:	4aa1      	ldr	r2, [pc, #644]	; (8001318 <leaderBoard+0x2ac>)
 8001092:	6810      	ldr	r0, [r2, #0]
 8001094:	6018      	str	r0, [r3, #0]
 8001096:	8891      	ldrh	r1, [r2, #4]
 8001098:	7992      	ldrb	r2, [r2, #6]
 800109a:	8099      	strh	r1, [r3, #4]
 800109c:	719a      	strb	r2, [r3, #6]
	char bufer[15];
	char bufer2[6];
	for(int i=0;i<10;i++){
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80010a4:	e0d1      	b.n	800124a <leaderBoard+0x1de>

		if(leaderboard[i].wynik != -1)
 80010a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	461a      	mov	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010be:	f000 8098 	beq.w	80011f2 <leaderBoard+0x186>
		{
			sprintf(bufer, "%d", i+1);
 80010c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4993      	ldr	r1, [pc, #588]	; (800131c <leaderBoard+0x2b0>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 ff26 	bl	8005f20 <siprintf>
			strcat(bufer,".");
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f879 	bl	80001d0 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4413      	add	r3, r2
 80010e8:	498d      	ldr	r1, [pc, #564]	; (8001320 <leaderBoard+0x2b4>)
 80010ea:	461a      	mov	r2, r3
 80010ec:	460b      	mov	r3, r1
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	8013      	strh	r3, [r2, #0]
			strcat(bufer,leaderboard[i].nazwa);
 80010f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	461a      	mov	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	f103 0208 	add.w	r2, r3, #8
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f004 ff71 	bl	8005ff6 <strcat>
			strcat(bufer," ");
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f859 	bl	80001d0 <strlen>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4413      	add	r3, r2
 8001128:	497e      	ldr	r1, [pc, #504]	; (8001324 <leaderBoard+0x2b8>)
 800112a:	461a      	mov	r2, r3
 800112c:	460b      	mov	r3, r1
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	8013      	strh	r3, [r2, #0]
			sprintf(bufer2, "%d", leaderboard[i].wynik);
 8001132:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4413      	add	r3, r2
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	4974      	ldr	r1, [pc, #464]	; (800131c <leaderBoard+0x2b0>)
 800114c:	4618      	mov	r0, r3
 800114e:	f004 fee7 	bl	8005f20 <siprintf>
			strcat(bufer,bufer2);
 8001152:	f107 0208 	add.w	r2, r7, #8
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f004 ff4a 	bl	8005ff6 <strcat>
			if(leaderboard[i].poziom==0)strcat(bufer,", LAT");
 8001162:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4413      	add	r3, r2
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10f      	bne.n	800119a <leaderBoard+0x12e>
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f826 	bl	80001d0 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4413      	add	r3, r2
 800118e:	4a66      	ldr	r2, [pc, #408]	; (8001328 <leaderBoard+0x2bc>)
 8001190:	6810      	ldr	r0, [r2, #0]
 8001192:	6018      	str	r0, [r3, #0]
 8001194:	8892      	ldrh	r2, [r2, #4]
 8001196:	809a      	strh	r2, [r3, #4]
 8001198:	e043      	b.n	8001222 <leaderBoard+0x1b6>
			else if(leaderboard[i].poziom==1)strcat(bufer,", SRE");
 800119a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	461a      	mov	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d10f      	bne.n	80011d2 <leaderBoard+0x166>
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f80a 	bl	80001d0 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4413      	add	r3, r2
 80011c6:	4a59      	ldr	r2, [pc, #356]	; (800132c <leaderBoard+0x2c0>)
 80011c8:	6810      	ldr	r0, [r2, #0]
 80011ca:	6018      	str	r0, [r3, #0]
 80011cc:	8892      	ldrh	r2, [r2, #4]
 80011ce:	809a      	strh	r2, [r3, #4]
 80011d0:	e027      	b.n	8001222 <leaderBoard+0x1b6>
			else strcat(bufer,", TRU");
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7fe fffa 	bl	80001d0 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4413      	add	r3, r2
 80011e6:	4a52      	ldr	r2, [pc, #328]	; (8001330 <leaderBoard+0x2c4>)
 80011e8:	6810      	ldr	r0, [r2, #0]
 80011ea:	6018      	str	r0, [r3, #0]
 80011ec:	8892      	ldrh	r2, [r2, #4]
 80011ee:	809a      	strh	r2, [r3, #4]
 80011f0:	e017      	b.n	8001222 <leaderBoard+0x1b6>
		}
		else
		{
			sprintf(bufer, "%d", i+1);
 80011f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4947      	ldr	r1, [pc, #284]	; (800131c <leaderBoard+0x2b0>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 fe8e 	bl	8005f20 <siprintf>
			strcat(bufer,".");
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4618      	mov	r0, r3
 800120a:	f7fe ffe1 	bl	80001d0 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4413      	add	r3, r2
 8001218:	4941      	ldr	r1, [pc, #260]	; (8001320 <leaderBoard+0x2b4>)
 800121a:	461a      	mov	r2, r3
 800121c:	460b      	mov	r3, r1
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	8013      	strh	r3, [r2, #0]
		}

		strcpy(opcje[i+1],bufer);
 8001222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	f107 0120 	add.w	r1, r7, #32
 800122c:	4613      	mov	r3, r2
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	440b      	add	r3, r1
 8001234:	f107 0210 	add.w	r2, r7, #16
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f004 ff89 	bl	8006152 <strcpy>
	for(int i=0;i<10;i++){
 8001240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001244:	3301      	adds	r3, #1
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800124a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800124e:	2b09      	cmp	r3, #9
 8001250:	f77f af29 	ble.w	80010a6 <leaderBoard+0x3a>
	}

	int opcja = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	while(1){
		lcd_clear();
 800125a:	f7ff fe3a 	bl	8000ed2 <lcd_clear>
		lcd_print(1,1,opcje[opcja]);
 800125e:	f107 0120 	add.w	r1, r7, #32
 8001262:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001266:	4613      	mov	r3, r2
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	1a9b      	subs	r3, r3, r2
 800126c:	440b      	add	r3, r1
 800126e:	461a      	mov	r2, r3
 8001270:	2101      	movs	r1, #1
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff fe15 	bl	8000ea2 <lcd_print>
		if(opcja!=11)lcd_print(2,1,opcje[opcja+1]);
 8001278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800127c:	2b0b      	cmp	r3, #11
 800127e:	d00d      	beq.n	800129c <leaderBoard+0x230>
 8001280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	f107 0120 	add.w	r1, r7, #32
 800128a:	4613      	mov	r3, r2
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	1a9b      	subs	r3, r3, r2
 8001290:	440b      	add	r3, r1
 8001292:	461a      	mov	r2, r3
 8001294:	2101      	movs	r1, #1
 8001296:	2002      	movs	r0, #2
 8001298:	f7ff fe03 	bl	8000ea2 <lcd_print>

		int wybor = 6;
 800129c:	2306      	movs	r3, #6
 800129e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

		while(wybor == 6)
 80012a2:	e006      	b.n	80012b2 <leaderBoard+0x246>
		{
		  wybor = przycisk();
 80012a4:	f7ff fe20 	bl	8000ee8 <przycisk>
 80012a8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  HAL_Delay(5);
 80012ac:	2005      	movs	r0, #5
 80012ae:	f001 fa95 	bl	80027dc <HAL_Delay>
		while(wybor == 6)
 80012b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d0f4      	beq.n	80012a4 <leaderBoard+0x238>
		}

		if(wybor == 1) //Select
 80012ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d104      	bne.n	80012cc <leaderBoard+0x260>
		{
			if(opcja==11)break;
 80012c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80012c6:	2b0b      	cmp	r3, #11
 80012c8:	d11b      	bne.n	8001302 <leaderBoard+0x296>
 80012ca:	e01e      	b.n	800130a <leaderBoard+0x29e>
		}
		else if(wybor == 4) //Up
 80012cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d109      	bne.n	80012e8 <leaderBoard+0x27c>
		{
			if(opcja > 0)opcja--;
 80012d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dd12      	ble.n	8001302 <leaderBoard+0x296>
 80012dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80012e0:	3b01      	subs	r3, #1
 80012e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80012e6:	e00c      	b.n	8001302 <leaderBoard+0x296>
		}
		else if(wybor == 3) //Down
 80012e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d108      	bne.n	8001302 <leaderBoard+0x296>
		{
			if(opcja < 11)opcja++;
 80012f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80012f4:	2b0a      	cmp	r3, #10
 80012f6:	dc04      	bgt.n	8001302 <leaderBoard+0x296>
 80012f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80012fc:	3301      	adds	r3, #1
 80012fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		}
		HAL_Delay(150);
 8001302:	2096      	movs	r0, #150	; 0x96
 8001304:	f001 fa6a 	bl	80027dc <HAL_Delay>
	while(1){
 8001308:	e7a7      	b.n	800125a <leaderBoard+0x1ee>
	}
}
 800130a:	bf00      	nop
 800130c:	37e4      	adds	r7, #228	; 0xe4
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}
 8001312:	bf00      	nop
 8001314:	08007148 	.word	0x08007148
 8001318:	08007158 	.word	0x08007158
 800131c:	08007160 	.word	0x08007160
 8001320:	08007164 	.word	0x08007164
 8001324:	08007168 	.word	0x08007168
 8001328:	0800716c 	.word	0x0800716c
 800132c:	08007174 	.word	0x08007174
 8001330:	0800717c 	.word	0x0800717c

08001334 <trudnosc>:
void trudnosc(int* poziom)
{
 8001334:	b5b0      	push	{r4, r5, r7, lr}
 8001336:	b096      	sub	sp, #88	; 0x58
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	HAL_Delay(150);
 800133c:	2096      	movs	r0, #150	; 0x96
 800133e:	f001 fa4d 	bl	80027dc <HAL_Delay>

	char opcje[4][15] = {"Latwy", "Sredni", "Trudny","Powrot"};
 8001342:	4b50      	ldr	r3, [pc, #320]	; (8001484 <trudnosc+0x150>)
 8001344:	f107 040c 	add.w	r4, r7, #12
 8001348:	461d      	mov	r5, r3
 800134a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001356:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800135a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	int opcja = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	657b      	str	r3, [r7, #84]	; 0x54
	while(1){
		lcd_clear();
 8001362:	f7ff fdb6 	bl	8000ed2 <lcd_clear>
		lcd_print(1,5,"Trudnosc");
 8001366:	4a48      	ldr	r2, [pc, #288]	; (8001488 <trudnosc+0x154>)
 8001368:	2105      	movs	r1, #5
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff fd99 	bl	8000ea2 <lcd_print>
		if(opcja != 0)lcd_print(2,1,"<");
 8001370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <trudnosc+0x4c>
 8001376:	4a45      	ldr	r2, [pc, #276]	; (800148c <trudnosc+0x158>)
 8001378:	2101      	movs	r1, #1
 800137a:	2002      	movs	r0, #2
 800137c:	f7ff fd91 	bl	8000ea2 <lcd_print>
		if(opcja != 3)lcd_print(2,16,">");
 8001380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001382:	2b03      	cmp	r3, #3
 8001384:	d004      	beq.n	8001390 <trudnosc+0x5c>
 8001386:	4a42      	ldr	r2, [pc, #264]	; (8001490 <trudnosc+0x15c>)
 8001388:	2110      	movs	r1, #16
 800138a:	2002      	movs	r0, #2
 800138c:	f7ff fd89 	bl	8000ea2 <lcd_print>

		int pozycja_wyswietlania = (16 - strlen(opcje[opcja])) / 2 + 1;
 8001390:	f107 010c 	add.w	r1, r7, #12
 8001394:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001396:	4613      	mov	r3, r2
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	440b      	add	r3, r1
 800139e:	4618      	mov	r0, r3
 80013a0:	f7fe ff16 	bl	80001d0 <strlen>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f1c3 0310 	rsb	r3, r3, #16
 80013aa:	085b      	lsrs	r3, r3, #1
 80013ac:	3301      	adds	r3, #1
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		lcd_print(2,pozycja_wyswietlania,opcje[opcja]);
 80013b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013b2:	b2d8      	uxtb	r0, r3
 80013b4:	f107 010c 	add.w	r1, r7, #12
 80013b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80013ba:	4613      	mov	r3, r2
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	461a      	mov	r2, r3
 80013c4:	4601      	mov	r1, r0
 80013c6:	2002      	movs	r0, #2
 80013c8:	f7ff fd6b 	bl	8000ea2 <lcd_print>

		int wybor = 6;
 80013cc:	2306      	movs	r3, #6
 80013ce:	653b      	str	r3, [r7, #80]	; 0x50

		while(wybor == 6)
 80013d0:	e005      	b.n	80013de <trudnosc+0xaa>
		{
		  wybor = przycisk();
 80013d2:	f7ff fd89 	bl	8000ee8 <przycisk>
 80013d6:	6538      	str	r0, [r7, #80]	; 0x50
		  HAL_Delay(5);
 80013d8:	2005      	movs	r0, #5
 80013da:	f001 f9ff 	bl	80027dc <HAL_Delay>
		while(wybor == 6)
 80013de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013e0:	2b06      	cmp	r3, #6
 80013e2:	d0f6      	beq.n	80013d2 <trudnosc+0x9e>
		}

		if(wybor == 1) //Select
 80013e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d12f      	bne.n	800144a <trudnosc+0x116>
		{
			if(opcja==3)
 80013ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d043      	beq.n	8001478 <trudnosc+0x144>
			{
				break;
			}
			else
			{
				*poziom=opcja;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80013f4:	601a      	str	r2, [r3, #0]

				lcd_clear();
 80013f6:	f7ff fd6c 	bl	8000ed2 <lcd_clear>
				lcd_print(1,2, "Zmieniono na:");
 80013fa:	4a26      	ldr	r2, [pc, #152]	; (8001494 <trudnosc+0x160>)
 80013fc:	2102      	movs	r1, #2
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff fd4f 	bl	8000ea2 <lcd_print>

				int pozycja_wyswietlania = (16 - strlen(opcje[opcja])) / 2 + 1;
 8001404:	f107 010c 	add.w	r1, r7, #12
 8001408:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800140a:	4613      	mov	r3, r2
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	440b      	add	r3, r1
 8001412:	4618      	mov	r0, r3
 8001414:	f7fe fedc 	bl	80001d0 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	f1c3 0310 	rsb	r3, r3, #16
 800141e:	085b      	lsrs	r3, r3, #1
 8001420:	3301      	adds	r3, #1
 8001422:	64bb      	str	r3, [r7, #72]	; 0x48
				lcd_print(2,pozycja_wyswietlania,opcje[opcja]);
 8001424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001426:	b2d8      	uxtb	r0, r3
 8001428:	f107 010c 	add.w	r1, r7, #12
 800142c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800142e:	4613      	mov	r3, r2
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	440b      	add	r3, r1
 8001436:	461a      	mov	r2, r3
 8001438:	4601      	mov	r1, r0
 800143a:	2002      	movs	r0, #2
 800143c:	f7ff fd31 	bl	8000ea2 <lcd_print>

				HAL_Delay(1500);
 8001440:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001444:	f001 f9ca 	bl	80027dc <HAL_Delay>
				break;
 8001448:	e017      	b.n	800147a <trudnosc+0x146>
			}
		}
		else if(wybor == 2) //Left
 800144a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800144c:	2b02      	cmp	r3, #2
 800144e:	d106      	bne.n	800145e <trudnosc+0x12a>
		{
			if(opcja > 0)opcja--;
 8001450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001452:	2b00      	cmp	r3, #0
 8001454:	dd0c      	ble.n	8001470 <trudnosc+0x13c>
 8001456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001458:	3b01      	subs	r3, #1
 800145a:	657b      	str	r3, [r7, #84]	; 0x54
 800145c:	e008      	b.n	8001470 <trudnosc+0x13c>
		}
		else if(wybor == 5) //Right
 800145e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001460:	2b05      	cmp	r3, #5
 8001462:	d105      	bne.n	8001470 <trudnosc+0x13c>
		{
			if(opcja < 3)opcja++;
 8001464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001466:	2b02      	cmp	r3, #2
 8001468:	dc02      	bgt.n	8001470 <trudnosc+0x13c>
 800146a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800146c:	3301      	adds	r3, #1
 800146e:	657b      	str	r3, [r7, #84]	; 0x54
		}
		HAL_Delay(150);
 8001470:	2096      	movs	r0, #150	; 0x96
 8001472:	f001 f9b3 	bl	80027dc <HAL_Delay>
	while(1){
 8001476:	e774      	b.n	8001362 <trudnosc+0x2e>
				break;
 8001478:	bf00      	nop
	}
}
 800147a:	bf00      	nop
 800147c:	3758      	adds	r7, #88	; 0x58
 800147e:	46bd      	mov	sp, r7
 8001480:	bdb0      	pop	{r4, r5, r7, pc}
 8001482:	bf00      	nop
 8001484:	080071a8 	.word	0x080071a8
 8001488:	08007184 	.word	0x08007184
 800148c:	08007190 	.word	0x08007190
 8001490:	08007194 	.word	0x08007194
 8001494:	08007198 	.word	0x08007198

08001498 <pacmanPrawo>:

void pacmanPrawo(int linia, int kolumna)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	lcd_gotoxy(linia, kolumna);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fcd6 	bl	8000e5e <lcd_gotoxy>
	lcd_char_cp(0);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff fbb0 	bl	8000c18 <lcd_char_cp>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <pacmanLewo>:

void pacmanLewo(int linia, int kolumna)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	lcd_gotoxy(linia, kolumna);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fcc2 	bl	8000e5e <lcd_gotoxy>
	lcd_char_cp(1);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fb9c 	bl	8000c18 <lcd_char_cp>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <wisienka>:

void wisienka(int linia, int kolumna)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
	lcd_gotoxy(linia, kolumna);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fcae 	bl	8000e5e <lcd_gotoxy>
	lcd_char_cp(2);
 8001502:	2002      	movs	r0, #2
 8001504:	f7ff fb88 	bl	8000c18 <lcd_char_cp>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <duch>:

void duch(int linia, int kolumna)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	lcd_gotoxy(linia, kolumna);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fc9a 	bl	8000e5e <lcd_gotoxy>
	lcd_char_cp(3);
 800152a:	2003      	movs	r0, #3
 800152c:	f7ff fb74 	bl	8000c18 <lcd_char_cp>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b0e2      	sub	sp, #392	; 0x188
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153e:	f001 f8d8 	bl	80026f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001542:	f000 fd6d 	bl	8002020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001546:	f000 fe51 	bl	80021ec <MX_GPIO_Init>
  MX_ADC1_Init();
 800154a:	f000 fdb1 	bl	80020b0 <MX_ADC1_Init>
  MX_RTC_Init();
 800154e:	f000 fe25 	bl	800219c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 8001552:	2208      	movs	r2, #8
 8001554:	2100      	movs	r1, #0
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fc43 	bl	8000de2 <lcd_init>
  int poziom = 0; //0 - latwy, 1 - sredni, 2 - trudny
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  int aktywnosc_gry = 0; //0 - gra nie jest aktywna
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  record leaderboard[10];
  srand(time(NULL));
 8001568:	2000      	movs	r0, #0
 800156a:	f004 fd53 	bl	8006014 <time>
 800156e:	4603      	mov	r3, r0
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fba7 	bl	8005cc4 <srand>

  for(int i=0;i<10;i++)
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800157c:	e02b      	b.n	80015d6 <main+0x9e>
  {
	  leaderboard[i].wynik = -1;
 800157e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800158e:	443b      	add	r3, r7
 8001590:	3bd4      	subs	r3, #212	; 0xd4
 8001592:	f04f 32ff 	mov.w	r2, #4294967295
 8001596:	601a      	str	r2, [r3, #0]
	  leaderboard[i].poziom = -1;
 8001598:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015a8:	443b      	add	r3, r7
 80015aa:	3bd8      	subs	r3, #216	; 0xd8
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	601a      	str	r2, [r3, #0]
	  strcpy(leaderboard[i].nazwa, "AAA");
 80015b2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80015b6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	3308      	adds	r3, #8
 80015c4:	440b      	add	r3, r1
 80015c6:	4ad0      	ldr	r2, [pc, #832]	; (8001908 <main+0x3d0>)
 80015c8:	6810      	ldr	r0, [r2, #0]
 80015ca:	6018      	str	r0, [r3, #0]
  for(int i=0;i<10;i++)
 80015cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015d0:	3301      	adds	r3, #1
 80015d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015da:	2b09      	cmp	r3, #9
 80015dc:	ddcf      	ble.n	800157e <main+0x46>
  }
  char opcje[3][15] = {"Start", "Trudnosc", "Leaderboard"};
 80015de:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015e6:	4ac9      	ldr	r2, [pc, #804]	; (800190c <main+0x3d4>)
 80015e8:	461c      	mov	r4, r3
 80015ea:	4615      	mov	r5, r2
 80015ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015f8:	c407      	stmia	r4!, {r0, r1, r2}
 80015fa:	7023      	strb	r3, [r4, #0]
  int opcja = 0; //Start
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

  RTC_TimeTypeDef sTime = {0};
 8001602:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001606:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800160a:	461a      	mov	r2, r3
 800160c:	2300      	movs	r3, #0
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	6053      	str	r3, [r2, #4]
 8001612:	6093      	str	r3, [r2, #8]
 8001614:	60d3      	str	r3, [r2, #12]
 8001616:	6113      	str	r3, [r2, #16]

  sTime.DayLightSaving=RTC_DAYLIGHTSAVING_NONE;
 8001618:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800161c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation=RTC_STOREOPERATION_RESET;
 8001624:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001628:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]

	lcd_cmd(0x40); //Pacman Prawo
 8001630:	2040      	movs	r0, #64	; 0x40
 8001632:	f7ff fa25 	bl	8000a80 <lcd_cmd>
	lcd_char_cp(0x06);
 8001636:	2006      	movs	r0, #6
 8001638:	f7ff faee 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x09);
 800163c:	2009      	movs	r0, #9
 800163e:	f7ff faeb 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x12);
 8001642:	2012      	movs	r0, #18
 8001644:	f7ff fae8 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x14);
 8001648:	2014      	movs	r0, #20
 800164a:	f7ff fae5 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x12);
 800164e:	2012      	movs	r0, #18
 8001650:	f7ff fae2 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x09);
 8001654:	2009      	movs	r0, #9
 8001656:	f7ff fadf 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x06);
 800165a:	2006      	movs	r0, #6
 800165c:	f7ff fadc 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x00);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fad9 	bl	8000c18 <lcd_char_cp>

	//lcd_cmd(0x41); Pacman Lewo
	lcd_char_cp(0x0C);
 8001666:	200c      	movs	r0, #12
 8001668:	f7ff fad6 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x12);
 800166c:	2012      	movs	r0, #18
 800166e:	f7ff fad3 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x09);
 8001672:	2009      	movs	r0, #9
 8001674:	f7ff fad0 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x05);
 8001678:	2005      	movs	r0, #5
 800167a:	f7ff facd 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x09);
 800167e:	2009      	movs	r0, #9
 8001680:	f7ff faca 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x12);
 8001684:	2012      	movs	r0, #18
 8001686:	f7ff fac7 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x0C);
 800168a:	200c      	movs	r0, #12
 800168c:	f7ff fac4 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x00);
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff fac1 	bl	8000c18 <lcd_char_cp>

	//lcd_cmd(0x42); Wisienka
	lcd_char_cp(0x06);
 8001696:	2006      	movs	r0, #6
 8001698:	f7ff fabe 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x04);
 800169c:	2004      	movs	r0, #4
 800169e:	f7ff fabb 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x0E);
 80016a2:	200e      	movs	r0, #14
 80016a4:	f7ff fab8 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x11);
 80016a8:	2011      	movs	r0, #17
 80016aa:	f7ff fab5 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x11);
 80016ae:	2011      	movs	r0, #17
 80016b0:	f7ff fab2 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x11);
 80016b4:	2011      	movs	r0, #17
 80016b6:	f7ff faaf 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x0E);
 80016ba:	200e      	movs	r0, #14
 80016bc:	f7ff faac 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x00);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff faa9 	bl	8000c18 <lcd_char_cp>

	//lcd_cmd(0x42); Duszek
	lcd_char_cp(0x04);
 80016c6:	2004      	movs	r0, #4
 80016c8:	f7ff faa6 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x0E);
 80016cc:	200e      	movs	r0, #14
 80016ce:	f7ff faa3 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x1F);
 80016d2:	201f      	movs	r0, #31
 80016d4:	f7ff faa0 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x15);
 80016d8:	2015      	movs	r0, #21
 80016da:	f7ff fa9d 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x1B);
 80016de:	201b      	movs	r0, #27
 80016e0:	f7ff fa9a 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x1F);
 80016e4:	201f      	movs	r0, #31
 80016e6:	f7ff fa97 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x15);
 80016ea:	2015      	movs	r0, #21
 80016ec:	f7ff fa94 	bl	8000c18 <lcd_char_cp>
	lcd_char_cp(0x00);
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff fa91 	bl	8000c18 <lcd_char_cp>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(aktywnosc_gry == 0)
 80016f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 8083 	bne.w	8001806 <main+0x2ce>
	  {
		  //menu
		  lcd_clear();
 8001700:	f7ff fbe7 	bl	8000ed2 <lcd_clear>
		  lcd_print(1,3,"Pacman Menu");
 8001704:	4a82      	ldr	r2, [pc, #520]	; (8001910 <main+0x3d8>)
 8001706:	2103      	movs	r1, #3
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff fbca 	bl	8000ea2 <lcd_print>
		  if(opcja != 0)lcd_print(2,1,"<");
 800170e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001712:	2b00      	cmp	r3, #0
 8001714:	d004      	beq.n	8001720 <main+0x1e8>
 8001716:	4a7f      	ldr	r2, [pc, #508]	; (8001914 <main+0x3dc>)
 8001718:	2101      	movs	r1, #1
 800171a:	2002      	movs	r0, #2
 800171c:	f7ff fbc1 	bl	8000ea2 <lcd_print>
		  if(opcja != 2)lcd_print(2,16,">");
 8001720:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001724:	2b02      	cmp	r3, #2
 8001726:	d004      	beq.n	8001732 <main+0x1fa>
 8001728:	4a7b      	ldr	r2, [pc, #492]	; (8001918 <main+0x3e0>)
 800172a:	2110      	movs	r1, #16
 800172c:	2002      	movs	r0, #2
 800172e:	f7ff fbb8 	bl	8000ea2 <lcd_print>

		  int pozycja_wyswietlania = (16 - strlen(opcje[opcja])) / 2 + 1;
 8001732:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001736:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800173a:	4613      	mov	r3, r2
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	440b      	add	r3, r1
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fd44 	bl	80001d0 <strlen>
 8001748:	4603      	mov	r3, r0
 800174a:	f1c3 0310 	rsb	r3, r3, #16
 800174e:	085b      	lsrs	r3, r3, #1
 8001750:	3301      	adds	r3, #1
 8001752:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		  lcd_print(2,pozycja_wyswietlania,opcje[opcja]);
 8001756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800175a:	b2d8      	uxtb	r0, r3
 800175c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001760:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001764:	4613      	mov	r3, r2
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	440b      	add	r3, r1
 800176c:	461a      	mov	r2, r3
 800176e:	4601      	mov	r1, r0
 8001770:	2002      	movs	r0, #2
 8001772:	f7ff fb96 	bl	8000ea2 <lcd_print>

		  int wybor = 6;
 8001776:	2306      	movs	r3, #6
 8001778:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

		  while(wybor == 6)
 800177c:	e006      	b.n	800178c <main+0x254>
		  {
			  wybor = przycisk();
 800177e:	f7ff fbb3 	bl	8000ee8 <przycisk>
 8001782:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
			  HAL_Delay(5);
 8001786:	2005      	movs	r0, #5
 8001788:	f001 f828 	bl	80027dc <HAL_Delay>
		  while(wybor == 6)
 800178c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001790:	2b06      	cmp	r3, #6
 8001792:	d0f4      	beq.n	800177e <main+0x246>
		  }

		  if(wybor == 1) //Select
 8001794:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001798:	2b01      	cmp	r3, #1
 800179a:	d116      	bne.n	80017ca <main+0x292>
		  {
			  if(opcja==0)aktywnosc_gry=1;
 800179c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d103      	bne.n	80017ac <main+0x274>
 80017a4:	2301      	movs	r3, #1
 80017a6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017aa:	e00e      	b.n	80017ca <main+0x292>
			  else if(opcja==1)trudnosc(&poziom);
 80017ac:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <main+0x288>
 80017b4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fdbb 	bl	8001334 <trudnosc>
 80017be:	e004      	b.n	80017ca <main+0x292>
			  else leaderBoard(&(leaderboard[0]));
 80017c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fc51 	bl	800106c <leaderBoard>
		  }
		  if(wybor == 2) //Left
 80017ca:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d108      	bne.n	80017e4 <main+0x2ac>
		  {
			  if(opcja > 0)opcja--;
 80017d2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	dd04      	ble.n	80017e4 <main+0x2ac>
 80017da:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80017de:	3b01      	subs	r3, #1
 80017e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
		  }
		  if(wybor == 5) //Right
 80017e4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d108      	bne.n	80017fe <main+0x2c6>
		  {
			  if(opcja < 2)opcja++;
 80017ec:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	dc04      	bgt.n	80017fe <main+0x2c6>
 80017f4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80017f8:	3301      	adds	r3, #1
 80017fa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
		  }
		  HAL_Delay(150);
 80017fe:	2096      	movs	r0, #150	; 0x96
 8001800:	f000 ffec 	bl	80027dc <HAL_Delay>
 8001804:	e777      	b.n	80016f6 <main+0x1be>
	  }
	  else
	  {
		  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001806:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800180a:	2200      	movs	r2, #0
 800180c:	4619      	mov	r1, r3
 800180e:	4843      	ldr	r0, [pc, #268]	; (800191c <main+0x3e4>)
 8001810:	f004 f842 	bl	8005898 <HAL_RTC_SetTime>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <main+0x2e6>
		  {
			  Error_Handler();
 800181a:	f000 fd5f 	bl	80022dc <Error_Handler>
		  }
		  int x=7,y=2;
 800181e:	2307      	movs	r3, #7
 8001820:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001824:	2302      	movs	r3, #2
 8001826:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		  int xw=1,yw=1;
 800182a:	2301      	movs	r3, #1
 800182c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001830:	2301      	movs	r3, #1
 8001832:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		  int xd=3,yd=2;
 8001836:	2303      	movs	r3, #3
 8001838:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800183c:	2302      	movs	r3, #2
 800183e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
		  int xdelta,ydelta;
		  int wynik=0;
 8001842:	2300      	movs	r3, #0
 8001844:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

		  int kierunek = 0; //0 - prawo, 1 - lewo
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

		  HAL_RTC_GetTime(&hrtc, &nowsTime, RTC_FORMAT_BIN);
 800184e:	2200      	movs	r2, #0
 8001850:	4933      	ldr	r1, [pc, #204]	; (8001920 <main+0x3e8>)
 8001852:	4832      	ldr	r0, [pc, #200]	; (800191c <main+0x3e4>)
 8001854:	f004 f8bd 	bl	80059d2 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &nowsDate, RTC_FORMAT_BIN);
 8001858:	2200      	movs	r2, #0
 800185a:	4932      	ldr	r1, [pc, #200]	; (8001924 <main+0x3ec>)
 800185c:	482f      	ldr	r0, [pc, #188]	; (800191c <main+0x3e4>)
 800185e:	f004 f914 	bl	8005a8a <HAL_RTC_GetDate>
		  HAL_Delay(100);
 8001862:	2064      	movs	r0, #100	; 0x64
 8001864:	f000 ffba 	bl	80027dc <HAL_Delay>
		  int ghostTime = nowsTime.Seconds;
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <main+0x3e8>)
 800186a:	789b      	ldrb	r3, [r3, #2]
 800186c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		  while(aktywnosc_gry)
 8001870:	e1ed      	b.n	8001c4e <main+0x716>
		  {

			  lcd_clear();
 8001872:	f7ff fb2e 	bl	8000ed2 <lcd_clear>

			  if(kierunek == 0)
 8001876:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <main+0x354>
			  {
				  pacmanPrawo(y, x);
 800187e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001882:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8001886:	f7ff fe07 	bl	8001498 <pacmanPrawo>
 800188a:	e005      	b.n	8001898 <main+0x360>
			  }
			  else
			  {
				  pacmanLewo(y, x);
 800188c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001890:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8001894:	f7ff fe14 	bl	80014c0 <pacmanLewo>
			  }

			  wisienka(yw, xw);
 8001898:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800189c:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 80018a0:	f7ff fe22 	bl	80014e8 <wisienka>
			  if(poziom == 2)duch(yd,xd);
 80018a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d105      	bne.n	80018b8 <main+0x380>
 80018ac:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 80018b0:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 80018b4:	f7ff fe2c 	bl	8001510 <duch>

			  int wybor = 6;
 80018b8:	2306      	movs	r3, #6
 80018ba:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

			  while(wybor == 6)
 80018be:	e0b0      	b.n	8001a22 <main+0x4ea>
			  {
				  wybor = przycisk();
 80018c0:	f7ff fb12 	bl	8000ee8 <przycisk>
 80018c4:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
				  if(nowsTime.Seconds>30)break;
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <main+0x3e8>)
 80018ca:	789b      	ldrb	r3, [r3, #2]
 80018cc:	2b1e      	cmp	r3, #30
 80018ce:	f200 80ae 	bhi.w	8001a2e <main+0x4f6>

				  if(poziom == 2 && nowsTime.Seconds-ghostTime>0)
 80018d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	f040 80a0 	bne.w	8001a1c <main+0x4e4>
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <main+0x3e8>)
 80018de:	789b      	ldrb	r3, [r3, #2]
 80018e0:	461a      	mov	r2, r3
 80018e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f340 8097 	ble.w	8001a1c <main+0x4e4>
				  {
					  lcd_clear();
 80018ee:	f7ff faf0 	bl	8000ed2 <lcd_clear>
					  if(kierunek == 0)
 80018f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d116      	bne.n	8001928 <main+0x3f0>
					  {
						  pacmanPrawo(y, x);
 80018fa:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80018fe:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8001902:	f7ff fdc9 	bl	8001498 <pacmanPrawo>
 8001906:	e015      	b.n	8001934 <main+0x3fc>
 8001908:	080071e4 	.word	0x080071e4
 800190c:	08007218 	.word	0x08007218
 8001910:	080071e8 	.word	0x080071e8
 8001914:	08007190 	.word	0x08007190
 8001918:	08007194 	.word	0x08007194
 800191c:	200000e8 	.word	0x200000e8
 8001920:	2000010c 	.word	0x2000010c
 8001924:	20000120 	.word	0x20000120
					  }
					  else
					  {
						  pacmanLewo(y, x);
 8001928:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800192c:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8001930:	f7ff fdc6 	bl	80014c0 <pacmanLewo>
					  }

					  wisienka(yw, xw);
 8001934:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001938:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800193c:	f7ff fdd4 	bl	80014e8 <wisienka>
					  xdelta = rand()%3-1;
 8001940:	f004 f9ee 	bl	8005d20 <rand>
 8001944:	4601      	mov	r1, r0
 8001946:	4bc6      	ldr	r3, [pc, #792]	; (8001c60 <main+0x728>)
 8001948:	fb83 3201 	smull	r3, r2, r3, r1
 800194c:	17cb      	asrs	r3, r1, #31
 800194e:	1ad2      	subs	r2, r2, r3
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	1aca      	subs	r2, r1, r3
 8001958:	1e53      	subs	r3, r2, #1
 800195a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
					  if(xdelta==0) ydelta=rand()%3-1;
 800195e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10e      	bne.n	8001984 <main+0x44c>
 8001966:	f004 f9db 	bl	8005d20 <rand>
 800196a:	4601      	mov	r1, r0
 800196c:	4bbc      	ldr	r3, [pc, #752]	; (8001c60 <main+0x728>)
 800196e:	fb83 3201 	smull	r3, r2, r3, r1
 8001972:	17cb      	asrs	r3, r1, #31
 8001974:	1ad2      	subs	r2, r2, r3
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	1aca      	subs	r2, r1, r3
 800197e:	1e53      	subs	r3, r2, #1
 8001980:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

					  if(xd+xdelta<17&&xd+xdelta>0)xd+=xdelta;
 8001984:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001988:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800198c:	4413      	add	r3, r2
 800198e:	2b10      	cmp	r3, #16
 8001990:	dc0d      	bgt.n	80019ae <main+0x476>
 8001992:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001996:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800199a:	4413      	add	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	dd06      	ble.n	80019ae <main+0x476>
 80019a0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80019a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019a8:	4413      	add	r3, r2
 80019aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
					  if(yd+ydelta<3&&yd+ydelta>0)yd+=ydelta;
 80019ae:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80019b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019b6:	4413      	add	r3, r2
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	dc0d      	bgt.n	80019d8 <main+0x4a0>
 80019bc:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80019c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019c4:	4413      	add	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	dd06      	ble.n	80019d8 <main+0x4a0>
 80019ca:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80019ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019d2:	4413      	add	r3, r2
 80019d4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
					  duch(yd,xd);
 80019d8:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 80019dc:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 80019e0:	f7ff fd96 	bl	8001510 <duch>
					  if(xd==xw&&yd==yw)break;
 80019e4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80019e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d105      	bne.n	80019fc <main+0x4c4>
 80019f0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80019f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d01a      	beq.n	8001a32 <main+0x4fa>
					  if(xd==x&&yd==y)break;
 80019fc:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001a00:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d105      	bne.n	8001a14 <main+0x4dc>
 8001a08:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001a0c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d010      	beq.n	8001a36 <main+0x4fe>
					  ghostTime = nowsTime.Seconds;
 8001a14:	4b93      	ldr	r3, [pc, #588]	; (8001c64 <main+0x72c>)
 8001a16:	789b      	ldrb	r3, [r3, #2]
 8001a18:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
				  }

				  HAL_Delay(5);
 8001a1c:	2005      	movs	r0, #5
 8001a1e:	f000 fedd 	bl	80027dc <HAL_Delay>
			  while(wybor == 6)
 8001a22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	f43f af4a 	beq.w	80018c0 <main+0x388>
 8001a2c:	e004      	b.n	8001a38 <main+0x500>
				  if(nowsTime.Seconds>30)break;
 8001a2e:	bf00      	nop
 8001a30:	e002      	b.n	8001a38 <main+0x500>
					  if(xd==xw&&yd==yw)break;
 8001a32:	bf00      	nop
 8001a34:	e000      	b.n	8001a38 <main+0x500>
					  if(xd==x&&yd==y)break;
 8001a36:	bf00      	nop
				  if(yd+ydelta<3&&yd+ydelta>0)yd+=ydelta;
				  duch(yd,xd);
				  ghostTime = nowsTime;
			  }*/

			  if(wybor == 1) //Select
 8001a38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d03c      	beq.n	8001aba <main+0x582>
			  {

			  }
			  else if(wybor == 2) //Left
 8001a40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d10c      	bne.n	8001a62 <main+0x52a>
			  {
				  if(x>1)x--;
 8001a48:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	dd04      	ble.n	8001a5a <main+0x522>
 8001a50:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001a54:	3b01      	subs	r3, #1
 8001a56:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

				  kierunek = 1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a60:	e02b      	b.n	8001aba <main+0x582>
			  }
			  else if(wybor == 3) //Down
 8001a62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d109      	bne.n	8001a7e <main+0x546>
			  {
				  if(y==1)y++;
 8001a6a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d123      	bne.n	8001aba <main+0x582>
 8001a72:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a76:	3301      	adds	r3, #1
 8001a78:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001a7c:	e01d      	b.n	8001aba <main+0x582>
			  }
			  else if(wybor == 4) //Up
 8001a7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d109      	bne.n	8001a9a <main+0x562>
			  {
				  if(y==2)y--;
 8001a86:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d115      	bne.n	8001aba <main+0x582>
 8001a8e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001a98:	e00f      	b.n	8001aba <main+0x582>
			  }
			  else if(wybor == 5) //Right
 8001a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d10b      	bne.n	8001aba <main+0x582>
			  {
				  if(x<16)x++;
 8001aa2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	dc04      	bgt.n	8001ab4 <main+0x57c>
 8001aaa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

				  kierunek = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			  }

			  if(x==xw&&y==yw)wynik++;
 8001aba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001abe:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d10a      	bne.n	8001adc <main+0x5a4>
 8001ac6:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8001aca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d104      	bne.n	8001adc <main+0x5a4>
 8001ad2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
			  if(poziom == 2&&xd==xw&&yd==yw)wynik--;
 8001adc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	f040 8084 	bne.w	8001bee <main+0x6b6>
 8001ae6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001aea:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d17d      	bne.n	8001bee <main+0x6b6>
 8001af2:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001af6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d177      	bne.n	8001bee <main+0x6b6>
 8001afe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b02:	3b01      	subs	r3, #1
 8001b04:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158



			  while(x==xw&&y==yw||xd==xw&&yd==yw)
 8001b08:	e071      	b.n	8001bee <main+0x6b6>
			  {
				  if(poziom == 0)
 8001b0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d11c      	bne.n	8001b4c <main+0x614>
				  {
					  xw=rand()%15+1; //Zakres od 0 do 15
 8001b12:	f004 f905 	bl	8005d20 <rand>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <main+0x730>)
 8001b1a:	fb83 1302 	smull	r1, r3, r3, r2
 8001b1e:	4413      	add	r3, r2
 8001b20:	10d9      	asrs	r1, r3, #3
 8001b22:	17d3      	asrs	r3, r2, #31
 8001b24:	1ac9      	subs	r1, r1, r3
 8001b26:	460b      	mov	r3, r1
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	1a5b      	subs	r3, r3, r1
 8001b2c:	1ad1      	subs	r1, r2, r3
 8001b2e:	1c4b      	adds	r3, r1, #1
 8001b30:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
					  yw=rand()%2+1; //Zakres od 0 do 2
 8001b34:	f004 f8f4 	bl	8005d20 <rand>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	bfb8      	it	lt
 8001b42:	425b      	neglt	r3, r3
 8001b44:	3301      	adds	r3, #1
 8001b46:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001b4a:	e050      	b.n	8001bee <main+0x6b6>
				  }
				  else if(poziom == 1)
 8001b4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d124      	bne.n	8001b9e <main+0x666>
				  {
					  xw = rand() % 5+1; // Zakres od 0 do 4
 8001b54:	f004 f8e4 	bl	8005d20 <rand>
 8001b58:	4601      	mov	r1, r0
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <main+0x734>)
 8001b5c:	fb83 2301 	smull	r2, r3, r3, r1
 8001b60:	105a      	asrs	r2, r3, #1
 8001b62:	17cb      	asrs	r3, r1, #31
 8001b64:	1ad2      	subs	r2, r2, r3
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	1aca      	subs	r2, r1, r3
 8001b6e:	1c53      	adds	r3, r2, #1
 8001b70:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
					  if (x < 7)
 8001b74:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001b78:	2b06      	cmp	r3, #6
 8001b7a:	dc04      	bgt.n	8001b86 <main+0x64e>
					  {
						  xw += 10; // Zakres od 12 do 15
 8001b7c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001b80:	330a      	adds	r3, #10
 8001b82:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
					  }

					  yw=rand()%2+1; //Zakres od 0 do 2
 8001b86:	f004 f8cb 	bl	8005d20 <rand>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	bfb8      	it	lt
 8001b94:	425b      	neglt	r3, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001b9c:	e027      	b.n	8001bee <main+0x6b6>
				  }
				  else if(poziom == 2)
 8001b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d123      	bne.n	8001bee <main+0x6b6>
				  {
					  xw = rand() % 5+1; // Zakres od 0 do 4
 8001ba6:	f004 f8bb 	bl	8005d20 <rand>
 8001baa:	4601      	mov	r1, r0
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <main+0x734>)
 8001bae:	fb83 2301 	smull	r2, r3, r3, r1
 8001bb2:	105a      	asrs	r2, r3, #1
 8001bb4:	17cb      	asrs	r3, r1, #31
 8001bb6:	1ad2      	subs	r2, r2, r3
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	1aca      	subs	r2, r1, r3
 8001bc0:	1c53      	adds	r3, r2, #1
 8001bc2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
					  if (x < 7)
 8001bc6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001bca:	2b06      	cmp	r3, #6
 8001bcc:	dc04      	bgt.n	8001bd8 <main+0x6a0>
					  {
						  xw += 10; // Zakres od 12 do 15
 8001bce:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001bd2:	330a      	adds	r3, #10
 8001bd4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
					  }

					  yw=rand()%2+1; //Zakres od 0 do 2
 8001bd8:	f004 f8a2 	bl	8005d20 <rand>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	bfb8      	it	lt
 8001be6:	425b      	neglt	r3, r3
 8001be8:	3301      	adds	r3, #1
 8001bea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
			  while(x==xw&&y==yw||xd==xw&&yd==yw)
 8001bee:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001bf2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d105      	bne.n	8001c06 <main+0x6ce>
 8001bfa:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8001bfe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d081      	beq.n	8001b0a <main+0x5d2>
 8001c06:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001c0a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d106      	bne.n	8001c20 <main+0x6e8>
 8001c12:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001c16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	f43f af75 	beq.w	8001b0a <main+0x5d2>
				  }
			  }

			  if(poziom == 2&&xd==x&&yd==y)break;
 8001c20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d10b      	bne.n	8001c40 <main+0x708>
 8001c28:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001c2c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d105      	bne.n	8001c40 <main+0x708>
 8001c34:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001c38:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d00c      	beq.n	8001c5a <main+0x722>

			  if(nowsTime.Seconds>30)break;
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <main+0x72c>)
 8001c42:	789b      	ldrb	r3, [r3, #2]
 8001c44:	2b1e      	cmp	r3, #30
 8001c46:	d813      	bhi.n	8001c70 <main+0x738>

			  HAL_Delay(50);
 8001c48:	2032      	movs	r0, #50	; 0x32
 8001c4a:	f000 fdc7 	bl	80027dc <HAL_Delay>
		  while(aktywnosc_gry)
 8001c4e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f47f ae0d 	bne.w	8001872 <main+0x33a>
 8001c58:	e00b      	b.n	8001c72 <main+0x73a>
			  if(poziom == 2&&xd==x&&yd==y)break;
 8001c5a:	bf00      	nop
 8001c5c:	e009      	b.n	8001c72 <main+0x73a>
 8001c5e:	bf00      	nop
 8001c60:	55555556 	.word	0x55555556
 8001c64:	2000010c 	.word	0x2000010c
 8001c68:	88888889 	.word	0x88888889
 8001c6c:	66666667 	.word	0x66666667
			  if(nowsTime.Seconds>30)break;
 8001c70:	bf00      	nop
		  }

		  if(poziom == 1)
 8001c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d112      	bne.n	8001ca0 <main+0x768>
		  {
			  wynik = wynik * 1.5;
 8001c7a:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8001c7e:	f7fe fd7b 	bl	8000778 <__aeabi_i2d>
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	4bdb      	ldr	r3, [pc, #876]	; (8001ff4 <main+0xabc>)
 8001c88:	f7fe fafa 	bl	8000280 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7fe fe62 	bl	800095c <__aeabi_d2iz>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c9e:	e008      	b.n	8001cb2 <main+0x77a>
		  }
		  else if(poziom == 2)
 8001ca0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d104      	bne.n	8001cb2 <main+0x77a>
		  {
			  wynik = wynik * 2;
 8001ca8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		  }

		  int setNewLeader=0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		  if(wynik>leaderboard[9].wynik) setNewLeader=1;
 8001cb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cbc:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dd02      	ble.n	8001cca <main+0x792>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

		  lcd_clear();
 8001cca:	f7ff f902 	bl	8000ed2 <lcd_clear>
		  lcd_print(1, 3, "Koniec gry!");
 8001cce:	4aca      	ldr	r2, [pc, #808]	; (8001ff8 <main+0xac0>)
 8001cd0:	2103      	movs	r1, #3
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7ff f8e5 	bl	8000ea2 <lcd_print>
		  char b_wynik[15];
		  char b_wynik2[6];
		  strcpy(b_wynik, "Wynik: ");
 8001cd8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cdc:	4ac7      	ldr	r2, [pc, #796]	; (8001ffc <main+0xac4>)
 8001cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ce2:	e883 0003 	stmia.w	r3, {r0, r1}
		  sprintf(b_wynik2, "%d", wynik);
 8001ce6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cea:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001cee:	49c4      	ldr	r1, [pc, #784]	; (8002000 <main+0xac8>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f004 f915 	bl	8005f20 <siprintf>
		  strcat(b_wynik, b_wynik2);
 8001cf6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001cfa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 f978 	bl	8005ff6 <strcat>
		  lcd_print(2, 1, b_wynik);
 8001d06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	2002      	movs	r0, #2
 8001d10:	f7ff f8c7 	bl	8000ea2 <lcd_print>
		  HAL_Delay(3000);
 8001d14:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d18:	f000 fd60 	bl	80027dc <HAL_Delay>
		  lcd_clear();
 8001d1c:	f7ff f8d9 	bl	8000ed2 <lcd_clear>

		  if(setNewLeader){
 8001d20:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 8172 	beq.w	800200e <main+0xad6>
			  char alfabet[26][2] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
 8001d2a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d2e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d32:	4ab4      	ldr	r2, [pc, #720]	; (8002004 <main+0xacc>)
 8001d34:	461c      	mov	r4, r3
 8001d36:	4615      	mov	r5, r2
 8001d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d44:	682b      	ldr	r3, [r5, #0]
 8001d46:	6023      	str	r3, [r4, #0]
			  int nazwa[3] = {0, 0, 0};
 8001d48:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d4c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
			  int pozycja = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			  char bufor[4];

			  while(1)
			  {
				  strcpy(bufor, alfabet[nazwa[0]]);
 8001d72:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d76:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	1d3a      	adds	r2, r7, #4
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	441a      	add	r2, r3
 8001d82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 f9e2 	bl	8006152 <strcpy>
				  strcat(bufor, alfabet[nazwa[1]]);
 8001d8e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d92:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	1d3a      	adds	r2, r7, #4
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	441a      	add	r2, r3
 8001d9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 f926 	bl	8005ff6 <strcat>
				  strcat(bufor, alfabet[nazwa[2]]);
 8001daa:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dae:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	1d3a      	adds	r2, r7, #4
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	441a      	add	r2, r3
 8001dba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f004 f918 	bl	8005ff6 <strcat>

				  lcd_print(1, 1, "Wprowadz nazwe:");
 8001dc6:	4a90      	ldr	r2, [pc, #576]	; (8002008 <main+0xad0>)
 8001dc8:	2101      	movs	r1, #1
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f7ff f869 	bl	8000ea2 <lcd_print>
				  lcd_print(2, 7, bufor);
 8001dd0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2107      	movs	r1, #7
 8001dd8:	2002      	movs	r0, #2
 8001dda:	f7ff f862 	bl	8000ea2 <lcd_print>

				  int w = 6;
 8001dde:	2306      	movs	r3, #6
 8001de0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

				  while(w == 6)
 8001de4:	e006      	b.n	8001df4 <main+0x8bc>
				  {
					  w = przycisk();
 8001de6:	f7ff f87f 	bl	8000ee8 <przycisk>
 8001dea:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
					  HAL_Delay(5);
 8001dee:	2005      	movs	r0, #5
 8001df0:	f000 fcf4 	bl	80027dc <HAL_Delay>
				  while(w == 6)
 8001df4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d0f4      	beq.n	8001de6 <main+0x8ae>
				  }
				  HAL_Delay(100);
 8001dfc:	2064      	movs	r0, #100	; 0x64
 8001dfe:	f000 fced 	bl	80027dc <HAL_Delay>

				  if(w == 1) break;
 8001e02:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d05d      	beq.n	8001ec6 <main+0x98e>
				  else if(w == 2 && pozycja > 0) pozycja--;
 8001e0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d109      	bne.n	8001e26 <main+0x8ee>
 8001e12:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	dd05      	ble.n	8001e26 <main+0x8ee>
 8001e1a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001e24:	e04e      	b.n	8001ec4 <main+0x98c>
				  else if(w == 3 && nazwa[pozycja] > 0) nazwa[pozycja]--;
 8001e26:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d11b      	bne.n	8001e66 <main+0x92e>
 8001e2e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e32:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e36:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	dd11      	ble.n	8001e66 <main+0x92e>
 8001e42:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e46:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e52:	1e59      	subs	r1, r3, #1
 8001e54:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e5c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001e64:	e02e      	b.n	8001ec4 <main+0x98c>
				  else if(w == 4 && nazwa[pozycja] < 25) nazwa[pozycja]++;
 8001e66:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d11b      	bne.n	8001ea6 <main+0x96e>
 8001e6e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e72:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7e:	2b18      	cmp	r3, #24
 8001e80:	dc11      	bgt.n	8001ea6 <main+0x96e>
 8001e82:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e86:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e92:	1c59      	adds	r1, r3, #1
 8001e94:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e9c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001ea4:	e00e      	b.n	8001ec4 <main+0x98c>
				  else if(w == 5 && pozycja < 2) pozycja++;
 8001ea6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	f47f af61 	bne.w	8001d72 <main+0x83a>
 8001eb0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	f73f af5c 	bgt.w	8001d72 <main+0x83a>
 8001eba:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			  {
 8001ec4:	e755      	b.n	8001d72 <main+0x83a>
				  if(w == 1) break;
 8001ec6:	bf00      	nop
			  }

			  strcpy(leaderboard[9].nazwa, bufor);
 8001ec8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001ecc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ed0:	3374      	adds	r3, #116	; 0x74
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 f93c 	bl	8006152 <strcpy>
			  leaderboard[9].poziom = poziom;
 8001eda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ede:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			  leaderboard[9].wynik = wynik;
 8001ee2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ee6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			  int i, j;
			  int swapped;
			  for (i = 0; i < 9; i++) {
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001ef0:	e07a      	b.n	8001fe8 <main+0xab0>
				  swapped = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				  for (j = 0; j < 10 - i - 1; j++) {
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001efe:	e062      	b.n	8001fc6 <main+0xa8e>
					  if (leaderboard[j].wynik < leaderboard[j + 1].wynik) {
 8001f00:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f10:	443b      	add	r3, r7
 8001f12:	3bd4      	subs	r3, #212	; 0xd4
 8001f14:	6819      	ldr	r1, [r3, #0]
 8001f16:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f28:	443b      	add	r3, r7
 8001f2a:	3bd4      	subs	r3, #212	; 0xd4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4299      	cmp	r1, r3
 8001f30:	da44      	bge.n	8001fbc <main+0xa84>
						  record leader = leaderboard[j];
 8001f32:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001f36:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8001f3a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f4a:	443b      	add	r3, r7
 8001f4c:	f1a3 02d8 	sub.w	r2, r3, #216	; 0xd8
 8001f50:	460b      	mov	r3, r1
 8001f52:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
						  leaderboard[j] = leaderboard[j + 1];
 8001f58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8001f62:	460b      	mov	r3, r1
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	440b      	add	r3, r1
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f6e:	443b      	add	r3, r7
 8001f70:	f1a3 01d8 	sub.w	r1, r3, #216	; 0xd8
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f80:	443b      	add	r3, r7
 8001f82:	f1a3 02d8 	sub.w	r2, r3, #216	; 0xd8
 8001f86:	460b      	mov	r3, r1
 8001f88:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
						  leaderboard[j + 1] = leader;
 8001f8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001fa0:	443b      	add	r3, r7
 8001fa2:	f1a3 01d8 	sub.w	r1, r3, #216	; 0xd8
 8001fa6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001faa:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8001fae:	460b      	mov	r3, r1
 8001fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
						  swapped = 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				  for (j = 0; j < 10 - i - 1; j++) {
 8001fbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001fc6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001fca:	f1c3 0309 	rsb	r3, r3, #9
 8001fce:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	db94      	blt.n	8001f00 <main+0x9c8>
					  }
				  }
				  if (swapped == 0) break;
 8001fd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d016      	beq.n	800200c <main+0xad4>
			  for (i = 0; i < 9; i++) {
 8001fde:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001fe8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	dd80      	ble.n	8001ef2 <main+0x9ba>
 8001ff0:	e00d      	b.n	800200e <main+0xad6>
 8001ff2:	bf00      	nop
 8001ff4:	3ff80000 	.word	0x3ff80000
 8001ff8:	080071f4 	.word	0x080071f4
 8001ffc:	08007200 	.word	0x08007200
 8002000:	08007160 	.word	0x08007160
 8002004:	08007248 	.word	0x08007248
 8002008:	08007208 	.word	0x08007208
				  if (swapped == 0) break;
 800200c:	bf00      	nop
			  }
		  }
		  wynik=0;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		  aktywnosc_gry = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	  if(aktywnosc_gry == 0)
 800201a:	f7ff bb6c 	b.w	80016f6 <main+0x1be>
 800201e:	bf00      	nop

08002020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b096      	sub	sp, #88	; 0x58
 8002024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	2244      	movs	r2, #68	; 0x44
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f003 ffd9 	bl	8005fe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002034:	463b      	mov	r3, r7
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002042:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002046:	f002 f8c5 	bl	80041d4 <HAL_PWREx_ControlVoltageScaling>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002050:	f000 f944 	bl	80022dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8002054:	2318      	movs	r3, #24
 8002056:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002058:	2301      	movs	r3, #1
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800205c:	2301      	movs	r3, #1
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002064:	2360      	movs	r3, #96	; 0x60
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002068:	2300      	movs	r3, #0
 800206a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4618      	mov	r0, r3
 8002072:	f002 f905 	bl	8004280 <HAL_RCC_OscConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800207c:	f000 f92e 	bl	80022dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002080:	230f      	movs	r3, #15
 8002082:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002094:	463b      	mov	r3, r7
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f002 fccd 	bl	8004a38 <HAL_RCC_ClockConfig>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80020a4:	f000 f91a 	bl	80022dc <Error_Handler>
  }
}
 80020a8:	bf00      	nop
 80020aa:	3758      	adds	r7, #88	; 0x58
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
 80020d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020d2:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <MX_ADC1_Init+0xe0>)
 80020d4:	4a2f      	ldr	r2, [pc, #188]	; (8002194 <MX_ADC1_Init+0xe4>)
 80020d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <MX_ADC1_Init+0xe0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020de:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <MX_ADC1_Init+0xe0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020e4:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <MX_ADC1_Init+0xe0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <MX_ADC1_Init+0xe0>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <MX_ADC1_Init+0xe0>)
 80020f2:	2204      	movs	r2, #4
 80020f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <MX_ADC1_Init+0xe0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020fc:	4b24      	ldr	r3, [pc, #144]	; (8002190 <MX_ADC1_Init+0xe0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002102:	4b23      	ldr	r3, [pc, #140]	; (8002190 <MX_ADC1_Init+0xe0>)
 8002104:	2201      	movs	r2, #1
 8002106:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002108:	4b21      	ldr	r3, [pc, #132]	; (8002190 <MX_ADC1_Init+0xe0>)
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <MX_ADC1_Init+0xe0>)
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <MX_ADC1_Init+0xe0>)
 8002118:	2200      	movs	r2, #0
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <MX_ADC1_Init+0xe0>)
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <MX_ADC1_Init+0xe0>)
 8002126:	2200      	movs	r2, #0
 8002128:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <MX_ADC1_Init+0xe0>)
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002132:	4817      	ldr	r0, [pc, #92]	; (8002190 <MX_ADC1_Init+0xe0>)
 8002134:	f000 fd5a 	bl	8002bec <HAL_ADC_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800213e:	f000 f8cd 	bl	80022dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	4810      	ldr	r0, [pc, #64]	; (8002190 <MX_ADC1_Init+0xe0>)
 800214e:	f001 fcdb 	bl	8003b08 <HAL_ADCEx_MultiModeConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002158:	f000 f8c0 	bl	80022dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_ADC1_Init+0xe8>)
 800215e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002160:	2306      	movs	r3, #6
 8002162:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002168:	237f      	movs	r3, #127	; 0x7f
 800216a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800216c:	2304      	movs	r3, #4
 800216e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_ADC1_Init+0xe0>)
 800217a:	f001 f827 	bl	80031cc <HAL_ADC_ConfigChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8002184:	f000 f8aa 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	3728      	adds	r7, #40	; 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000084 	.word	0x20000084
 8002194:	50040000 	.word	0x50040000
 8002198:	14f00020 	.word	0x14f00020

0800219c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <MX_RTC_Init+0x48>)
 80021a2:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <MX_RTC_Init+0x4c>)
 80021a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_RTC_Init+0x48>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <MX_RTC_Init+0x48>)
 80021ae:	227f      	movs	r2, #127	; 0x7f
 80021b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_RTC_Init+0x48>)
 80021b4:	22ff      	movs	r2, #255	; 0xff
 80021b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <MX_RTC_Init+0x48>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_RTC_Init+0x48>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <MX_RTC_Init+0x48>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_RTC_Init+0x48>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <MX_RTC_Init+0x48>)
 80021d2:	f003 fad9 	bl	8005788 <HAL_RTC_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80021dc:	f000 f87e 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200000e8 	.word	0x200000e8
 80021e8:	40002800 	.word	0x40002800

080021ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <MX_GPIO_Init+0xe4>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <MX_GPIO_Init+0xe4>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <MX_GPIO_Init+0xe4>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <MX_GPIO_Init+0xe4>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <MX_GPIO_Init+0xe4>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002226:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <MX_GPIO_Init+0xe4>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <MX_GPIO_Init+0xe4>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002236:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <MX_GPIO_Init+0xe4>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <MX_GPIO_Init+0xe4>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8002250:	4820      	ldr	r0, [pc, #128]	; (80022d4 <MX_GPIO_Init+0xe8>)
 8002252:	f001 ff99 	bl	8004188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8002256:	2200      	movs	r2, #0
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	481f      	ldr	r0, [pc, #124]	; (80022d8 <MX_GPIO_Init+0xec>)
 800225c:	f001 ff94 	bl	8004188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8002260:	2200      	movs	r2, #0
 8002262:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226a:	f001 ff8d 	bl	8004188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 800226e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002274:	2301      	movs	r3, #1
 8002276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227c:	2300      	movs	r3, #0
 800227e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	4619      	mov	r1, r3
 8002286:	4813      	ldr	r0, [pc, #76]	; (80022d4 <MX_GPIO_Init+0xe8>)
 8002288:	f001 fdd4 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002290:	2301      	movs	r3, #1
 8002292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	4619      	mov	r1, r3
 80022a2:	480d      	ldr	r0, [pc, #52]	; (80022d8 <MX_GPIO_Init+0xec>)
 80022a4:	f001 fdc6 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 80022a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	4619      	mov	r1, r3
 80022c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c4:	f001 fdb6 	bl	8003e34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022c8:	bf00      	nop
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	48000400 	.word	0x48000400
 80022d8:	48000800 	.word	0x48000800

080022dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <Error_Handler+0x8>
	...

080022e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_MspInit+0x44>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	4a0e      	ldr	r2, [pc, #56]	; (800232c <HAL_MspInit+0x44>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6613      	str	r3, [r2, #96]	; 0x60
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_MspInit+0x44>)
 80022fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_MspInit+0x44>)
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <HAL_MspInit+0x44>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	6593      	str	r3, [r2, #88]	; 0x58
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_MspInit+0x44>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b0ac      	sub	sp, #176	; 0xb0
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2288      	movs	r2, #136	; 0x88
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f003 fe48 	bl	8005fe6 <memset>
  if(hadc->Instance==ADC1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a27      	ldr	r2, [pc, #156]	; (80023f8 <HAL_ADC_MspInit+0xc8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d147      	bne.n	80023f0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002360:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002364:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002366:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800236a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800236e:	2301      	movs	r3, #1
 8002370:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002372:	2301      	movs	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002376:	2308      	movs	r3, #8
 8002378:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800237a:	2307      	movs	r3, #7
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800237e:	2302      	movs	r3, #2
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002382:	2302      	movs	r3, #2
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002386:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800238a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fd3d 	bl	8004e10 <HAL_RCCEx_PeriphCLKConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800239c:	f7ff ff9e 	bl	80022dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_ADC_MspInit+0xcc>)
 80023a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a4:	4a15      	ldr	r2, [pc, #84]	; (80023fc <HAL_ADC_MspInit+0xcc>)
 80023a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ac:	4b13      	ldr	r3, [pc, #76]	; (80023fc <HAL_ADC_MspInit+0xcc>)
 80023ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_ADC_MspInit+0xcc>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023bc:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <HAL_ADC_MspInit+0xcc>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c4:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <HAL_ADC_MspInit+0xcc>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80023d6:	230b      	movs	r3, #11
 80023d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023e6:	4619      	mov	r1, r3
 80023e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ec:	f001 fd22 	bl	8003e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023f0:	bf00      	nop
 80023f2:	37b0      	adds	r7, #176	; 0xb0
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	50040000 	.word	0x50040000
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b0a4      	sub	sp, #144	; 0x90
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002408:	f107 0308 	add.w	r3, r7, #8
 800240c:	2288      	movs	r2, #136	; 0x88
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f003 fde8 	bl	8005fe6 <memset>
  if(hrtc->Instance==RTC)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a10      	ldr	r2, [pc, #64]	; (800245c <HAL_RTC_MspInit+0x5c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d118      	bne.n	8002452 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800242a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800242e:	f107 0308 	add.w	r3, r7, #8
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fcec 	bl	8004e10 <HAL_RCCEx_PeriphCLKConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800243e:	f7ff ff4d 	bl	80022dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <HAL_RTC_MspInit+0x60>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	4a05      	ldr	r2, [pc, #20]	; (8002460 <HAL_RTC_MspInit+0x60>)
 800244a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800244e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002452:	bf00      	nop
 8002454:	3790      	adds	r7, #144	; 0x90
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40002800 	.word	0x40002800
 8002460:	40021000 	.word	0x40021000

08002464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <NMI_Handler+0x4>

0800246a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800246e:	e7fe      	b.n	800246e <HardFault_Handler+0x4>

08002470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <MemManage_Handler+0x4>

08002476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800247a:	e7fe      	b.n	800247a <BusFault_Handler+0x4>

0800247c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <UsageFault_Handler+0x4>

08002482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static int czas=0;

	if(czas++>=100){
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <SysTick_Handler+0x34>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	490a      	ldr	r1, [pc, #40]	; (80024e0 <SysTick_Handler+0x34>)
 80024b8:	600a      	str	r2, [r1, #0]
 80024ba:	2b63      	cmp	r3, #99	; 0x63
 80024bc:	dd0c      	ble.n	80024d8 <SysTick_Handler+0x2c>
		HAL_RTC_GetTime(&hrtc, &nowsTime, RTC_FORMAT_BIN);
 80024be:	2200      	movs	r2, #0
 80024c0:	4908      	ldr	r1, [pc, #32]	; (80024e4 <SysTick_Handler+0x38>)
 80024c2:	4809      	ldr	r0, [pc, #36]	; (80024e8 <SysTick_Handler+0x3c>)
 80024c4:	f003 fa85 	bl	80059d2 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &nowsDate, RTC_FORMAT_BIN);
 80024c8:	2200      	movs	r2, #0
 80024ca:	4908      	ldr	r1, [pc, #32]	; (80024ec <SysTick_Handler+0x40>)
 80024cc:	4806      	ldr	r0, [pc, #24]	; (80024e8 <SysTick_Handler+0x3c>)
 80024ce:	f003 fadc 	bl	8005a8a <HAL_RTC_GetDate>
		czas=0;
 80024d2:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <SysTick_Handler+0x34>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d8:	f000 f960 	bl	800279c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000124 	.word	0x20000124
 80024e4:	2000010c 	.word	0x2000010c
 80024e8:	200000e8 	.word	0x200000e8
 80024ec:	20000120 	.word	0x20000120

080024f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return 1;
 80024f4:	2301      	movs	r3, #1
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_kill>:

int _kill(int pid, int sig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800250a:	f003 fdf5 	bl	80060f8 <__errno>
 800250e:	4603      	mov	r3, r0
 8002510:	2216      	movs	r2, #22
 8002512:	601a      	str	r2, [r3, #0]
  return -1;
 8002514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_exit>:

void _exit (int status)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002528:	f04f 31ff 	mov.w	r1, #4294967295
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ffe7 	bl	8002500 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002532:	e7fe      	b.n	8002532 <_exit+0x12>

08002534 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	e00a      	b.n	800255c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002546:	f3af 8000 	nop.w
 800254a:	4601      	mov	r1, r0
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	60ba      	str	r2, [r7, #8]
 8002552:	b2ca      	uxtb	r2, r1
 8002554:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3301      	adds	r3, #1
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	429a      	cmp	r2, r3
 8002562:	dbf0      	blt.n	8002546 <_read+0x12>
  }

  return len;
 8002564:	687b      	ldr	r3, [r7, #4]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e009      	b.n	8002594 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	60ba      	str	r2, [r7, #8]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3301      	adds	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	dbf1      	blt.n	8002580 <_write+0x12>
  }
  return len;
 800259c:	687b      	ldr	r3, [r7, #4]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_close>:

int _close(int file)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ce:	605a      	str	r2, [r3, #4]
  return 0;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <_isatty>:

int _isatty(int file)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025e6:	2301      	movs	r3, #1
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <_sbrk+0x5c>)
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <_sbrk+0x60>)
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <_sbrk+0x64>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <_sbrk+0x64>)
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <_sbrk+0x68>)
 8002630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	429a      	cmp	r2, r3
 800263e:	d207      	bcs.n	8002650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002640:	f003 fd5a 	bl	80060f8 <__errno>
 8002644:	4603      	mov	r3, r0
 8002646:	220c      	movs	r2, #12
 8002648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264a:	f04f 33ff 	mov.w	r3, #4294967295
 800264e:	e009      	b.n	8002664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <_sbrk+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <_sbrk+0x64>)
 8002660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002662:	68fb      	ldr	r3, [r7, #12]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20018000 	.word	0x20018000
 8002670:	00000400 	.word	0x00000400
 8002674:	20000128 	.word	0x20000128
 8002678:	20000280 	.word	0x20000280

0800267c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <SystemInit+0x20>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <SystemInit+0x20>)
 8002688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800268c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026a4:	f7ff ffea 	bl	800267c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480c      	ldr	r0, [pc, #48]	; (80026dc <LoopForever+0x6>)
  ldr r1, =_edata
 80026aa:	490d      	ldr	r1, [pc, #52]	; (80026e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026ac:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <LoopForever+0xe>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026c0:	4c0a      	ldr	r4, [pc, #40]	; (80026ec <LoopForever+0x16>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ce:	f003 fd19 	bl	8006104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026d2:	f7fe ff31 	bl	8001538 <main>

080026d6 <LoopForever>:

LoopForever:
    b LoopForever
 80026d6:	e7fe      	b.n	80026d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80026e4:	080073a4 	.word	0x080073a4
  ldr r2, =_sbss
 80026e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80026ec:	2000027c 	.word	0x2000027c

080026f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <ADC1_2_IRQHandler>

080026f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fc:	2003      	movs	r0, #3
 80026fe:	f001 fb65 	bl	8003dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002702:	200f      	movs	r0, #15
 8002704:	f000 f80e 	bl	8002724 <HAL_InitTick>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	71fb      	strb	r3, [r7, #7]
 8002712:	e001      	b.n	8002718 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002714:	f7ff fde8 	bl	80022e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002718:	79fb      	ldrb	r3, [r7, #7]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002730:	4b17      	ldr	r3, [pc, #92]	; (8002790 <HAL_InitTick+0x6c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d023      	beq.n	8002780 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002738:	4b16      	ldr	r3, [pc, #88]	; (8002794 <HAL_InitTick+0x70>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_InitTick+0x6c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002746:	fbb3 f3f1 	udiv	r3, r3, r1
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fb63 	bl	8003e1a <HAL_SYSTICK_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b0f      	cmp	r3, #15
 800275e:	d809      	bhi.n	8002774 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002760:	2200      	movs	r2, #0
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f001 fb3b 	bl	8003de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800276c:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <HAL_InitTick+0x74>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e007      	b.n	8002784 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e004      	b.n	8002784 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	e001      	b.n	8002784 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000008 	.word	0x20000008
 8002794:	20000000 	.word	0x20000000
 8002798:	20000004 	.word	0x20000004

0800279c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_IncTick+0x20>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_IncTick+0x24>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_IncTick+0x24>)
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000008 	.word	0x20000008
 80027c0:	2000012c 	.word	0x2000012c

080027c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return uwTick;
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_GetTick+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	2000012c 	.word	0x2000012c

080027dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff ffee 	bl	80027c4 <HAL_GetTick>
 80027e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d005      	beq.n	8002802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_Delay+0x44>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002802:	bf00      	nop
 8002804:	f7ff ffde 	bl	80027c4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	429a      	cmp	r2, r3
 8002812:	d8f7      	bhi.n	8002804 <HAL_Delay+0x28>
  {
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000008 	.word	0x20000008

08002824 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	609a      	str	r2, [r3, #8]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3360      	adds	r3, #96	; 0x60
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <LL_ADC_SetOffset+0x44>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	03fff000 	.word	0x03fff000

080028d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3360      	adds	r3, #96	; 0x60
 80028e2:	461a      	mov	r2, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3360      	adds	r3, #96	; 0x60
 8002910:	461a      	mov	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	431a      	orrs	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3330      	adds	r3, #48	; 0x30
 800296c:	461a      	mov	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	4413      	add	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	211f      	movs	r1, #31
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	401a      	ands	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0e9b      	lsrs	r3, r3, #26
 8002994:	f003 011f 	and.w	r1, r3, #31
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	431a      	orrs	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029a8:	bf00      	nop
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3314      	adds	r3, #20
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	0e5b      	lsrs	r3, r3, #25
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	4413      	add	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	0d1b      	lsrs	r3, r3, #20
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2107      	movs	r1, #7
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	401a      	ands	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	0d1b      	lsrs	r3, r3, #20
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	431a      	orrs	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a24:	43db      	mvns	r3, r3
 8002a26:	401a      	ands	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0318 	and.w	r3, r3, #24
 8002a2e:	4908      	ldr	r1, [pc, #32]	; (8002a50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a30:	40d9      	lsrs	r1, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	400b      	ands	r3, r1
 8002a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	0007ffff 	.word	0x0007ffff

08002a54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 031f 	and.w	r3, r3, #31
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6093      	str	r3, [r2, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac4:	d101      	bne.n	8002aca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ae8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b14:	d101      	bne.n	8002b1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <LL_ADC_IsEnabled+0x18>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <LL_ADC_IsEnabled+0x1a>
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b8a:	f043 0204 	orr.w	r2, r3, #4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d101      	bne.n	8002bb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d101      	bne.n	8002bdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e130      	b.n	8002e68 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff fb8b 	bl	8002330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff3f 	bl	8002ab0 <LL_ADC_IsDeepPowerDownEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d004      	beq.n	8002c42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff25 	bl	8002a8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ff5a 	bl	8002b00 <LL_ADC_IsInternalRegulatorEnabled>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d115      	bne.n	8002c7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ff3e 	bl	8002ad8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c5c:	4b84      	ldr	r3, [pc, #528]	; (8002e70 <HAL_ADC_Init+0x284>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	099b      	lsrs	r3, r3, #6
 8002c62:	4a84      	ldr	r2, [pc, #528]	; (8002e74 <HAL_ADC_Init+0x288>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c70:	e002      	b.n	8002c78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f9      	bne.n	8002c72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ff3c 	bl	8002b00 <LL_ADC_IsInternalRegulatorEnabled>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	f043 0210 	orr.w	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff75 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 8002cb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 80c9 	bne.w	8002e56 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 80c5 	bne.w	8002e56 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002cd4:	f043 0202 	orr.w	r2, r3, #2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff35 	bl	8002b50 <LL_ADC_IsEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d115      	bne.n	8002d18 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cec:	4862      	ldr	r0, [pc, #392]	; (8002e78 <HAL_ADC_Init+0x28c>)
 8002cee:	f7ff ff2f 	bl	8002b50 <LL_ADC_IsEnabled>
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	4861      	ldr	r0, [pc, #388]	; (8002e7c <HAL_ADC_Init+0x290>)
 8002cf6:	f7ff ff2b 	bl	8002b50 <LL_ADC_IsEnabled>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	431c      	orrs	r4, r3
 8002cfe:	4860      	ldr	r0, [pc, #384]	; (8002e80 <HAL_ADC_Init+0x294>)
 8002d00:	f7ff ff26 	bl	8002b50 <LL_ADC_IsEnabled>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4323      	orrs	r3, r4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4619      	mov	r1, r3
 8002d12:	485c      	ldr	r0, [pc, #368]	; (8002e84 <HAL_ADC_Init+0x298>)
 8002d14:	f7ff fd86 	bl	8002824 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7e5b      	ldrb	r3, [r3, #25]
 8002d1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d106      	bne.n	8002d54 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	045b      	lsls	r3, r3, #17
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	4b44      	ldr	r3, [pc, #272]	; (8002e88 <HAL_ADC_Init+0x29c>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	69b9      	ldr	r1, [r7, #24]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff1b 	bl	8002bc4 <LL_ADC_INJ_IsConversionOngoing>
 8002d8e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d13d      	bne.n	8002e12 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d13a      	bne.n	8002e12 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002da0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002da8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002db8:	f023 0302 	bic.w	r3, r3, #2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	69b9      	ldr	r1, [r7, #24]
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d118      	bne.n	8002e02 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002dda:	f023 0304 	bic.w	r3, r3, #4
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002de6:	4311      	orrs	r1, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002dec:	4311      	orrs	r1, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002df2:	430a      	orrs	r2, r1
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	611a      	str	r2, [r3, #16]
 8002e00:	e007      	b.n	8002e12 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10c      	bne.n	8002e34 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f023 010f 	bic.w	r1, r3, #15
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	1e5a      	subs	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
 8002e32:	e007      	b.n	8002e44 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 020f 	bic.w	r2, r2, #15
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	f023 0303 	bic.w	r3, r3, #3
 8002e4c:	f043 0201 	orr.w	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
 8002e54:	e007      	b.n	8002e66 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f043 0210 	orr.w	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e66:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3724      	adds	r7, #36	; 0x24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}
 8002e70:	20000000 	.word	0x20000000
 8002e74:	053e2d63 	.word	0x053e2d63
 8002e78:	50040000 	.word	0x50040000
 8002e7c:	50040100 	.word	0x50040100
 8002e80:	50040200 	.word	0x50040200
 8002e84:	50040300 	.word	0x50040300
 8002e88:	fff0c007 	.word	0xfff0c007

08002e8c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e94:	4857      	ldr	r0, [pc, #348]	; (8002ff4 <HAL_ADC_Start+0x168>)
 8002e96:	f7ff fddd 	bl	8002a54 <LL_ADC_GetMultimode>
 8002e9a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fe7c 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f040 809c 	bne.w	8002fe6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_Start+0x30>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e097      	b.n	8002fec <HAL_ADC_Start+0x160>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fd73 	bl	80039b0 <ADC_Enable>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f040 8083 	bne.w	8002fdc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a42      	ldr	r2, [pc, #264]	; (8002ff8 <HAL_ADC_Start+0x16c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d002      	beq.n	8002efa <HAL_ADC_Start+0x6e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	e000      	b.n	8002efc <HAL_ADC_Start+0x70>
 8002efa:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <HAL_ADC_Start+0x170>)
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d002      	beq.n	8002f0a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f22:	d106      	bne.n	8002f32 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f28:	f023 0206 	bic.w	r2, r3, #6
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f30:	e002      	b.n	8002f38 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	221c      	movs	r2, #28
 8002f3e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2a      	ldr	r2, [pc, #168]	; (8002ff8 <HAL_ADC_Start+0x16c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d002      	beq.n	8002f58 <HAL_ADC_Start+0xcc>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	e000      	b.n	8002f5a <HAL_ADC_Start+0xce>
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <HAL_ADC_Start+0x170>)
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d008      	beq.n	8002f74 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b05      	cmp	r3, #5
 8002f6c:	d002      	beq.n	8002f74 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b09      	cmp	r3, #9
 8002f72:	d114      	bne.n	8002f9e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fded 	bl	8002b76 <LL_ADC_REG_StartConversion>
 8002f9c:	e025      	b.n	8002fea <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <HAL_ADC_Start+0x16c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d002      	beq.n	8002fba <HAL_ADC_Start+0x12e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	e000      	b.n	8002fbc <HAL_ADC_Start+0x130>
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_ADC_Start+0x170>)
 8002fbc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00f      	beq.n	8002fea <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
 8002fda:	e006      	b.n	8002fea <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002fe4:	e001      	b.n	8002fea <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	50040300 	.word	0x50040300
 8002ff8:	50040100 	.word	0x50040100
 8002ffc:	50040000 	.word	0x50040000

08003000 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800300a:	4866      	ldr	r0, [pc, #408]	; (80031a4 <HAL_ADC_PollForConversion+0x1a4>)
 800300c:	f7ff fd22 	bl	8002a54 <LL_ADC_GetMultimode>
 8003010:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	2b08      	cmp	r3, #8
 8003018:	d102      	bne.n	8003020 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800301a:	2308      	movs	r3, #8
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	e02a      	b.n	8003076 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b05      	cmp	r3, #5
 800302a:	d002      	beq.n	8003032 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b09      	cmp	r3, #9
 8003030:	d111      	bne.n	8003056 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d007      	beq.n	8003050 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0a4      	b.n	800319a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003050:	2304      	movs	r3, #4
 8003052:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003054:	e00f      	b.n	8003076 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003056:	4853      	ldr	r0, [pc, #332]	; (80031a4 <HAL_ADC_PollForConversion+0x1a4>)
 8003058:	f7ff fd0a 	bl	8002a70 <LL_ADC_GetMultiDMATransfer>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e093      	b.n	800319a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003072:	2304      	movs	r3, #4
 8003074:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003076:	f7ff fba5 	bl	80027c4 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800307c:	e021      	b.n	80030c2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d01d      	beq.n	80030c2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003086:	f7ff fb9d 	bl	80027c4 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <HAL_ADC_PollForConversion+0x9c>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d112      	bne.n	80030c2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10b      	bne.n	80030c2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ae:	f043 0204 	orr.w	r2, r3, #4
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e06b      	b.n	800319a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0d6      	beq.n	800307e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fc28 	bl	8002936 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01c      	beq.n	8003126 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7e5b      	ldrb	r3, [r3, #25]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d118      	bne.n	8003126 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d111      	bne.n	8003126 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_ADC_PollForConversion+0x1a8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d002      	beq.n	8003136 <HAL_ADC_PollForConversion+0x136>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	e000      	b.n	8003138 <HAL_ADC_PollForConversion+0x138>
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_ADC_PollForConversion+0x1ac>)
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	4293      	cmp	r3, r2
 800313e:	d008      	beq.n	8003152 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b05      	cmp	r3, #5
 800314a:	d002      	beq.n	8003152 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b09      	cmp	r3, #9
 8003150:	d104      	bne.n	800315c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	e00c      	b.n	8003176 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a11      	ldr	r2, [pc, #68]	; (80031a8 <HAL_ADC_PollForConversion+0x1a8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d002      	beq.n	800316c <HAL_ADC_PollForConversion+0x16c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	e000      	b.n	800316e <HAL_ADC_PollForConversion+0x16e>
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <HAL_ADC_PollForConversion+0x1ac>)
 800316e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d104      	bne.n	8003186 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2208      	movs	r2, #8
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e008      	b.n	8003198 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	220c      	movs	r2, #12
 8003196:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	50040300 	.word	0x50040300
 80031a8:	50040100 	.word	0x50040100
 80031ac:	50040000 	.word	0x50040000

080031b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b0b6      	sub	sp, #216	; 0xd8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x22>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e3c9      	b.n	8003982 <HAL_ADC_ConfigChannel+0x7b6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fccf 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 83aa 	bne.w	800395c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b05      	cmp	r3, #5
 8003216:	d824      	bhi.n	8003262 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	3b02      	subs	r3, #2
 800321e:	2b03      	cmp	r3, #3
 8003220:	d81b      	bhi.n	800325a <HAL_ADC_ConfigChannel+0x8e>
 8003222:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <HAL_ADC_ConfigChannel+0x5c>)
 8003224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003228:	08003239 	.word	0x08003239
 800322c:	08003241 	.word	0x08003241
 8003230:	08003249 	.word	0x08003249
 8003234:	08003251 	.word	0x08003251
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003238:	230c      	movs	r3, #12
 800323a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800323e:	e010      	b.n	8003262 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003240:	2312      	movs	r3, #18
 8003242:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003246:	e00c      	b.n	8003262 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003248:	2318      	movs	r3, #24
 800324a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800324e:	e008      	b.n	8003262 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003258:	e003      	b.n	8003262 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800325a:	2306      	movs	r3, #6
 800325c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003260:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003270:	f7ff fb74 	bl	800295c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fc90 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 800327e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fc9c 	bl	8002bc4 <LL_ADC_INJ_IsConversionOngoing>
 800328c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003294:	2b00      	cmp	r3, #0
 8003296:	f040 81a4 	bne.w	80035e2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800329a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 819f 	bne.w	80035e2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	461a      	mov	r2, r3
 80032b2:	f7ff fb7f 	bl	80029b4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d00a      	beq.n	80032ee <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6919      	ldr	r1, [r3, #16]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032e8:	f7ff fad0 	bl	800288c <LL_ADC_SetOffset>
 80032ec:	e179      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff faed 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <HAL_ADC_ConfigChannel+0x14e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fae2 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003310:	4603      	mov	r3, r0
 8003312:	0e9b      	lsrs	r3, r3, #26
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	e01e      	b.n	8003358 <HAL_ADC_ConfigChannel+0x18c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fad7 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003326:	4603      	mov	r3, r0
 8003328:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003338:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800333c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003340:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003348:	2320      	movs	r3, #32
 800334a:	e004      	b.n	8003356 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800334c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003360:	2b00      	cmp	r3, #0
 8003362:	d105      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x1a4>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0e9b      	lsrs	r3, r3, #26
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	e018      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x1d6>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003388:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800338c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e004      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003398:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d106      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff faa6 	bl	8002900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2101      	movs	r1, #1
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fa8a 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x214>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fa7f 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 80033d6:	4603      	mov	r3, r0
 80033d8:	0e9b      	lsrs	r3, r3, #26
 80033da:	f003 021f 	and.w	r2, r3, #31
 80033de:	e01e      	b.n	800341e <HAL_ADC_ConfigChannel+0x252>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2101      	movs	r1, #1
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fa74 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80033fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003406:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800340e:	2320      	movs	r3, #32
 8003410:	e004      	b.n	800341c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003426:	2b00      	cmp	r3, #0
 8003428:	d105      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x26a>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	0e9b      	lsrs	r3, r3, #26
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	e018      	b.n	8003468 <HAL_ADC_ConfigChannel+0x29c>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800344a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800344e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003452:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800345a:	2320      	movs	r3, #32
 800345c:	e004      	b.n	8003468 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800345e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003468:	429a      	cmp	r2, r3
 800346a:	d106      	bne.n	800347a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2200      	movs	r2, #0
 8003472:	2101      	movs	r1, #1
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fa43 	bl	8002900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2102      	movs	r1, #2
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fa27 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003486:	4603      	mov	r3, r0
 8003488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x2da>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2102      	movs	r1, #2
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fa1c 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 800349c:	4603      	mov	r3, r0
 800349e:	0e9b      	lsrs	r3, r3, #26
 80034a0:	f003 021f 	and.w	r2, r3, #31
 80034a4:	e01e      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x318>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2102      	movs	r1, #2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fa11 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80034c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80034cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80034d4:	2320      	movs	r3, #32
 80034d6:	e004      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80034d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x330>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0e9b      	lsrs	r3, r3, #26
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	e014      	b.n	8003526 <HAL_ADC_ConfigChannel+0x35a>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800350a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800350c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003510:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003518:	2320      	movs	r3, #32
 800351a:	e004      	b.n	8003526 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800351c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003520:	fab3 f383 	clz	r3, r3
 8003524:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003526:	429a      	cmp	r2, r3
 8003528:	d106      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	2102      	movs	r1, #2
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff f9e4 	bl	8002900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2103      	movs	r1, #3
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff f9c8 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003544:	4603      	mov	r3, r0
 8003546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x398>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2103      	movs	r1, #3
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff f9bd 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 800355a:	4603      	mov	r3, r0
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	f003 021f 	and.w	r2, r3, #31
 8003562:	e017      	b.n	8003594 <HAL_ADC_ConfigChannel+0x3c8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2103      	movs	r1, #3
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f9b2 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003570:	4603      	mov	r3, r0
 8003572:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800357c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003586:	2320      	movs	r3, #32
 8003588:	e003      	b.n	8003592 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800358a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x3e0>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0e9b      	lsrs	r3, r3, #26
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	e011      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x404>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80035ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035bc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80035be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80035c4:	2320      	movs	r3, #32
 80035c6:	e003      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80035c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d106      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2200      	movs	r2, #0
 80035da:	2103      	movs	r1, #3
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff f98f 	bl	8002900 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fab2 	bl	8002b50 <LL_ADC_IsEnabled>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f040 8140 	bne.w	8003874 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	461a      	mov	r2, r3
 8003602:	f7ff fa03 	bl	8002a0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	4a8f      	ldr	r2, [pc, #572]	; (8003848 <HAL_ADC_ConfigChannel+0x67c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	f040 8131 	bne.w	8003874 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <HAL_ADC_ConfigChannel+0x46e>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	0e9b      	lsrs	r3, r3, #26
 8003628:	3301      	adds	r3, #1
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2b09      	cmp	r3, #9
 8003630:	bf94      	ite	ls
 8003632:	2301      	movls	r3, #1
 8003634:	2300      	movhi	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	e019      	b.n	800366e <HAL_ADC_ConfigChannel+0x4a2>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800364c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003652:	2320      	movs	r3, #32
 8003654:	e003      	b.n	800365e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	3301      	adds	r3, #1
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	2b09      	cmp	r3, #9
 8003666:	bf94      	ite	ls
 8003668:	2301      	movls	r3, #1
 800366a:	2300      	movhi	r3, #0
 800366c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800366e:	2b00      	cmp	r3, #0
 8003670:	d079      	beq.n	8003766 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367a:	2b00      	cmp	r3, #0
 800367c:	d107      	bne.n	800368e <HAL_ADC_ConfigChannel+0x4c2>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	0e9b      	lsrs	r3, r3, #26
 8003684:	3301      	adds	r3, #1
 8003686:	069b      	lsls	r3, r3, #26
 8003688:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800368c:	e015      	b.n	80036ba <HAL_ADC_ConfigChannel+0x4ee>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003696:	fa93 f3a3 	rbit	r3, r3
 800369a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800369c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800369e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80036a6:	2320      	movs	r3, #32
 80036a8:	e003      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80036aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ac:	fab3 f383 	clz	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3301      	adds	r3, #1
 80036b4:	069b      	lsls	r3, r3, #26
 80036b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_ADC_ConfigChannel+0x50e>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	0e9b      	lsrs	r3, r3, #26
 80036cc:	3301      	adds	r3, #1
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	e017      	b.n	800370a <HAL_ADC_ConfigChannel+0x53e>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80036e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80036ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80036f2:	2320      	movs	r3, #32
 80036f4:	e003      	b.n	80036fe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80036f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	3301      	adds	r3, #1
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	ea42 0103 	orr.w	r1, r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x564>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	0e9b      	lsrs	r3, r3, #26
 8003720:	3301      	adds	r3, #1
 8003722:	f003 021f 	and.w	r2, r3, #31
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	051b      	lsls	r3, r3, #20
 800372e:	e018      	b.n	8003762 <HAL_ADC_ConfigChannel+0x596>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003748:	2320      	movs	r3, #32
 800374a:	e003      	b.n	8003754 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	3301      	adds	r3, #1
 8003756:	f003 021f 	and.w	r2, r3, #31
 800375a:	4613      	mov	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003762:	430b      	orrs	r3, r1
 8003764:	e081      	b.n	800386a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x5b6>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	0e9b      	lsrs	r3, r3, #26
 8003778:	3301      	adds	r3, #1
 800377a:	069b      	lsls	r3, r3, #26
 800377c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003780:	e015      	b.n	80037ae <HAL_ADC_ConfigChannel+0x5e2>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800379a:	2320      	movs	r3, #32
 800379c:	e003      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	3301      	adds	r3, #1
 80037a8:	069b      	lsls	r3, r3, #26
 80037aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x602>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	0e9b      	lsrs	r3, r3, #26
 80037c0:	3301      	adds	r3, #1
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2101      	movs	r1, #1
 80037c8:	fa01 f303 	lsl.w	r3, r1, r3
 80037cc:	e017      	b.n	80037fe <HAL_ADC_ConfigChannel+0x632>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	fa93 f3a3 	rbit	r3, r3
 80037da:	61bb      	str	r3, [r7, #24]
  return result;
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80037e6:	2320      	movs	r3, #32
 80037e8:	e003      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	3301      	adds	r3, #1
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	ea42 0103 	orr.w	r1, r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <HAL_ADC_ConfigChannel+0x65e>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	0e9b      	lsrs	r3, r3, #26
 8003814:	3301      	adds	r3, #1
 8003816:	f003 021f 	and.w	r2, r3, #31
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	3b1e      	subs	r3, #30
 8003822:	051b      	lsls	r3, r3, #20
 8003824:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003828:	e01e      	b.n	8003868 <HAL_ADC_ConfigChannel+0x69c>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	60fb      	str	r3, [r7, #12]
  return result;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d104      	bne.n	800384c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003842:	2320      	movs	r3, #32
 8003844:	e006      	b.n	8003854 <HAL_ADC_ConfigChannel+0x688>
 8003846:	bf00      	nop
 8003848:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	3301      	adds	r3, #1
 8003856:	f003 021f 	and.w	r2, r3, #31
 800385a:	4613      	mov	r3, r2
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4413      	add	r3, r2
 8003860:	3b1e      	subs	r3, #30
 8003862:	051b      	lsls	r3, r3, #20
 8003864:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003868:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800386e:	4619      	mov	r1, r3
 8003870:	f7ff f8a0 	bl	80029b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b44      	ldr	r3, [pc, #272]	; (800398c <HAL_ADC_ConfigChannel+0x7c0>)
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d07a      	beq.n	8003976 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003880:	4843      	ldr	r0, [pc, #268]	; (8003990 <HAL_ADC_ConfigChannel+0x7c4>)
 8003882:	f7fe fff5 	bl	8002870 <LL_ADC_GetCommonPathInternalCh>
 8003886:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a41      	ldr	r2, [pc, #260]	; (8003994 <HAL_ADC_ConfigChannel+0x7c8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d12c      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003894:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d126      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a3c      	ldr	r2, [pc, #240]	; (8003998 <HAL_ADC_ConfigChannel+0x7cc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d004      	beq.n	80038b4 <HAL_ADC_ConfigChannel+0x6e8>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a3b      	ldr	r2, [pc, #236]	; (800399c <HAL_ADC_ConfigChannel+0x7d0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d15d      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038bc:	4619      	mov	r1, r3
 80038be:	4834      	ldr	r0, [pc, #208]	; (8003990 <HAL_ADC_ConfigChannel+0x7c4>)
 80038c0:	f7fe ffc3 	bl	800284a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038c4:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <HAL_ADC_ConfigChannel+0x7d4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	099b      	lsrs	r3, r3, #6
 80038ca:	4a36      	ldr	r2, [pc, #216]	; (80039a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	099b      	lsrs	r3, r3, #6
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038de:	e002      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f9      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038ec:	e040      	b.n	8003970 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2d      	ldr	r2, [pc, #180]	; (80039a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d118      	bne.n	800392a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d112      	bne.n	800392a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a23      	ldr	r2, [pc, #140]	; (8003998 <HAL_ADC_ConfigChannel+0x7cc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_ADC_ConfigChannel+0x74c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a22      	ldr	r2, [pc, #136]	; (800399c <HAL_ADC_ConfigChannel+0x7d0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d12d      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800391c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003920:	4619      	mov	r1, r3
 8003922:	481b      	ldr	r0, [pc, #108]	; (8003990 <HAL_ADC_ConfigChannel+0x7c4>)
 8003924:	f7fe ff91 	bl	800284a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003928:	e024      	b.n	8003974 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1f      	ldr	r2, [pc, #124]	; (80039ac <HAL_ADC_ConfigChannel+0x7e0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d120      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003934:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11a      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a14      	ldr	r2, [pc, #80]	; (8003998 <HAL_ADC_ConfigChannel+0x7cc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d115      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800394a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800394e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003952:	4619      	mov	r1, r3
 8003954:	480e      	ldr	r0, [pc, #56]	; (8003990 <HAL_ADC_ConfigChannel+0x7c4>)
 8003956:	f7fe ff78 	bl	800284a <LL_ADC_SetCommonPathInternalCh>
 800395a:	e00c      	b.n	8003976 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800396e:	e002      	b.n	8003976 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003970:	bf00      	nop
 8003972:	e000      	b.n	8003976 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003974:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800397e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003982:	4618      	mov	r0, r3
 8003984:	37d8      	adds	r7, #216	; 0xd8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	80080000 	.word	0x80080000
 8003990:	50040300 	.word	0x50040300
 8003994:	c7520000 	.word	0xc7520000
 8003998:	50040000 	.word	0x50040000
 800399c:	50040200 	.word	0x50040200
 80039a0:	20000000 	.word	0x20000000
 80039a4:	053e2d63 	.word	0x053e2d63
 80039a8:	cb840000 	.word	0xcb840000
 80039ac:	80000001 	.word	0x80000001

080039b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff f8c5 	bl	8002b50 <LL_ADC_IsEnabled>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d169      	bne.n	8003aa0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	4b36      	ldr	r3, [pc, #216]	; (8003aac <ADC_Enable+0xfc>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	f043 0210 	orr.w	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	f043 0201 	orr.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e055      	b.n	8003aa2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff f894 	bl	8002b28 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a00:	482b      	ldr	r0, [pc, #172]	; (8003ab0 <ADC_Enable+0x100>)
 8003a02:	f7fe ff35 	bl	8002870 <LL_ADC_GetCommonPathInternalCh>
 8003a06:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d013      	beq.n	8003a38 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a10:	4b28      	ldr	r3, [pc, #160]	; (8003ab4 <ADC_Enable+0x104>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	4a28      	ldr	r2, [pc, #160]	; (8003ab8 <ADC_Enable+0x108>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	4613      	mov	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a2a:	e002      	b.n	8003a32 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f9      	bne.n	8003a2c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a38:	f7fe fec4 	bl	80027c4 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a3e:	e028      	b.n	8003a92 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff f883 	bl	8002b50 <LL_ADC_IsEnabled>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d104      	bne.n	8003a5a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff f867 	bl	8002b28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a5a:	f7fe feb3 	bl	80027c4 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d914      	bls.n	8003a92 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d00d      	beq.n	8003a92 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7a:	f043 0210 	orr.w	r2, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	f043 0201 	orr.w	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e007      	b.n	8003aa2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d1cf      	bne.n	8003a40 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	8000003f 	.word	0x8000003f
 8003ab0:	50040300 	.word	0x50040300
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	053e2d63 	.word	0x053e2d63

08003abc <LL_ADC_IsEnabled>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <LL_ADC_IsEnabled+0x18>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <LL_ADC_IsEnabled+0x1a>
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d101      	bne.n	8003afa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b09f      	sub	sp, #124	; 0x7c
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e093      	b.n	8003c4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b32:	2300      	movs	r3, #0
 8003b34:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a47      	ldr	r2, [pc, #284]	; (8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d102      	bne.n	8003b46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b40:	4b46      	ldr	r3, [pc, #280]	; (8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	e001      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e072      	b.n	8003c4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff ffb9 	bl	8003ae2 <LL_ADC_REG_IsConversionOngoing>
 8003b70:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff ffb3 	bl	8003ae2 <LL_ADC_REG_IsConversionOngoing>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d154      	bne.n	8003c2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d151      	bne.n	8003c2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b88:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003b8a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d02c      	beq.n	8003bee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ba6:	035b      	lsls	r3, r3, #13
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	431a      	orrs	r2, r3
 8003bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bb0:	4829      	ldr	r0, [pc, #164]	; (8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003bb2:	f7ff ff83 	bl	8003abc <LL_ADC_IsEnabled>
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	4828      	ldr	r0, [pc, #160]	; (8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003bba:	f7ff ff7f 	bl	8003abc <LL_ADC_IsEnabled>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	431c      	orrs	r4, r3
 8003bc2:	4828      	ldr	r0, [pc, #160]	; (8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003bc4:	f7ff ff7a 	bl	8003abc <LL_ADC_IsEnabled>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4323      	orrs	r3, r4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d137      	bne.n	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003bd8:	f023 030f 	bic.w	r3, r3, #15
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	6811      	ldr	r1, [r2, #0]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	6892      	ldr	r2, [r2, #8]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	431a      	orrs	r2, r3
 8003be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bea:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bec:	e028      	b.n	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bfa:	4817      	ldr	r0, [pc, #92]	; (8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003bfc:	f7ff ff5e 	bl	8003abc <LL_ADC_IsEnabled>
 8003c00:	4604      	mov	r4, r0
 8003c02:	4816      	ldr	r0, [pc, #88]	; (8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c04:	f7ff ff5a 	bl	8003abc <LL_ADC_IsEnabled>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	431c      	orrs	r4, r3
 8003c0c:	4815      	ldr	r0, [pc, #84]	; (8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c0e:	f7ff ff55 	bl	8003abc <LL_ADC_IsEnabled>
 8003c12:	4603      	mov	r3, r0
 8003c14:	4323      	orrs	r3, r4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d112      	bne.n	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c22:	f023 030f 	bic.w	r3, r3, #15
 8003c26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c28:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c2a:	e009      	b.n	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	f043 0220 	orr.w	r2, r3, #32
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003c3e:	e000      	b.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c4a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	377c      	adds	r7, #124	; 0x7c
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd90      	pop	{r4, r7, pc}
 8003c56:	bf00      	nop
 8003c58:	50040000 	.word	0x50040000
 8003c5c:	50040100 	.word	0x50040100
 8003c60:	50040300 	.word	0x50040300
 8003c64:	50040200 	.word	0x50040200

08003c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c78:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c84:	4013      	ands	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c9a:	4a04      	ldr	r2, [pc, #16]	; (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	60d3      	str	r3, [r2, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb4:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	f003 0307 	and.w	r3, r3, #7
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	6039      	str	r1, [r7, #0]
 8003cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	db0a      	blt.n	8003cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	490c      	ldr	r1, [pc, #48]	; (8003d18 <__NVIC_SetPriority+0x4c>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	0112      	lsls	r2, r2, #4
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	440b      	add	r3, r1
 8003cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf4:	e00a      	b.n	8003d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4908      	ldr	r1, [pc, #32]	; (8003d1c <__NVIC_SetPriority+0x50>)
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	3b04      	subs	r3, #4
 8003d04:	0112      	lsls	r2, r2, #4
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	440b      	add	r3, r1
 8003d0a:	761a      	strb	r2, [r3, #24]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000e100 	.word	0xe000e100
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	; 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f1c3 0307 	rsb	r3, r3, #7
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	bf28      	it	cs
 8003d3e:	2304      	movcs	r3, #4
 8003d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3304      	adds	r3, #4
 8003d46:	2b06      	cmp	r3, #6
 8003d48:	d902      	bls.n	8003d50 <NVIC_EncodePriority+0x30>
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3b03      	subs	r3, #3
 8003d4e:	e000      	b.n	8003d52 <NVIC_EncodePriority+0x32>
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	401a      	ands	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d68:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	43d9      	mvns	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d78:	4313      	orrs	r3, r2
         );
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3724      	adds	r7, #36	; 0x24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d98:	d301      	bcc.n	8003d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e00f      	b.n	8003dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <SysTick_Config+0x40>)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003da6:	210f      	movs	r1, #15
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	f7ff ff8e 	bl	8003ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <SysTick_Config+0x40>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003db6:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <SysTick_Config+0x40>)
 8003db8:	2207      	movs	r2, #7
 8003dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	e000e010 	.word	0xe000e010

08003dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff47 	bl	8003c68 <__NVIC_SetPriorityGrouping>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4603      	mov	r3, r0
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003df4:	f7ff ff5c 	bl	8003cb0 <__NVIC_GetPriorityGrouping>
 8003df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f7ff ff8e 	bl	8003d20 <NVIC_EncodePriority>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff5d 	bl	8003ccc <__NVIC_SetPriority>
}
 8003e12:	bf00      	nop
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ffb0 	bl	8003d88 <SysTick_Config>
 8003e28:	4603      	mov	r3, r0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e42:	e17f      	b.n	8004144 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2101      	movs	r1, #1
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8171 	beq.w	800413e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d005      	beq.n	8003e74 <HAL_GPIO_Init+0x40>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d130      	bne.n	8003ed6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	2203      	movs	r2, #3
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eaa:	2201      	movs	r2, #1
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 0201 	and.w	r2, r3, #1
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d118      	bne.n	8003f14 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ee8:	2201      	movs	r2, #1
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	f003 0201 	and.w	r2, r3, #1
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d017      	beq.n	8003f50 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d123      	bne.n	8003fa4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	08da      	lsrs	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3208      	adds	r2, #8
 8003f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	220f      	movs	r2, #15
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	08da      	lsrs	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3208      	adds	r2, #8
 8003f9e:	6939      	ldr	r1, [r7, #16]
 8003fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	2203      	movs	r2, #3
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 0203 	and.w	r2, r3, #3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80ac 	beq.w	800413e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	; (8004164 <HAL_GPIO_Init+0x330>)
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fea:	4a5e      	ldr	r2, [pc, #376]	; (8004164 <HAL_GPIO_Init+0x330>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6613      	str	r3, [r2, #96]	; 0x60
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <HAL_GPIO_Init+0x330>)
 8003ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ffe:	4a5a      	ldr	r2, [pc, #360]	; (8004168 <HAL_GPIO_Init+0x334>)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	3302      	adds	r3, #2
 8004006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	220f      	movs	r2, #15
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4013      	ands	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004028:	d025      	beq.n	8004076 <HAL_GPIO_Init+0x242>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4f      	ldr	r2, [pc, #316]	; (800416c <HAL_GPIO_Init+0x338>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01f      	beq.n	8004072 <HAL_GPIO_Init+0x23e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4e      	ldr	r2, [pc, #312]	; (8004170 <HAL_GPIO_Init+0x33c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d019      	beq.n	800406e <HAL_GPIO_Init+0x23a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4d      	ldr	r2, [pc, #308]	; (8004174 <HAL_GPIO_Init+0x340>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_GPIO_Init+0x236>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4c      	ldr	r2, [pc, #304]	; (8004178 <HAL_GPIO_Init+0x344>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00d      	beq.n	8004066 <HAL_GPIO_Init+0x232>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4b      	ldr	r2, [pc, #300]	; (800417c <HAL_GPIO_Init+0x348>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d007      	beq.n	8004062 <HAL_GPIO_Init+0x22e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4a      	ldr	r2, [pc, #296]	; (8004180 <HAL_GPIO_Init+0x34c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d101      	bne.n	800405e <HAL_GPIO_Init+0x22a>
 800405a:	2306      	movs	r3, #6
 800405c:	e00c      	b.n	8004078 <HAL_GPIO_Init+0x244>
 800405e:	2307      	movs	r3, #7
 8004060:	e00a      	b.n	8004078 <HAL_GPIO_Init+0x244>
 8004062:	2305      	movs	r3, #5
 8004064:	e008      	b.n	8004078 <HAL_GPIO_Init+0x244>
 8004066:	2304      	movs	r3, #4
 8004068:	e006      	b.n	8004078 <HAL_GPIO_Init+0x244>
 800406a:	2303      	movs	r3, #3
 800406c:	e004      	b.n	8004078 <HAL_GPIO_Init+0x244>
 800406e:	2302      	movs	r3, #2
 8004070:	e002      	b.n	8004078 <HAL_GPIO_Init+0x244>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_GPIO_Init+0x244>
 8004076:	2300      	movs	r3, #0
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	f002 0203 	and.w	r2, r2, #3
 800407e:	0092      	lsls	r2, r2, #2
 8004080:	4093      	lsls	r3, r2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004088:	4937      	ldr	r1, [pc, #220]	; (8004168 <HAL_GPIO_Init+0x334>)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	3302      	adds	r3, #2
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004096:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_GPIO_Init+0x350>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	43db      	mvns	r3, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4013      	ands	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040ba:	4a32      	ldr	r2, [pc, #200]	; (8004184 <HAL_GPIO_Init+0x350>)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040c0:	4b30      	ldr	r3, [pc, #192]	; (8004184 <HAL_GPIO_Init+0x350>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040e4:	4a27      	ldr	r2, [pc, #156]	; (8004184 <HAL_GPIO_Init+0x350>)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040ea:	4b26      	ldr	r3, [pc, #152]	; (8004184 <HAL_GPIO_Init+0x350>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800410e:	4a1d      	ldr	r2, [pc, #116]	; (8004184 <HAL_GPIO_Init+0x350>)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <HAL_GPIO_Init+0x350>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	43db      	mvns	r3, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004138:	4a12      	ldr	r2, [pc, #72]	; (8004184 <HAL_GPIO_Init+0x350>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	3301      	adds	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa22 f303 	lsr.w	r3, r2, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	f47f ae78 	bne.w	8003e44 <HAL_GPIO_Init+0x10>
  }
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
 8004168:	40010000 	.word	0x40010000
 800416c:	48000400 	.word	0x48000400
 8004170:	48000800 	.word	0x48000800
 8004174:	48000c00 	.word	0x48000c00
 8004178:	48001000 	.word	0x48001000
 800417c:	48001400 	.word	0x48001400
 8004180:	48001800 	.word	0x48001800
 8004184:	40010400 	.word	0x40010400

08004188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
 8004194:	4613      	mov	r3, r2
 8004196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004198:	787b      	ldrb	r3, [r7, #1]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041a4:	e002      	b.n	80041ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40007000 	.word	0x40007000

080041d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e2:	d130      	bne.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e4:	4b23      	ldr	r3, [pc, #140]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f0:	d038      	beq.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041f2:	4b20      	ldr	r3, [pc, #128]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041fa:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2232      	movs	r2, #50	; 0x32
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	4a1b      	ldr	r2, [pc, #108]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0c9b      	lsrs	r3, r3, #18
 8004214:	3301      	adds	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004218:	e002      	b.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3b01      	subs	r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422c:	d102      	bne.n	8004234 <HAL_PWREx_ControlVoltageScaling+0x60>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f2      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004240:	d110      	bne.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e00f      	b.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004252:	d007      	beq.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800425c:	4a05      	ldr	r2, [pc, #20]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004262:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40007000 	.word	0x40007000
 8004278:	20000000 	.word	0x20000000
 800427c:	431bde83 	.word	0x431bde83

08004280 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e3ca      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004292:	4b97      	ldr	r3, [pc, #604]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800429c:	4b94      	ldr	r3, [pc, #592]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80e4 	beq.w	800447c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <HAL_RCC_OscConfig+0x4a>
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	f040 808b 	bne.w	80043d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	f040 8087 	bne.w	80043d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042ca:	4b89      	ldr	r3, [pc, #548]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_RCC_OscConfig+0x62>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e3a2      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	4b82      	ldr	r3, [pc, #520]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <HAL_RCC_OscConfig+0x7c>
 80042f2:	4b7f      	ldr	r3, [pc, #508]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fa:	e005      	b.n	8004308 <HAL_RCC_OscConfig+0x88>
 80042fc:	4b7c      	ldr	r3, [pc, #496]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80042fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004308:	4293      	cmp	r3, r2
 800430a:	d223      	bcs.n	8004354 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fd1d 	bl	8004d50 <RCC_SetFlashLatencyFromMSIRange>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e383      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004320:	4b73      	ldr	r3, [pc, #460]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a72      	ldr	r2, [pc, #456]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004326:	f043 0308 	orr.w	r3, r3, #8
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b70      	ldr	r3, [pc, #448]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	496d      	ldr	r1, [pc, #436]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800433e:	4b6c      	ldr	r3, [pc, #432]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	4968      	ldr	r1, [pc, #416]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
 8004352:	e025      	b.n	80043a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004354:	4b66      	ldr	r3, [pc, #408]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a65      	ldr	r2, [pc, #404]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800435a:	f043 0308 	orr.w	r3, r3, #8
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b63      	ldr	r3, [pc, #396]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	4960      	ldr	r1, [pc, #384]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004372:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	495b      	ldr	r1, [pc, #364]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fcdd 	bl	8004d50 <RCC_SetFlashLatencyFromMSIRange>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e343      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043a0:	f000 fc4a 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b52      	ldr	r3, [pc, #328]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	4950      	ldr	r1, [pc, #320]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
 80043bc:	4a4e      	ldr	r2, [pc, #312]	; (80044f8 <HAL_RCC_OscConfig+0x278>)
 80043be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043c0:	4b4e      	ldr	r3, [pc, #312]	; (80044fc <HAL_RCC_OscConfig+0x27c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe f9ad 	bl	8002724 <HAL_InitTick>
 80043ca:	4603      	mov	r3, r0
 80043cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d052      	beq.n	800447a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	e327      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d032      	beq.n	8004446 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043e0:	4b43      	ldr	r3, [pc, #268]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a42      	ldr	r2, [pc, #264]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043ec:	f7fe f9ea 	bl	80027c4 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043f4:	f7fe f9e6 	bl	80027c4 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e310      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004406:	4b3a      	ldr	r3, [pc, #232]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004412:	4b37      	ldr	r3, [pc, #220]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a36      	ldr	r2, [pc, #216]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004418:	f043 0308 	orr.w	r3, r3, #8
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b34      	ldr	r3, [pc, #208]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	4931      	ldr	r1, [pc, #196]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800442c:	4313      	orrs	r3, r2
 800442e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004430:	4b2f      	ldr	r3, [pc, #188]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	492c      	ldr	r1, [pc, #176]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
 8004444:	e01a      	b.n	800447c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004446:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a29      	ldr	r2, [pc, #164]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004452:	f7fe f9b7 	bl	80027c4 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800445a:	f7fe f9b3 	bl	80027c4 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e2dd      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800446c:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f0      	bne.n	800445a <HAL_RCC_OscConfig+0x1da>
 8004478:	e000      	b.n	800447c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800447a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d074      	beq.n	8004572 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b08      	cmp	r3, #8
 800448c:	d005      	beq.n	800449a <HAL_RCC_OscConfig+0x21a>
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d10e      	bne.n	80044b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2b03      	cmp	r3, #3
 8004498:	d10b      	bne.n	80044b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d064      	beq.n	8004570 <HAL_RCC_OscConfig+0x2f0>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d160      	bne.n	8004570 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e2ba      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ba:	d106      	bne.n	80044ca <HAL_RCC_OscConfig+0x24a>
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0b      	ldr	r2, [pc, #44]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80044c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	e026      	b.n	8004518 <HAL_RCC_OscConfig+0x298>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d2:	d115      	bne.n	8004500 <HAL_RCC_OscConfig+0x280>
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a05      	ldr	r2, [pc, #20]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80044da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a02      	ldr	r2, [pc, #8]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80044e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	e014      	b.n	8004518 <HAL_RCC_OscConfig+0x298>
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000
 80044f4:	0800727c 	.word	0x0800727c
 80044f8:	20000000 	.word	0x20000000
 80044fc:	20000004 	.word	0x20000004
 8004500:	4ba0      	ldr	r3, [pc, #640]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a9f      	ldr	r2, [pc, #636]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	4b9d      	ldr	r3, [pc, #628]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a9c      	ldr	r2, [pc, #624]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d013      	beq.n	8004548 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fe f950 	bl	80027c4 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004528:	f7fe f94c 	bl	80027c4 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	; 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e276      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453a:	4b92      	ldr	r3, [pc, #584]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0x2a8>
 8004546:	e014      	b.n	8004572 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fe f93c 	bl	80027c4 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fe f938 	bl	80027c4 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	; 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e262      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004562:	4b88      	ldr	r3, [pc, #544]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x2d0>
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d060      	beq.n	8004640 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b04      	cmp	r3, #4
 8004582:	d005      	beq.n	8004590 <HAL_RCC_OscConfig+0x310>
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d119      	bne.n	80045be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d116      	bne.n	80045be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004590:	4b7c      	ldr	r3, [pc, #496]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_OscConfig+0x328>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e23f      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a8:	4b76      	ldr	r3, [pc, #472]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	061b      	lsls	r3, r3, #24
 80045b6:	4973      	ldr	r1, [pc, #460]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045bc:	e040      	b.n	8004640 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d023      	beq.n	800460e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c6:	4b6f      	ldr	r3, [pc, #444]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a6e      	ldr	r2, [pc, #440]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d2:	f7fe f8f7 	bl	80027c4 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045da:	f7fe f8f3 	bl	80027c4 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e21d      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ec:	4b65      	ldr	r3, [pc, #404]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f8:	4b62      	ldr	r3, [pc, #392]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	061b      	lsls	r3, r3, #24
 8004606:	495f      	ldr	r1, [pc, #380]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004608:	4313      	orrs	r3, r2
 800460a:	604b      	str	r3, [r1, #4]
 800460c:	e018      	b.n	8004640 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800460e:	4b5d      	ldr	r3, [pc, #372]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a5c      	ldr	r2, [pc, #368]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fe f8d3 	bl	80027c4 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004622:	f7fe f8cf 	bl	80027c4 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e1f9      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004634:	4b53      	ldr	r3, [pc, #332]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d03c      	beq.n	80046c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01c      	beq.n	800468e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004654:	4b4b      	ldr	r3, [pc, #300]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465a:	4a4a      	ldr	r2, [pc, #296]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fe f8ae 	bl	80027c4 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800466c:	f7fe f8aa 	bl	80027c4 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e1d4      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800467e:	4b41      	ldr	r3, [pc, #260]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0ef      	beq.n	800466c <HAL_RCC_OscConfig+0x3ec>
 800468c:	e01b      	b.n	80046c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468e:	4b3d      	ldr	r3, [pc, #244]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004694:	4a3b      	ldr	r2, [pc, #236]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469e:	f7fe f891 	bl	80027c4 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a6:	f7fe f88d 	bl	80027c4 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e1b7      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046b8:	4b32      	ldr	r3, [pc, #200]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1ef      	bne.n	80046a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80a6 	beq.w	8004820 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d4:	2300      	movs	r3, #0
 80046d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046d8:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80046da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10d      	bne.n	8004700 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e4:	4b27      	ldr	r3, [pc, #156]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	4a26      	ldr	r2, [pc, #152]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80046ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6593      	str	r3, [r2, #88]	; 0x58
 80046f0:	4b24      	ldr	r3, [pc, #144]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fc:	2301      	movs	r3, #1
 80046fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004700:	4b21      	ldr	r3, [pc, #132]	; (8004788 <HAL_RCC_OscConfig+0x508>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d118      	bne.n	800473e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800470c:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <HAL_RCC_OscConfig+0x508>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <HAL_RCC_OscConfig+0x508>)
 8004712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004716:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004718:	f7fe f854 	bl	80027c4 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004720:	f7fe f850 	bl	80027c4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e17a      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004732:	4b15      	ldr	r3, [pc, #84]	; (8004788 <HAL_RCC_OscConfig+0x508>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d108      	bne.n	8004758 <HAL_RCC_OscConfig+0x4d8>
 8004746:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004756:	e029      	b.n	80047ac <HAL_RCC_OscConfig+0x52c>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b05      	cmp	r3, #5
 800475e:	d115      	bne.n	800478c <HAL_RCC_OscConfig+0x50c>
 8004760:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	4a07      	ldr	r2, [pc, #28]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	4a03      	ldr	r2, [pc, #12]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004780:	e014      	b.n	80047ac <HAL_RCC_OscConfig+0x52c>
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000
 8004788:	40007000 	.word	0x40007000
 800478c:	4b9c      	ldr	r3, [pc, #624]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	4a9b      	ldr	r2, [pc, #620]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800479c:	4b98      	ldr	r3, [pc, #608]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	4a97      	ldr	r2, [pc, #604]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80047a4:	f023 0304 	bic.w	r3, r3, #4
 80047a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d016      	beq.n	80047e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b4:	f7fe f806 	bl	80027c4 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ba:	e00a      	b.n	80047d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7fe f802 	bl	80027c4 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e12a      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d2:	4b8b      	ldr	r3, [pc, #556]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ed      	beq.n	80047bc <HAL_RCC_OscConfig+0x53c>
 80047e0:	e015      	b.n	800480e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e2:	f7fd ffef 	bl	80027c4 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fd ffeb 	bl	80027c4 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e113      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004800:	4b7f      	ldr	r3, [pc, #508]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1ed      	bne.n	80047ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800480e:	7ffb      	ldrb	r3, [r7, #31]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d105      	bne.n	8004820 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004814:	4b7a      	ldr	r3, [pc, #488]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	4a79      	ldr	r2, [pc, #484]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 800481a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800481e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80fe 	beq.w	8004a26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	2b02      	cmp	r3, #2
 8004830:	f040 80d0 	bne.w	80049d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004834:	4b72      	ldr	r3, [pc, #456]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f003 0203 	and.w	r2, r3, #3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	429a      	cmp	r2, r3
 8004846:	d130      	bne.n	80048aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	3b01      	subs	r3, #1
 8004854:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d127      	bne.n	80048aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004864:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d11f      	bne.n	80048aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004874:	2a07      	cmp	r2, #7
 8004876:	bf14      	ite	ne
 8004878:	2201      	movne	r2, #1
 800487a:	2200      	moveq	r2, #0
 800487c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800487e:	4293      	cmp	r3, r2
 8004880:	d113      	bne.n	80048aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	3b01      	subs	r3, #1
 8004890:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d109      	bne.n	80048aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	3b01      	subs	r3, #1
 80048a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d06e      	beq.n	8004988 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d069      	beq.n	8004984 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048b0:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d105      	bne.n	80048c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048bc:	4b50      	ldr	r3, [pc, #320]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0ad      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048cc:	4b4c      	ldr	r3, [pc, #304]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a4b      	ldr	r2, [pc, #300]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80048d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048d8:	f7fd ff74 	bl	80027c4 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fd ff70 	bl	80027c4 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e09a      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f2:	4b43      	ldr	r3, [pc, #268]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048fe:	4b40      	ldr	r3, [pc, #256]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	4b40      	ldr	r3, [pc, #256]	; (8004a04 <HAL_RCC_OscConfig+0x784>)
 8004904:	4013      	ands	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800490e:	3a01      	subs	r2, #1
 8004910:	0112      	lsls	r2, r2, #4
 8004912:	4311      	orrs	r1, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004918:	0212      	lsls	r2, r2, #8
 800491a:	4311      	orrs	r1, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004920:	0852      	lsrs	r2, r2, #1
 8004922:	3a01      	subs	r2, #1
 8004924:	0552      	lsls	r2, r2, #21
 8004926:	4311      	orrs	r1, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800492c:	0852      	lsrs	r2, r2, #1
 800492e:	3a01      	subs	r2, #1
 8004930:	0652      	lsls	r2, r2, #25
 8004932:	4311      	orrs	r1, r2
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004938:	0912      	lsrs	r2, r2, #4
 800493a:	0452      	lsls	r2, r2, #17
 800493c:	430a      	orrs	r2, r1
 800493e:	4930      	ldr	r1, [pc, #192]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004940:	4313      	orrs	r3, r2
 8004942:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004944:	4b2e      	ldr	r3, [pc, #184]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2d      	ldr	r2, [pc, #180]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 800494a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004950:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a2a      	ldr	r2, [pc, #168]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800495c:	f7fd ff32 	bl	80027c4 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd ff2e 	bl	80027c4 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e058      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004976:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004982:	e050      	b.n	8004a26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e04f      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004988:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d148      	bne.n	8004a26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 800499a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800499e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a0:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80049a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049ac:	f7fd ff0a 	bl	80027c4 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fd ff06 	bl	80027c4 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e030      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c6:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x734>
 80049d2:	e028      	b.n	8004a26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d023      	beq.n	8004a22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049da:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80049e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e6:	f7fd feed 	bl	80027c4 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ec:	e00c      	b.n	8004a08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ee:	f7fd fee9 	bl	80027c4 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d905      	bls.n	8004a08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e013      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
 8004a00:	40021000 	.word	0x40021000
 8004a04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCC_OscConfig+0x7b0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1ec      	bne.n	80049ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_OscConfig+0x7b0>)
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	4905      	ldr	r1, [pc, #20]	; (8004a30 <HAL_RCC_OscConfig+0x7b0>)
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCC_OscConfig+0x7b4>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60cb      	str	r3, [r1, #12]
 8004a20:	e001      	b.n	8004a26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	feeefffc 	.word	0xfeeefffc

08004a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0e7      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a4c:	4b75      	ldr	r3, [pc, #468]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d910      	bls.n	8004a7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5a:	4b72      	ldr	r3, [pc, #456]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 0207 	bic.w	r2, r3, #7
 8004a62:	4970      	ldr	r1, [pc, #448]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6a:	4b6e      	ldr	r3, [pc, #440]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0cf      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d010      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	4b66      	ldr	r3, [pc, #408]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d908      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a98:	4b63      	ldr	r3, [pc, #396]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4960      	ldr	r1, [pc, #384]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d04c      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004abe:	4b5a      	ldr	r3, [pc, #360]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d121      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0a6      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad6:	4b54      	ldr	r3, [pc, #336]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d115      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e09a      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aee:	4b4e      	ldr	r3, [pc, #312]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e08e      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afe:	4b4a      	ldr	r3, [pc, #296]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e086      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b0e:	4b46      	ldr	r3, [pc, #280]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f023 0203 	bic.w	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4943      	ldr	r1, [pc, #268]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b20:	f7fd fe50 	bl	80027c4 <HAL_GetTick>
 8004b24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b28:	f7fd fe4c 	bl	80027c4 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e06e      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	4b3a      	ldr	r3, [pc, #232]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 020c 	and.w	r2, r3, #12
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d1eb      	bne.n	8004b28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d010      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	4b31      	ldr	r3, [pc, #196]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d208      	bcs.n	8004b7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b6c:	4b2e      	ldr	r3, [pc, #184]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	492b      	ldr	r1, [pc, #172]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7e:	4b29      	ldr	r3, [pc, #164]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d210      	bcs.n	8004bae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f023 0207 	bic.w	r2, r3, #7
 8004b94:	4923      	ldr	r1, [pc, #140]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9c:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d001      	beq.n	8004bae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e036      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bba:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	4918      	ldr	r1, [pc, #96]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bd8:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4910      	ldr	r1, [pc, #64]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bec:	f000 f824 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	490b      	ldr	r1, [pc, #44]	; (8004c2c <HAL_RCC_ClockConfig+0x1f4>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
 8004c08:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <HAL_RCC_ClockConfig+0x1f8>)
 8004c0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c0c:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <HAL_RCC_ClockConfig+0x1fc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd fd87 	bl	8002724 <HAL_InitTick>
 8004c16:	4603      	mov	r3, r0
 8004c18:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40022000 	.word	0x40022000
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	0800727c 	.word	0x0800727c
 8004c30:	20000000 	.word	0x20000000
 8004c34:	20000004 	.word	0x20000004

08004c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	; 0x24
 8004c3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c50:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x34>
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d121      	bne.n	8004caa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d11e      	bne.n	8004caa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c6c:	4b34      	ldr	r3, [pc, #208]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d107      	bne.n	8004c88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c78:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	e005      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c88:	4b2d      	ldr	r3, [pc, #180]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c94:	4a2b      	ldr	r2, [pc, #172]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10d      	bne.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d102      	bne.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	e004      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cbc:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x114>)
 8004cbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b0c      	cmp	r3, #12
 8004cc4:	d134      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d003      	beq.n	8004cde <HAL_RCC_GetSysClockFreq+0xa6>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d003      	beq.n	8004ce4 <HAL_RCC_GetSysClockFreq+0xac>
 8004cdc:	e005      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cde:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ce0:	617b      	str	r3, [r7, #20]
      break;
 8004ce2:	e005      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ce6:	617b      	str	r3, [r7, #20]
      break;
 8004ce8:	e002      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	617b      	str	r3, [r7, #20]
      break;
 8004cee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	fb03 f202 	mul.w	r2, r3, r2
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d16:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	0e5b      	lsrs	r3, r3, #25
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	3301      	adds	r3, #1
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d30:	69bb      	ldr	r3, [r7, #24]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3724      	adds	r7, #36	; 0x24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000
 8004d44:	0800728c 	.word	0x0800728c
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	007a1200 	.word	0x007a1200

08004d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d5c:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d68:	f7ff fa26 	bl	80041b8 <HAL_PWREx_GetVoltageRange>
 8004d6c:	6178      	str	r0, [r7, #20]
 8004d6e:	e014      	b.n	8004d9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d74:	4a24      	ldr	r2, [pc, #144]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d7c:	4b22      	ldr	r3, [pc, #136]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d88:	f7ff fa16 	bl	80041b8 <HAL_PWREx_GetVoltageRange>
 8004d8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d8e:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d92:	4a1d      	ldr	r2, [pc, #116]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da0:	d10b      	bne.n	8004dba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b80      	cmp	r3, #128	; 0x80
 8004da6:	d919      	bls.n	8004ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2ba0      	cmp	r3, #160	; 0xa0
 8004dac:	d902      	bls.n	8004db4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dae:	2302      	movs	r3, #2
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	e013      	b.n	8004ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004db4:	2301      	movs	r3, #1
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	e010      	b.n	8004ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b80      	cmp	r3, #128	; 0x80
 8004dbe:	d902      	bls.n	8004dc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	e00a      	b.n	8004ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b80      	cmp	r3, #128	; 0x80
 8004dca:	d102      	bne.n	8004dd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dcc:	2302      	movs	r3, #2
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	e004      	b.n	8004ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b70      	cmp	r3, #112	; 0x70
 8004dd6:	d101      	bne.n	8004ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dd8:	2301      	movs	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f023 0207 	bic.w	r2, r3, #7
 8004de4:	4909      	ldr	r1, [pc, #36]	; (8004e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004dec:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d001      	beq.n	8004dfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40022000 	.word	0x40022000

08004e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e18:	2300      	movs	r3, #0
 8004e1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d041      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e34:	d02a      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e3a:	d824      	bhi.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e40:	d008      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e46:	d81e      	bhi.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e50:	d010      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e52:	e018      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e54:	4b86      	ldr	r3, [pc, #536]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a85      	ldr	r2, [pc, #532]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e60:	e015      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3304      	adds	r3, #4
 8004e66:	2100      	movs	r1, #0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fabb 	bl	80053e4 <RCCEx_PLLSAI1_Config>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e72:	e00c      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3320      	adds	r3, #32
 8004e78:	2100      	movs	r1, #0
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fba6 	bl	80055cc <RCCEx_PLLSAI2_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e84:	e003      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	74fb      	strb	r3, [r7, #19]
      break;
 8004e8a:	e000      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e8e:	7cfb      	ldrb	r3, [r7, #19]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10b      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e94:	4b76      	ldr	r3, [pc, #472]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea2:	4973      	ldr	r1, [pc, #460]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004eaa:	e001      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d041      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ec4:	d02a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ec6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004eca:	d824      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ed0:	d008      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ed6:	d81e      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ee0:	d010      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ee2:	e018      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ee4:	4b62      	ldr	r3, [pc, #392]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4a61      	ldr	r2, [pc, #388]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ef0:	e015      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fa73 	bl	80053e4 <RCCEx_PLLSAI1_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f02:	e00c      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3320      	adds	r3, #32
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fb5e 	bl	80055cc <RCCEx_PLLSAI2_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f14:	e003      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	74fb      	strb	r3, [r7, #19]
      break;
 8004f1a:	e000      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f1e:	7cfb      	ldrb	r3, [r7, #19]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10b      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f24:	4b52      	ldr	r3, [pc, #328]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f32:	494f      	ldr	r1, [pc, #316]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f3a:	e001      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3c:	7cfb      	ldrb	r3, [r7, #19]
 8004f3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80a0 	beq.w	800508e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f52:	4b47      	ldr	r3, [pc, #284]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00d      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f68:	4b41      	ldr	r3, [pc, #260]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6c:	4a40      	ldr	r2, [pc, #256]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f72:	6593      	str	r3, [r2, #88]	; 0x58
 8004f74:	4b3e      	ldr	r3, [pc, #248]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f80:	2301      	movs	r3, #1
 8004f82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f84:	4b3b      	ldr	r3, [pc, #236]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a3a      	ldr	r2, [pc, #232]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f90:	f7fd fc18 	bl	80027c4 <HAL_GetTick>
 8004f94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f96:	e009      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f98:	f7fd fc14 	bl	80027c4 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d902      	bls.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	74fb      	strb	r3, [r7, #19]
        break;
 8004faa:	e005      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fac:	4b31      	ldr	r3, [pc, #196]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0ef      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004fb8:	7cfb      	ldrb	r3, [r7, #19]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d15c      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fbe:	4b2c      	ldr	r3, [pc, #176]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01f      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d019      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fdc:	4b24      	ldr	r3, [pc, #144]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fe8:	4b21      	ldr	r3, [pc, #132]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	4a20      	ldr	r2, [pc, #128]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff8:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	4a1c      	ldr	r2, [pc, #112]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005008:	4a19      	ldr	r2, [pc, #100]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501a:	f7fd fbd3 	bl	80027c4 <HAL_GetTick>
 800501e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005020:	e00b      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005022:	f7fd fbcf 	bl	80027c4 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005030:	4293      	cmp	r3, r2
 8005032:	d902      	bls.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	74fb      	strb	r3, [r7, #19]
            break;
 8005038:	e006      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800503a:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0ec      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005048:	7cfb      	ldrb	r3, [r7, #19]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10c      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800504e:	4b08      	ldr	r3, [pc, #32]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505e:	4904      	ldr	r1, [pc, #16]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005066:	e009      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005068:	7cfb      	ldrb	r3, [r7, #19]
 800506a:	74bb      	strb	r3, [r7, #18]
 800506c:	e006      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
 8005074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	7cfb      	ldrb	r3, [r7, #19]
 800507a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800507c:	7c7b      	ldrb	r3, [r7, #17]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d105      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005082:	4b9e      	ldr	r3, [pc, #632]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	4a9d      	ldr	r2, [pc, #628]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800508c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800509a:	4b98      	ldr	r3, [pc, #608]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f023 0203 	bic.w	r2, r3, #3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	4994      	ldr	r1, [pc, #592]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050bc:	4b8f      	ldr	r3, [pc, #572]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f023 020c 	bic.w	r2, r3, #12
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	498c      	ldr	r1, [pc, #560]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050de:	4b87      	ldr	r3, [pc, #540]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	4983      	ldr	r1, [pc, #524]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005100:	4b7e      	ldr	r3, [pc, #504]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510e:	497b      	ldr	r1, [pc, #492]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005122:	4b76      	ldr	r3, [pc, #472]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005130:	4972      	ldr	r1, [pc, #456]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005144:	4b6d      	ldr	r3, [pc, #436]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005152:	496a      	ldr	r1, [pc, #424]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005166:	4b65      	ldr	r3, [pc, #404]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005174:	4961      	ldr	r1, [pc, #388]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005188:	4b5c      	ldr	r3, [pc, #368]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005196:	4959      	ldr	r1, [pc, #356]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051aa:	4b54      	ldr	r3, [pc, #336]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b8:	4950      	ldr	r1, [pc, #320]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051cc:	4b4b      	ldr	r3, [pc, #300]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	4948      	ldr	r1, [pc, #288]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051ee:	4b43      	ldr	r3, [pc, #268]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fc:	493f      	ldr	r1, [pc, #252]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d028      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005210:	4b3a      	ldr	r3, [pc, #232]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521e:	4937      	ldr	r1, [pc, #220]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800522a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800522e:	d106      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005230:	4b32      	ldr	r3, [pc, #200]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a31      	ldr	r2, [pc, #196]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800523a:	60d3      	str	r3, [r2, #12]
 800523c:	e011      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005242:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005246:	d10c      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	2101      	movs	r1, #1
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f8c8 	bl	80053e4 <RCCEx_PLLSAI1_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005258:	7cfb      	ldrb	r3, [r7, #19]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d028      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800526e:	4b23      	ldr	r3, [pc, #140]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005274:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	491f      	ldr	r1, [pc, #124]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800528c:	d106      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800528e:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	4a1a      	ldr	r2, [pc, #104]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005298:	60d3      	str	r3, [r2, #12]
 800529a:	e011      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052a4:	d10c      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3304      	adds	r3, #4
 80052aa:	2101      	movs	r1, #1
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f899 	bl	80053e4 <RCCEx_PLLSAI1_Config>
 80052b2:	4603      	mov	r3, r0
 80052b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052b6:	7cfb      	ldrb	r3, [r7, #19]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80052bc:	7cfb      	ldrb	r3, [r7, #19]
 80052be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d02b      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052da:	4908      	ldr	r1, [pc, #32]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ea:	d109      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ec:	4b03      	ldr	r3, [pc, #12]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4a02      	ldr	r2, [pc, #8]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052f6:	60d3      	str	r3, [r2, #12]
 80052f8:	e014      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80052fa:	bf00      	nop
 80052fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005308:	d10c      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3304      	adds	r3, #4
 800530e:	2101      	movs	r1, #1
 8005310:	4618      	mov	r0, r3
 8005312:	f000 f867 	bl	80053e4 <RCCEx_PLLSAI1_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800531a:	7cfb      	ldrb	r3, [r7, #19]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005320:	7cfb      	ldrb	r3, [r7, #19]
 8005322:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d02f      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005330:	4b2b      	ldr	r3, [pc, #172]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800533e:	4928      	ldr	r1, [pc, #160]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800534a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800534e:	d10d      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	2102      	movs	r1, #2
 8005356:	4618      	mov	r0, r3
 8005358:	f000 f844 	bl	80053e4 <RCCEx_PLLSAI1_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d014      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005366:	7cfb      	ldrb	r3, [r7, #19]
 8005368:	74bb      	strb	r3, [r7, #18]
 800536a:	e011      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005374:	d10c      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3320      	adds	r3, #32
 800537a:	2102      	movs	r1, #2
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f925 	bl	80055cc <RCCEx_PLLSAI2_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005386:	7cfb      	ldrb	r3, [r7, #19]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800538c:	7cfb      	ldrb	r3, [r7, #19]
 800538e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800539c:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053aa:	490d      	ldr	r1, [pc, #52]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053be:	4b08      	ldr	r3, [pc, #32]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ce:	4904      	ldr	r1, [pc, #16]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40021000 	.word	0x40021000

080053e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053f2:	4b75      	ldr	r3, [pc, #468]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d018      	beq.n	8005430 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053fe:	4b72      	ldr	r3, [pc, #456]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0203 	and.w	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d10d      	bne.n	800542a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
       ||
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005416:	4b6c      	ldr	r3, [pc, #432]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	091b      	lsrs	r3, r3, #4
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
       ||
 8005426:	429a      	cmp	r2, r3
 8005428:	d047      	beq.n	80054ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	73fb      	strb	r3, [r7, #15]
 800542e:	e044      	b.n	80054ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d018      	beq.n	800546a <RCCEx_PLLSAI1_Config+0x86>
 8005438:	2b03      	cmp	r3, #3
 800543a:	d825      	bhi.n	8005488 <RCCEx_PLLSAI1_Config+0xa4>
 800543c:	2b01      	cmp	r3, #1
 800543e:	d002      	beq.n	8005446 <RCCEx_PLLSAI1_Config+0x62>
 8005440:	2b02      	cmp	r3, #2
 8005442:	d009      	beq.n	8005458 <RCCEx_PLLSAI1_Config+0x74>
 8005444:	e020      	b.n	8005488 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005446:	4b60      	ldr	r3, [pc, #384]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d11d      	bne.n	800548e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005456:	e01a      	b.n	800548e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005458:	4b5b      	ldr	r3, [pc, #364]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005460:	2b00      	cmp	r3, #0
 8005462:	d116      	bne.n	8005492 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005468:	e013      	b.n	8005492 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800546a:	4b57      	ldr	r3, [pc, #348]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10f      	bne.n	8005496 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005476:	4b54      	ldr	r3, [pc, #336]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005486:	e006      	b.n	8005496 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
      break;
 800548c:	e004      	b.n	8005498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800548e:	bf00      	nop
 8005490:	e002      	b.n	8005498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005492:	bf00      	nop
 8005494:	e000      	b.n	8005498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005496:	bf00      	nop
    }

    if(status == HAL_OK)
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10d      	bne.n	80054ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800549e:	4b4a      	ldr	r3, [pc, #296]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	430b      	orrs	r3, r1
 80054b4:	4944      	ldr	r1, [pc, #272]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d17d      	bne.n	80055bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054c0:	4b41      	ldr	r3, [pc, #260]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a40      	ldr	r2, [pc, #256]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054cc:	f7fd f97a 	bl	80027c4 <HAL_GetTick>
 80054d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054d2:	e009      	b.n	80054e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054d4:	f7fd f976 	bl	80027c4 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d902      	bls.n	80054e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	73fb      	strb	r3, [r7, #15]
        break;
 80054e6:	e005      	b.n	80054f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054e8:	4b37      	ldr	r3, [pc, #220]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1ef      	bne.n	80054d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d160      	bne.n	80055bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d111      	bne.n	8005524 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005500:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6892      	ldr	r2, [r2, #8]
 8005510:	0211      	lsls	r1, r2, #8
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	68d2      	ldr	r2, [r2, #12]
 8005516:	0912      	lsrs	r2, r2, #4
 8005518:	0452      	lsls	r2, r2, #17
 800551a:	430a      	orrs	r2, r1
 800551c:	492a      	ldr	r1, [pc, #168]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800551e:	4313      	orrs	r3, r2
 8005520:	610b      	str	r3, [r1, #16]
 8005522:	e027      	b.n	8005574 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d112      	bne.n	8005550 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800552a:	4b27      	ldr	r3, [pc, #156]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005532:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6892      	ldr	r2, [r2, #8]
 800553a:	0211      	lsls	r1, r2, #8
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6912      	ldr	r2, [r2, #16]
 8005540:	0852      	lsrs	r2, r2, #1
 8005542:	3a01      	subs	r2, #1
 8005544:	0552      	lsls	r2, r2, #21
 8005546:	430a      	orrs	r2, r1
 8005548:	491f      	ldr	r1, [pc, #124]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800554a:	4313      	orrs	r3, r2
 800554c:	610b      	str	r3, [r1, #16]
 800554e:	e011      	b.n	8005574 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005550:	4b1d      	ldr	r3, [pc, #116]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005558:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6892      	ldr	r2, [r2, #8]
 8005560:	0211      	lsls	r1, r2, #8
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6952      	ldr	r2, [r2, #20]
 8005566:	0852      	lsrs	r2, r2, #1
 8005568:	3a01      	subs	r2, #1
 800556a:	0652      	lsls	r2, r2, #25
 800556c:	430a      	orrs	r2, r1
 800556e:	4916      	ldr	r1, [pc, #88]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005570:	4313      	orrs	r3, r2
 8005572:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005574:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a13      	ldr	r2, [pc, #76]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800557a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800557e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005580:	f7fd f920 	bl	80027c4 <HAL_GetTick>
 8005584:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005586:	e009      	b.n	800559c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005588:	f7fd f91c 	bl	80027c4 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d902      	bls.n	800559c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	73fb      	strb	r3, [r7, #15]
          break;
 800559a:	e005      	b.n	80055a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0ef      	beq.n	8005588 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055ae:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	4904      	ldr	r1, [pc, #16]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40021000 	.word	0x40021000

080055cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055da:	4b6a      	ldr	r3, [pc, #424]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d018      	beq.n	8005618 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80055e6:	4b67      	ldr	r3, [pc, #412]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0203 	and.w	r2, r3, #3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d10d      	bne.n	8005612 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
       ||
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80055fe:	4b61      	ldr	r3, [pc, #388]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	091b      	lsrs	r3, r3, #4
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
       ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d047      	beq.n	80056a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	73fb      	strb	r3, [r7, #15]
 8005616:	e044      	b.n	80056a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b03      	cmp	r3, #3
 800561e:	d018      	beq.n	8005652 <RCCEx_PLLSAI2_Config+0x86>
 8005620:	2b03      	cmp	r3, #3
 8005622:	d825      	bhi.n	8005670 <RCCEx_PLLSAI2_Config+0xa4>
 8005624:	2b01      	cmp	r3, #1
 8005626:	d002      	beq.n	800562e <RCCEx_PLLSAI2_Config+0x62>
 8005628:	2b02      	cmp	r3, #2
 800562a:	d009      	beq.n	8005640 <RCCEx_PLLSAI2_Config+0x74>
 800562c:	e020      	b.n	8005670 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800562e:	4b55      	ldr	r3, [pc, #340]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d11d      	bne.n	8005676 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800563e:	e01a      	b.n	8005676 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005640:	4b50      	ldr	r3, [pc, #320]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005648:	2b00      	cmp	r3, #0
 800564a:	d116      	bne.n	800567a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005650:	e013      	b.n	800567a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005652:	4b4c      	ldr	r3, [pc, #304]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10f      	bne.n	800567e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800565e:	4b49      	ldr	r3, [pc, #292]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800566e:	e006      	b.n	800567e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
      break;
 8005674:	e004      	b.n	8005680 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005676:	bf00      	nop
 8005678:	e002      	b.n	8005680 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800567e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10d      	bne.n	80056a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005686:	4b3f      	ldr	r3, [pc, #252]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	3b01      	subs	r3, #1
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	430b      	orrs	r3, r1
 800569c:	4939      	ldr	r1, [pc, #228]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d167      	bne.n	8005778 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056a8:	4b36      	ldr	r3, [pc, #216]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a35      	ldr	r2, [pc, #212]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b4:	f7fd f886 	bl	80027c4 <HAL_GetTick>
 80056b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056ba:	e009      	b.n	80056d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056bc:	f7fd f882 	bl	80027c4 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d902      	bls.n	80056d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	73fb      	strb	r3, [r7, #15]
        break;
 80056ce:	e005      	b.n	80056dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056d0:	4b2c      	ldr	r3, [pc, #176]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1ef      	bne.n	80056bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d14a      	bne.n	8005778 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d111      	bne.n	800570c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056e8:	4b26      	ldr	r3, [pc, #152]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6892      	ldr	r2, [r2, #8]
 80056f8:	0211      	lsls	r1, r2, #8
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	68d2      	ldr	r2, [r2, #12]
 80056fe:	0912      	lsrs	r2, r2, #4
 8005700:	0452      	lsls	r2, r2, #17
 8005702:	430a      	orrs	r2, r1
 8005704:	491f      	ldr	r1, [pc, #124]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005706:	4313      	orrs	r3, r2
 8005708:	614b      	str	r3, [r1, #20]
 800570a:	e011      	b.n	8005730 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800570c:	4b1d      	ldr	r3, [pc, #116]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005714:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6892      	ldr	r2, [r2, #8]
 800571c:	0211      	lsls	r1, r2, #8
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6912      	ldr	r2, [r2, #16]
 8005722:	0852      	lsrs	r2, r2, #1
 8005724:	3a01      	subs	r2, #1
 8005726:	0652      	lsls	r2, r2, #25
 8005728:	430a      	orrs	r2, r1
 800572a:	4916      	ldr	r1, [pc, #88]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800572c:	4313      	orrs	r3, r2
 800572e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005730:	4b14      	ldr	r3, [pc, #80]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a13      	ldr	r2, [pc, #76]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573c:	f7fd f842 	bl	80027c4 <HAL_GetTick>
 8005740:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005742:	e009      	b.n	8005758 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005744:	f7fd f83e 	bl	80027c4 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d902      	bls.n	8005758 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	73fb      	strb	r3, [r7, #15]
          break;
 8005756:	e005      	b.n	8005764 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005758:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0ef      	beq.n	8005744 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800576a:	4b06      	ldr	r3, [pc, #24]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	4904      	ldr	r1, [pc, #16]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005774:	4313      	orrs	r3, r2
 8005776:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40021000 	.word	0x40021000

08005788 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d079      	beq.n	800588e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fc fe26 	bl	8002400 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0310 	and.w	r3, r3, #16
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d058      	beq.n	800587c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	22ca      	movs	r2, #202	; 0xca
 80057d0:	625a      	str	r2, [r3, #36]	; 0x24
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2253      	movs	r2, #83	; 0x53
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f9c6 	bl	8005b6c <RTC_EnterInitMode>
 80057e0:	4603      	mov	r3, r0
 80057e2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d127      	bne.n	800583a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6812      	ldr	r2, [r2, #0]
 80057f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6899      	ldr	r1, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	68d2      	ldr	r2, [r2, #12]
 8005824:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6919      	ldr	r1, [r3, #16]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	041a      	lsls	r2, r3, #16
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f9ca 	bl	8005bd4 <RTC_ExitInitMode>
 8005840:	4603      	mov	r3, r0
 8005842:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d113      	bne.n	8005872 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0203 	bic.w	r2, r2, #3
 8005858:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	22ff      	movs	r2, #255	; 0xff
 8005878:	625a      	str	r2, [r3, #36]	; 0x24
 800587a:	e001      	b.n	8005880 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800588e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_RTC_SetTime+0x1a>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e08b      	b.n	80059ca <HAL_RTC_SetTime+0x132>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	22ca      	movs	r2, #202	; 0xca
 80058c8:	625a      	str	r2, [r3, #36]	; 0x24
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2253      	movs	r2, #83	; 0x53
 80058d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f94a 	bl	8005b6c <RTC_EnterInitMode>
 80058d8:	4603      	mov	r3, r0
 80058da:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80058dc:	7cfb      	ldrb	r3, [r7, #19]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d163      	bne.n	80059aa <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d126      	bne.n	8005936 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2200      	movs	r2, #0
 80058fa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f000 f9a5 	bl	8005c50 <RTC_ByteToBcd2>
 8005906:	4603      	mov	r3, r0
 8005908:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	785b      	ldrb	r3, [r3, #1]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f99e 	bl	8005c50 <RTC_ByteToBcd2>
 8005914:	4603      	mov	r3, r0
 8005916:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005918:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	789b      	ldrb	r3, [r3, #2]
 800591e:	4618      	mov	r0, r3
 8005920:	f000 f996 	bl	8005c50 <RTC_ByteToBcd2>
 8005924:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005926:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	78db      	ldrb	r3, [r3, #3]
 800592e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	e018      	b.n	8005968 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d102      	bne.n	800594a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2200      	movs	r2, #0
 8005948:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005956:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800595c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	78db      	ldrb	r3, [r3, #3]
 8005962:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005972:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005976:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005986:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6899      	ldr	r1, [r3, #8]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	431a      	orrs	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f917 	bl	8005bd4 <RTC_ExitInitMode>
 80059a6:	4603      	mov	r3, r0
 80059a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	22ff      	movs	r2, #255	; 0xff
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80059b2:	7cfb      	ldrb	r3, [r7, #19]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80059c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd90      	pop	{r4, r7, pc}

080059d2 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b086      	sub	sp, #24
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a00:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a04:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	0c1b      	lsrs	r3, r3, #16
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	0d9b      	lsrs	r3, r3, #22
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d11a      	bne.n	8005a80 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f91e 	bl	8005c90 <RTC_Bcd2ToByte>
 8005a54:	4603      	mov	r3, r0
 8005a56:	461a      	mov	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 f915 	bl	8005c90 <RTC_Bcd2ToByte>
 8005a66:	4603      	mov	r3, r0
 8005a68:	461a      	mov	r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	789b      	ldrb	r3, [r3, #2]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f90c 	bl	8005c90 <RTC_Bcd2ToByte>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b086      	sub	sp, #24
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005aa0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	0c1b      	lsrs	r3, r3, #16
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	0b5b      	lsrs	r3, r3, #13
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d11a      	bne.n	8005b1a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	78db      	ldrb	r3, [r3, #3]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 f8d1 	bl	8005c90 <RTC_Bcd2ToByte>
 8005aee:	4603      	mov	r3, r0
 8005af0:	461a      	mov	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f8c8 	bl	8005c90 <RTC_Bcd2ToByte>
 8005b00:	4603      	mov	r3, r0
 8005b02:	461a      	mov	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	789b      	ldrb	r3, [r3, #2]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 f8bf 	bl	8005c90 <RTC_Bcd2ToByte>
 8005b12:	4603      	mov	r3, r0
 8005b14:	461a      	mov	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0d      	ldr	r2, [pc, #52]	; (8005b68 <HAL_RTC_WaitForSynchro+0x44>)
 8005b32:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005b34:	f7fc fe46 	bl	80027c4 <HAL_GetTick>
 8005b38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b3a:	e009      	b.n	8005b50 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b3c:	f7fc fe42 	bl	80027c4 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b4a:	d901      	bls.n	8005b50 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e007      	b.n	8005b60 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0ee      	beq.n	8005b3c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	0003ff5f 	.word	0x0003ff5f

08005b6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d120      	bne.n	8005bc8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b90:	f7fc fe18 	bl	80027c4 <HAL_GetTick>
 8005b94:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005b96:	e00d      	b.n	8005bb4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b98:	f7fc fe14 	bl	80027c4 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ba6:	d905      	bls.n	8005bb4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2203      	movs	r2, #3
 8005bb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <RTC_EnterInitMode+0x5c>
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d1e7      	bne.n	8005b98 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005be0:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <RTC_ExitInitMode+0x78>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	4a19      	ldr	r2, [pc, #100]	; (8005c4c <RTC_ExitInitMode+0x78>)
 8005be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bea:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005bec:	4b17      	ldr	r3, [pc, #92]	; (8005c4c <RTC_ExitInitMode+0x78>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10c      	bne.n	8005c12 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff ff93 	bl	8005b24 <HAL_RTC_WaitForSynchro>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01e      	beq.n	8005c42 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2203      	movs	r2, #3
 8005c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	73fb      	strb	r3, [r7, #15]
 8005c10:	e017      	b.n	8005c42 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c12:	4b0e      	ldr	r3, [pc, #56]	; (8005c4c <RTC_ExitInitMode+0x78>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	4a0d      	ldr	r2, [pc, #52]	; (8005c4c <RTC_ExitInitMode+0x78>)
 8005c18:	f023 0320 	bic.w	r3, r3, #32
 8005c1c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff ff80 	bl	8005b24 <HAL_RTC_WaitForSynchro>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c36:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <RTC_ExitInitMode+0x78>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	4a04      	ldr	r2, [pc, #16]	; (8005c4c <RTC_ExitInitMode+0x78>)
 8005c3c:	f043 0320 	orr.w	r3, r3, #32
 8005c40:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40002800 	.word	0x40002800

08005c50 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005c62:	e005      	b.n	8005c70 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005c6a:	7afb      	ldrb	r3, [r7, #11]
 8005c6c:	3b0a      	subs	r3, #10
 8005c6e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005c70:	7afb      	ldrb	r3, [r7, #11]
 8005c72:	2b09      	cmp	r3, #9
 8005c74:	d8f6      	bhi.n	8005c64 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	b2db      	uxtb	r3, r3
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	4603      	mov	r3, r0
 8005c98:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	0092      	lsls	r2, r2, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	b2db      	uxtb	r3, r3
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <srand>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <srand+0x44>)
 8005cc8:	681d      	ldr	r5, [r3, #0]
 8005cca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005ccc:	4604      	mov	r4, r0
 8005cce:	b9b3      	cbnz	r3, 8005cfe <srand+0x3a>
 8005cd0:	2018      	movs	r0, #24
 8005cd2:	f000 fab1 	bl	8006238 <malloc>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	6328      	str	r0, [r5, #48]	; 0x30
 8005cda:	b920      	cbnz	r0, 8005ce6 <srand+0x22>
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <srand+0x48>)
 8005cde:	480c      	ldr	r0, [pc, #48]	; (8005d10 <srand+0x4c>)
 8005ce0:	2146      	movs	r1, #70	; 0x46
 8005ce2:	f000 fa3f 	bl	8006164 <__assert_func>
 8005ce6:	490b      	ldr	r1, [pc, #44]	; (8005d14 <srand+0x50>)
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <srand+0x54>)
 8005cea:	e9c0 1300 	strd	r1, r3, [r0]
 8005cee:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <srand+0x58>)
 8005cf0:	6083      	str	r3, [r0, #8]
 8005cf2:	230b      	movs	r3, #11
 8005cf4:	8183      	strh	r3, [r0, #12]
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005cfe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005d00:	2200      	movs	r2, #0
 8005d02:	611c      	str	r4, [r3, #16]
 8005d04:	615a      	str	r2, [r3, #20]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	20000064 	.word	0x20000064
 8005d0c:	080072bc 	.word	0x080072bc
 8005d10:	080072d3 	.word	0x080072d3
 8005d14:	abcd330e 	.word	0xabcd330e
 8005d18:	e66d1234 	.word	0xe66d1234
 8005d1c:	0005deec 	.word	0x0005deec

08005d20 <rand>:
 8005d20:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <rand+0x5c>)
 8005d22:	b510      	push	{r4, lr}
 8005d24:	681c      	ldr	r4, [r3, #0]
 8005d26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d28:	b9b3      	cbnz	r3, 8005d58 <rand+0x38>
 8005d2a:	2018      	movs	r0, #24
 8005d2c:	f000 fa84 	bl	8006238 <malloc>
 8005d30:	4602      	mov	r2, r0
 8005d32:	6320      	str	r0, [r4, #48]	; 0x30
 8005d34:	b920      	cbnz	r0, 8005d40 <rand+0x20>
 8005d36:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <rand+0x60>)
 8005d38:	4812      	ldr	r0, [pc, #72]	; (8005d84 <rand+0x64>)
 8005d3a:	2152      	movs	r1, #82	; 0x52
 8005d3c:	f000 fa12 	bl	8006164 <__assert_func>
 8005d40:	4911      	ldr	r1, [pc, #68]	; (8005d88 <rand+0x68>)
 8005d42:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <rand+0x6c>)
 8005d44:	e9c0 1300 	strd	r1, r3, [r0]
 8005d48:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <rand+0x70>)
 8005d4a:	6083      	str	r3, [r0, #8]
 8005d4c:	230b      	movs	r3, #11
 8005d4e:	8183      	strh	r3, [r0, #12]
 8005d50:	2100      	movs	r1, #0
 8005d52:	2001      	movs	r0, #1
 8005d54:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005d58:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005d5a:	480e      	ldr	r0, [pc, #56]	; (8005d94 <rand+0x74>)
 8005d5c:	690b      	ldr	r3, [r1, #16]
 8005d5e:	694c      	ldr	r4, [r1, #20]
 8005d60:	4a0d      	ldr	r2, [pc, #52]	; (8005d98 <rand+0x78>)
 8005d62:	4358      	muls	r0, r3
 8005d64:	fb02 0004 	mla	r0, r2, r4, r0
 8005d68:	fba3 3202 	umull	r3, r2, r3, r2
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	eb40 0002 	adc.w	r0, r0, r2
 8005d72:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005d76:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d7a:	bd10      	pop	{r4, pc}
 8005d7c:	20000064 	.word	0x20000064
 8005d80:	080072bc 	.word	0x080072bc
 8005d84:	080072d3 	.word	0x080072d3
 8005d88:	abcd330e 	.word	0xabcd330e
 8005d8c:	e66d1234 	.word	0xe66d1234
 8005d90:	0005deec 	.word	0x0005deec
 8005d94:	5851f42d 	.word	0x5851f42d
 8005d98:	4c957f2d 	.word	0x4c957f2d

08005d9c <std>:
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	4604      	mov	r4, r0
 8005da2:	e9c0 3300 	strd	r3, r3, [r0]
 8005da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005daa:	6083      	str	r3, [r0, #8]
 8005dac:	8181      	strh	r1, [r0, #12]
 8005dae:	6643      	str	r3, [r0, #100]	; 0x64
 8005db0:	81c2      	strh	r2, [r0, #14]
 8005db2:	6183      	str	r3, [r0, #24]
 8005db4:	4619      	mov	r1, r3
 8005db6:	2208      	movs	r2, #8
 8005db8:	305c      	adds	r0, #92	; 0x5c
 8005dba:	f000 f914 	bl	8005fe6 <memset>
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <std+0x58>)
 8005dc0:	6263      	str	r3, [r4, #36]	; 0x24
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <std+0x5c>)
 8005dc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <std+0x60>)
 8005dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dca:	4b0d      	ldr	r3, [pc, #52]	; (8005e00 <std+0x64>)
 8005dcc:	6323      	str	r3, [r4, #48]	; 0x30
 8005dce:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <std+0x68>)
 8005dd0:	6224      	str	r4, [r4, #32]
 8005dd2:	429c      	cmp	r4, r3
 8005dd4:	d006      	beq.n	8005de4 <std+0x48>
 8005dd6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005dda:	4294      	cmp	r4, r2
 8005ddc:	d002      	beq.n	8005de4 <std+0x48>
 8005dde:	33d0      	adds	r3, #208	; 0xd0
 8005de0:	429c      	cmp	r4, r3
 8005de2:	d105      	bne.n	8005df0 <std+0x54>
 8005de4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dec:	f000 b9ae 	b.w	800614c <__retarget_lock_init_recursive>
 8005df0:	bd10      	pop	{r4, pc}
 8005df2:	bf00      	nop
 8005df4:	08005f61 	.word	0x08005f61
 8005df8:	08005f83 	.word	0x08005f83
 8005dfc:	08005fbb 	.word	0x08005fbb
 8005e00:	08005fdf 	.word	0x08005fdf
 8005e04:	20000130 	.word	0x20000130

08005e08 <stdio_exit_handler>:
 8005e08:	4a02      	ldr	r2, [pc, #8]	; (8005e14 <stdio_exit_handler+0xc>)
 8005e0a:	4903      	ldr	r1, [pc, #12]	; (8005e18 <stdio_exit_handler+0x10>)
 8005e0c:	4803      	ldr	r0, [pc, #12]	; (8005e1c <stdio_exit_handler+0x14>)
 8005e0e:	f000 b869 	b.w	8005ee4 <_fwalk_sglue>
 8005e12:	bf00      	nop
 8005e14:	2000000c 	.word	0x2000000c
 8005e18:	08006a7d 	.word	0x08006a7d
 8005e1c:	20000018 	.word	0x20000018

08005e20 <cleanup_stdio>:
 8005e20:	6841      	ldr	r1, [r0, #4]
 8005e22:	4b0c      	ldr	r3, [pc, #48]	; (8005e54 <cleanup_stdio+0x34>)
 8005e24:	4299      	cmp	r1, r3
 8005e26:	b510      	push	{r4, lr}
 8005e28:	4604      	mov	r4, r0
 8005e2a:	d001      	beq.n	8005e30 <cleanup_stdio+0x10>
 8005e2c:	f000 fe26 	bl	8006a7c <_fflush_r>
 8005e30:	68a1      	ldr	r1, [r4, #8]
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <cleanup_stdio+0x38>)
 8005e34:	4299      	cmp	r1, r3
 8005e36:	d002      	beq.n	8005e3e <cleanup_stdio+0x1e>
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 fe1f 	bl	8006a7c <_fflush_r>
 8005e3e:	68e1      	ldr	r1, [r4, #12]
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <cleanup_stdio+0x3c>)
 8005e42:	4299      	cmp	r1, r3
 8005e44:	d004      	beq.n	8005e50 <cleanup_stdio+0x30>
 8005e46:	4620      	mov	r0, r4
 8005e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e4c:	f000 be16 	b.w	8006a7c <_fflush_r>
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	bf00      	nop
 8005e54:	20000130 	.word	0x20000130
 8005e58:	20000198 	.word	0x20000198
 8005e5c:	20000200 	.word	0x20000200

08005e60 <global_stdio_init.part.0>:
 8005e60:	b510      	push	{r4, lr}
 8005e62:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <global_stdio_init.part.0+0x30>)
 8005e64:	4c0b      	ldr	r4, [pc, #44]	; (8005e94 <global_stdio_init.part.0+0x34>)
 8005e66:	4a0c      	ldr	r2, [pc, #48]	; (8005e98 <global_stdio_init.part.0+0x38>)
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2104      	movs	r1, #4
 8005e70:	f7ff ff94 	bl	8005d9c <std>
 8005e74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e78:	2201      	movs	r2, #1
 8005e7a:	2109      	movs	r1, #9
 8005e7c:	f7ff ff8e 	bl	8005d9c <std>
 8005e80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e84:	2202      	movs	r2, #2
 8005e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e8a:	2112      	movs	r1, #18
 8005e8c:	f7ff bf86 	b.w	8005d9c <std>
 8005e90:	20000268 	.word	0x20000268
 8005e94:	20000130 	.word	0x20000130
 8005e98:	08005e09 	.word	0x08005e09

08005e9c <__sfp_lock_acquire>:
 8005e9c:	4801      	ldr	r0, [pc, #4]	; (8005ea4 <__sfp_lock_acquire+0x8>)
 8005e9e:	f000 b956 	b.w	800614e <__retarget_lock_acquire_recursive>
 8005ea2:	bf00      	nop
 8005ea4:	20000271 	.word	0x20000271

08005ea8 <__sfp_lock_release>:
 8005ea8:	4801      	ldr	r0, [pc, #4]	; (8005eb0 <__sfp_lock_release+0x8>)
 8005eaa:	f000 b951 	b.w	8006150 <__retarget_lock_release_recursive>
 8005eae:	bf00      	nop
 8005eb0:	20000271 	.word	0x20000271

08005eb4 <__sinit>:
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	f7ff fff0 	bl	8005e9c <__sfp_lock_acquire>
 8005ebc:	6a23      	ldr	r3, [r4, #32]
 8005ebe:	b11b      	cbz	r3, 8005ec8 <__sinit+0x14>
 8005ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ec4:	f7ff bff0 	b.w	8005ea8 <__sfp_lock_release>
 8005ec8:	4b04      	ldr	r3, [pc, #16]	; (8005edc <__sinit+0x28>)
 8005eca:	6223      	str	r3, [r4, #32]
 8005ecc:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <__sinit+0x2c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1f5      	bne.n	8005ec0 <__sinit+0xc>
 8005ed4:	f7ff ffc4 	bl	8005e60 <global_stdio_init.part.0>
 8005ed8:	e7f2      	b.n	8005ec0 <__sinit+0xc>
 8005eda:	bf00      	nop
 8005edc:	08005e21 	.word	0x08005e21
 8005ee0:	20000268 	.word	0x20000268

08005ee4 <_fwalk_sglue>:
 8005ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ee8:	4607      	mov	r7, r0
 8005eea:	4688      	mov	r8, r1
 8005eec:	4614      	mov	r4, r2
 8005eee:	2600      	movs	r6, #0
 8005ef0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ef4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ef8:	d505      	bpl.n	8005f06 <_fwalk_sglue+0x22>
 8005efa:	6824      	ldr	r4, [r4, #0]
 8005efc:	2c00      	cmp	r4, #0
 8005efe:	d1f7      	bne.n	8005ef0 <_fwalk_sglue+0xc>
 8005f00:	4630      	mov	r0, r6
 8005f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f06:	89ab      	ldrh	r3, [r5, #12]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d907      	bls.n	8005f1c <_fwalk_sglue+0x38>
 8005f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f10:	3301      	adds	r3, #1
 8005f12:	d003      	beq.n	8005f1c <_fwalk_sglue+0x38>
 8005f14:	4629      	mov	r1, r5
 8005f16:	4638      	mov	r0, r7
 8005f18:	47c0      	blx	r8
 8005f1a:	4306      	orrs	r6, r0
 8005f1c:	3568      	adds	r5, #104	; 0x68
 8005f1e:	e7e9      	b.n	8005ef4 <_fwalk_sglue+0x10>

08005f20 <siprintf>:
 8005f20:	b40e      	push	{r1, r2, r3}
 8005f22:	b500      	push	{lr}
 8005f24:	b09c      	sub	sp, #112	; 0x70
 8005f26:	ab1d      	add	r3, sp, #116	; 0x74
 8005f28:	9002      	str	r0, [sp, #8]
 8005f2a:	9006      	str	r0, [sp, #24]
 8005f2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f30:	4809      	ldr	r0, [pc, #36]	; (8005f58 <siprintf+0x38>)
 8005f32:	9107      	str	r1, [sp, #28]
 8005f34:	9104      	str	r1, [sp, #16]
 8005f36:	4909      	ldr	r1, [pc, #36]	; (8005f5c <siprintf+0x3c>)
 8005f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f3c:	9105      	str	r1, [sp, #20]
 8005f3e:	6800      	ldr	r0, [r0, #0]
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	a902      	add	r1, sp, #8
 8005f44:	f000 fa86 	bl	8006454 <_svfiprintf_r>
 8005f48:	9b02      	ldr	r3, [sp, #8]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	b01c      	add	sp, #112	; 0x70
 8005f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f54:	b003      	add	sp, #12
 8005f56:	4770      	bx	lr
 8005f58:	20000064 	.word	0x20000064
 8005f5c:	ffff0208 	.word	0xffff0208

08005f60 <__sread>:
 8005f60:	b510      	push	{r4, lr}
 8005f62:	460c      	mov	r4, r1
 8005f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f68:	f000 f8a2 	bl	80060b0 <_read_r>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	bfab      	itete	ge
 8005f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f72:	89a3      	ldrhlt	r3, [r4, #12]
 8005f74:	181b      	addge	r3, r3, r0
 8005f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f7a:	bfac      	ite	ge
 8005f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f7e:	81a3      	strhlt	r3, [r4, #12]
 8005f80:	bd10      	pop	{r4, pc}

08005f82 <__swrite>:
 8005f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f86:	461f      	mov	r7, r3
 8005f88:	898b      	ldrh	r3, [r1, #12]
 8005f8a:	05db      	lsls	r3, r3, #23
 8005f8c:	4605      	mov	r5, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	4616      	mov	r6, r2
 8005f92:	d505      	bpl.n	8005fa0 <__swrite+0x1e>
 8005f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f98:	2302      	movs	r3, #2
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f000 f876 	bl	800608c <_lseek_r>
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	4632      	mov	r2, r6
 8005fae:	463b      	mov	r3, r7
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb6:	f000 b88d 	b.w	80060d4 <_write_r>

08005fba <__sseek>:
 8005fba:	b510      	push	{r4, lr}
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc2:	f000 f863 	bl	800608c <_lseek_r>
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	bf15      	itete	ne
 8005fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fd6:	81a3      	strheq	r3, [r4, #12]
 8005fd8:	bf18      	it	ne
 8005fda:	81a3      	strhne	r3, [r4, #12]
 8005fdc:	bd10      	pop	{r4, pc}

08005fde <__sclose>:
 8005fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe2:	f000 b831 	b.w	8006048 <_close_r>

08005fe6 <memset>:
 8005fe6:	4402      	add	r2, r0
 8005fe8:	4603      	mov	r3, r0
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d100      	bne.n	8005ff0 <memset+0xa>
 8005fee:	4770      	bx	lr
 8005ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8005ff4:	e7f9      	b.n	8005fea <memset+0x4>

08005ff6 <strcat>:
 8005ff6:	b510      	push	{r4, lr}
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	7814      	ldrb	r4, [r2, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	3201      	adds	r2, #1
 8006000:	2c00      	cmp	r4, #0
 8006002:	d1fa      	bne.n	8005ffa <strcat+0x4>
 8006004:	3b01      	subs	r3, #1
 8006006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800600a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800600e:	2a00      	cmp	r2, #0
 8006010:	d1f9      	bne.n	8006006 <strcat+0x10>
 8006012:	bd10      	pop	{r4, pc}

08006014 <time>:
 8006014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006016:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <time+0x30>)
 8006018:	2200      	movs	r2, #0
 800601a:	4669      	mov	r1, sp
 800601c:	4604      	mov	r4, r0
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	f000 f822 	bl	8006068 <_gettimeofday_r>
 8006024:	2800      	cmp	r0, #0
 8006026:	bfbe      	ittt	lt
 8006028:	f04f 32ff 	movlt.w	r2, #4294967295
 800602c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006030:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006034:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006038:	b10c      	cbz	r4, 800603e <time+0x2a>
 800603a:	e9c4 0100 	strd	r0, r1, [r4]
 800603e:	b004      	add	sp, #16
 8006040:	bd10      	pop	{r4, pc}
 8006042:	bf00      	nop
 8006044:	20000064 	.word	0x20000064

08006048 <_close_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4d06      	ldr	r5, [pc, #24]	; (8006064 <_close_r+0x1c>)
 800604c:	2300      	movs	r3, #0
 800604e:	4604      	mov	r4, r0
 8006050:	4608      	mov	r0, r1
 8006052:	602b      	str	r3, [r5, #0]
 8006054:	f7fc faa7 	bl	80025a6 <_close>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d102      	bne.n	8006062 <_close_r+0x1a>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	b103      	cbz	r3, 8006062 <_close_r+0x1a>
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	2000026c 	.word	0x2000026c

08006068 <_gettimeofday_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4d07      	ldr	r5, [pc, #28]	; (8006088 <_gettimeofday_r+0x20>)
 800606c:	2300      	movs	r3, #0
 800606e:	4604      	mov	r4, r0
 8006070:	4608      	mov	r0, r1
 8006072:	4611      	mov	r1, r2
 8006074:	602b      	str	r3, [r5, #0]
 8006076:	f001 f853 	bl	8007120 <_gettimeofday>
 800607a:	1c43      	adds	r3, r0, #1
 800607c:	d102      	bne.n	8006084 <_gettimeofday_r+0x1c>
 800607e:	682b      	ldr	r3, [r5, #0]
 8006080:	b103      	cbz	r3, 8006084 <_gettimeofday_r+0x1c>
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	bd38      	pop	{r3, r4, r5, pc}
 8006086:	bf00      	nop
 8006088:	2000026c 	.word	0x2000026c

0800608c <_lseek_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4d07      	ldr	r5, [pc, #28]	; (80060ac <_lseek_r+0x20>)
 8006090:	4604      	mov	r4, r0
 8006092:	4608      	mov	r0, r1
 8006094:	4611      	mov	r1, r2
 8006096:	2200      	movs	r2, #0
 8006098:	602a      	str	r2, [r5, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	f7fc faaa 	bl	80025f4 <_lseek>
 80060a0:	1c43      	adds	r3, r0, #1
 80060a2:	d102      	bne.n	80060aa <_lseek_r+0x1e>
 80060a4:	682b      	ldr	r3, [r5, #0]
 80060a6:	b103      	cbz	r3, 80060aa <_lseek_r+0x1e>
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	bd38      	pop	{r3, r4, r5, pc}
 80060ac:	2000026c 	.word	0x2000026c

080060b0 <_read_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d07      	ldr	r5, [pc, #28]	; (80060d0 <_read_r+0x20>)
 80060b4:	4604      	mov	r4, r0
 80060b6:	4608      	mov	r0, r1
 80060b8:	4611      	mov	r1, r2
 80060ba:	2200      	movs	r2, #0
 80060bc:	602a      	str	r2, [r5, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	f7fc fa38 	bl	8002534 <_read>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d102      	bne.n	80060ce <_read_r+0x1e>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	b103      	cbz	r3, 80060ce <_read_r+0x1e>
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	2000026c 	.word	0x2000026c

080060d4 <_write_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4d07      	ldr	r5, [pc, #28]	; (80060f4 <_write_r+0x20>)
 80060d8:	4604      	mov	r4, r0
 80060da:	4608      	mov	r0, r1
 80060dc:	4611      	mov	r1, r2
 80060de:	2200      	movs	r2, #0
 80060e0:	602a      	str	r2, [r5, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f7fc fa43 	bl	800256e <_write>
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d102      	bne.n	80060f2 <_write_r+0x1e>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	b103      	cbz	r3, 80060f2 <_write_r+0x1e>
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	bd38      	pop	{r3, r4, r5, pc}
 80060f4:	2000026c 	.word	0x2000026c

080060f8 <__errno>:
 80060f8:	4b01      	ldr	r3, [pc, #4]	; (8006100 <__errno+0x8>)
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	20000064 	.word	0x20000064

08006104 <__libc_init_array>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	4d0d      	ldr	r5, [pc, #52]	; (800613c <__libc_init_array+0x38>)
 8006108:	4c0d      	ldr	r4, [pc, #52]	; (8006140 <__libc_init_array+0x3c>)
 800610a:	1b64      	subs	r4, r4, r5
 800610c:	10a4      	asrs	r4, r4, #2
 800610e:	2600      	movs	r6, #0
 8006110:	42a6      	cmp	r6, r4
 8006112:	d109      	bne.n	8006128 <__libc_init_array+0x24>
 8006114:	4d0b      	ldr	r5, [pc, #44]	; (8006144 <__libc_init_array+0x40>)
 8006116:	4c0c      	ldr	r4, [pc, #48]	; (8006148 <__libc_init_array+0x44>)
 8006118:	f001 f80a 	bl	8007130 <_init>
 800611c:	1b64      	subs	r4, r4, r5
 800611e:	10a4      	asrs	r4, r4, #2
 8006120:	2600      	movs	r6, #0
 8006122:	42a6      	cmp	r6, r4
 8006124:	d105      	bne.n	8006132 <__libc_init_array+0x2e>
 8006126:	bd70      	pop	{r4, r5, r6, pc}
 8006128:	f855 3b04 	ldr.w	r3, [r5], #4
 800612c:	4798      	blx	r3
 800612e:	3601      	adds	r6, #1
 8006130:	e7ee      	b.n	8006110 <__libc_init_array+0xc>
 8006132:	f855 3b04 	ldr.w	r3, [r5], #4
 8006136:	4798      	blx	r3
 8006138:	3601      	adds	r6, #1
 800613a:	e7f2      	b.n	8006122 <__libc_init_array+0x1e>
 800613c:	0800739c 	.word	0x0800739c
 8006140:	0800739c 	.word	0x0800739c
 8006144:	0800739c 	.word	0x0800739c
 8006148:	080073a0 	.word	0x080073a0

0800614c <__retarget_lock_init_recursive>:
 800614c:	4770      	bx	lr

0800614e <__retarget_lock_acquire_recursive>:
 800614e:	4770      	bx	lr

08006150 <__retarget_lock_release_recursive>:
 8006150:	4770      	bx	lr

08006152 <strcpy>:
 8006152:	4603      	mov	r3, r0
 8006154:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006158:	f803 2b01 	strb.w	r2, [r3], #1
 800615c:	2a00      	cmp	r2, #0
 800615e:	d1f9      	bne.n	8006154 <strcpy+0x2>
 8006160:	4770      	bx	lr
	...

08006164 <__assert_func>:
 8006164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006166:	4614      	mov	r4, r2
 8006168:	461a      	mov	r2, r3
 800616a:	4b09      	ldr	r3, [pc, #36]	; (8006190 <__assert_func+0x2c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4605      	mov	r5, r0
 8006170:	68d8      	ldr	r0, [r3, #12]
 8006172:	b14c      	cbz	r4, 8006188 <__assert_func+0x24>
 8006174:	4b07      	ldr	r3, [pc, #28]	; (8006194 <__assert_func+0x30>)
 8006176:	9100      	str	r1, [sp, #0]
 8006178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800617c:	4906      	ldr	r1, [pc, #24]	; (8006198 <__assert_func+0x34>)
 800617e:	462b      	mov	r3, r5
 8006180:	f000 fca4 	bl	8006acc <fiprintf>
 8006184:	f000 fcec 	bl	8006b60 <abort>
 8006188:	4b04      	ldr	r3, [pc, #16]	; (800619c <__assert_func+0x38>)
 800618a:	461c      	mov	r4, r3
 800618c:	e7f3      	b.n	8006176 <__assert_func+0x12>
 800618e:	bf00      	nop
 8006190:	20000064 	.word	0x20000064
 8006194:	0800732b 	.word	0x0800732b
 8006198:	08007338 	.word	0x08007338
 800619c:	08007366 	.word	0x08007366

080061a0 <_free_r>:
 80061a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061a2:	2900      	cmp	r1, #0
 80061a4:	d044      	beq.n	8006230 <_free_r+0x90>
 80061a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061aa:	9001      	str	r0, [sp, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f1a1 0404 	sub.w	r4, r1, #4
 80061b2:	bfb8      	it	lt
 80061b4:	18e4      	addlt	r4, r4, r3
 80061b6:	f000 f8e7 	bl	8006388 <__malloc_lock>
 80061ba:	4a1e      	ldr	r2, [pc, #120]	; (8006234 <_free_r+0x94>)
 80061bc:	9801      	ldr	r0, [sp, #4]
 80061be:	6813      	ldr	r3, [r2, #0]
 80061c0:	b933      	cbnz	r3, 80061d0 <_free_r+0x30>
 80061c2:	6063      	str	r3, [r4, #4]
 80061c4:	6014      	str	r4, [r2, #0]
 80061c6:	b003      	add	sp, #12
 80061c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061cc:	f000 b8e2 	b.w	8006394 <__malloc_unlock>
 80061d0:	42a3      	cmp	r3, r4
 80061d2:	d908      	bls.n	80061e6 <_free_r+0x46>
 80061d4:	6825      	ldr	r5, [r4, #0]
 80061d6:	1961      	adds	r1, r4, r5
 80061d8:	428b      	cmp	r3, r1
 80061da:	bf01      	itttt	eq
 80061dc:	6819      	ldreq	r1, [r3, #0]
 80061de:	685b      	ldreq	r3, [r3, #4]
 80061e0:	1949      	addeq	r1, r1, r5
 80061e2:	6021      	streq	r1, [r4, #0]
 80061e4:	e7ed      	b.n	80061c2 <_free_r+0x22>
 80061e6:	461a      	mov	r2, r3
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	b10b      	cbz	r3, 80061f0 <_free_r+0x50>
 80061ec:	42a3      	cmp	r3, r4
 80061ee:	d9fa      	bls.n	80061e6 <_free_r+0x46>
 80061f0:	6811      	ldr	r1, [r2, #0]
 80061f2:	1855      	adds	r5, r2, r1
 80061f4:	42a5      	cmp	r5, r4
 80061f6:	d10b      	bne.n	8006210 <_free_r+0x70>
 80061f8:	6824      	ldr	r4, [r4, #0]
 80061fa:	4421      	add	r1, r4
 80061fc:	1854      	adds	r4, r2, r1
 80061fe:	42a3      	cmp	r3, r4
 8006200:	6011      	str	r1, [r2, #0]
 8006202:	d1e0      	bne.n	80061c6 <_free_r+0x26>
 8006204:	681c      	ldr	r4, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	6053      	str	r3, [r2, #4]
 800620a:	440c      	add	r4, r1
 800620c:	6014      	str	r4, [r2, #0]
 800620e:	e7da      	b.n	80061c6 <_free_r+0x26>
 8006210:	d902      	bls.n	8006218 <_free_r+0x78>
 8006212:	230c      	movs	r3, #12
 8006214:	6003      	str	r3, [r0, #0]
 8006216:	e7d6      	b.n	80061c6 <_free_r+0x26>
 8006218:	6825      	ldr	r5, [r4, #0]
 800621a:	1961      	adds	r1, r4, r5
 800621c:	428b      	cmp	r3, r1
 800621e:	bf04      	itt	eq
 8006220:	6819      	ldreq	r1, [r3, #0]
 8006222:	685b      	ldreq	r3, [r3, #4]
 8006224:	6063      	str	r3, [r4, #4]
 8006226:	bf04      	itt	eq
 8006228:	1949      	addeq	r1, r1, r5
 800622a:	6021      	streq	r1, [r4, #0]
 800622c:	6054      	str	r4, [r2, #4]
 800622e:	e7ca      	b.n	80061c6 <_free_r+0x26>
 8006230:	b003      	add	sp, #12
 8006232:	bd30      	pop	{r4, r5, pc}
 8006234:	20000274 	.word	0x20000274

08006238 <malloc>:
 8006238:	4b02      	ldr	r3, [pc, #8]	; (8006244 <malloc+0xc>)
 800623a:	4601      	mov	r1, r0
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	f000 b823 	b.w	8006288 <_malloc_r>
 8006242:	bf00      	nop
 8006244:	20000064 	.word	0x20000064

08006248 <sbrk_aligned>:
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	4e0e      	ldr	r6, [pc, #56]	; (8006284 <sbrk_aligned+0x3c>)
 800624c:	460c      	mov	r4, r1
 800624e:	6831      	ldr	r1, [r6, #0]
 8006250:	4605      	mov	r5, r0
 8006252:	b911      	cbnz	r1, 800625a <sbrk_aligned+0x12>
 8006254:	f000 fc66 	bl	8006b24 <_sbrk_r>
 8006258:	6030      	str	r0, [r6, #0]
 800625a:	4621      	mov	r1, r4
 800625c:	4628      	mov	r0, r5
 800625e:	f000 fc61 	bl	8006b24 <_sbrk_r>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d00a      	beq.n	800627c <sbrk_aligned+0x34>
 8006266:	1cc4      	adds	r4, r0, #3
 8006268:	f024 0403 	bic.w	r4, r4, #3
 800626c:	42a0      	cmp	r0, r4
 800626e:	d007      	beq.n	8006280 <sbrk_aligned+0x38>
 8006270:	1a21      	subs	r1, r4, r0
 8006272:	4628      	mov	r0, r5
 8006274:	f000 fc56 	bl	8006b24 <_sbrk_r>
 8006278:	3001      	adds	r0, #1
 800627a:	d101      	bne.n	8006280 <sbrk_aligned+0x38>
 800627c:	f04f 34ff 	mov.w	r4, #4294967295
 8006280:	4620      	mov	r0, r4
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	20000278 	.word	0x20000278

08006288 <_malloc_r>:
 8006288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800628c:	1ccd      	adds	r5, r1, #3
 800628e:	f025 0503 	bic.w	r5, r5, #3
 8006292:	3508      	adds	r5, #8
 8006294:	2d0c      	cmp	r5, #12
 8006296:	bf38      	it	cc
 8006298:	250c      	movcc	r5, #12
 800629a:	2d00      	cmp	r5, #0
 800629c:	4607      	mov	r7, r0
 800629e:	db01      	blt.n	80062a4 <_malloc_r+0x1c>
 80062a0:	42a9      	cmp	r1, r5
 80062a2:	d905      	bls.n	80062b0 <_malloc_r+0x28>
 80062a4:	230c      	movs	r3, #12
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	2600      	movs	r6, #0
 80062aa:	4630      	mov	r0, r6
 80062ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006384 <_malloc_r+0xfc>
 80062b4:	f000 f868 	bl	8006388 <__malloc_lock>
 80062b8:	f8d8 3000 	ldr.w	r3, [r8]
 80062bc:	461c      	mov	r4, r3
 80062be:	bb5c      	cbnz	r4, 8006318 <_malloc_r+0x90>
 80062c0:	4629      	mov	r1, r5
 80062c2:	4638      	mov	r0, r7
 80062c4:	f7ff ffc0 	bl	8006248 <sbrk_aligned>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	4604      	mov	r4, r0
 80062cc:	d155      	bne.n	800637a <_malloc_r+0xf2>
 80062ce:	f8d8 4000 	ldr.w	r4, [r8]
 80062d2:	4626      	mov	r6, r4
 80062d4:	2e00      	cmp	r6, #0
 80062d6:	d145      	bne.n	8006364 <_malloc_r+0xdc>
 80062d8:	2c00      	cmp	r4, #0
 80062da:	d048      	beq.n	800636e <_malloc_r+0xe6>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	4631      	mov	r1, r6
 80062e0:	4638      	mov	r0, r7
 80062e2:	eb04 0903 	add.w	r9, r4, r3
 80062e6:	f000 fc1d 	bl	8006b24 <_sbrk_r>
 80062ea:	4581      	cmp	r9, r0
 80062ec:	d13f      	bne.n	800636e <_malloc_r+0xe6>
 80062ee:	6821      	ldr	r1, [r4, #0]
 80062f0:	1a6d      	subs	r5, r5, r1
 80062f2:	4629      	mov	r1, r5
 80062f4:	4638      	mov	r0, r7
 80062f6:	f7ff ffa7 	bl	8006248 <sbrk_aligned>
 80062fa:	3001      	adds	r0, #1
 80062fc:	d037      	beq.n	800636e <_malloc_r+0xe6>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	442b      	add	r3, r5
 8006302:	6023      	str	r3, [r4, #0]
 8006304:	f8d8 3000 	ldr.w	r3, [r8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d038      	beq.n	800637e <_malloc_r+0xf6>
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	42a2      	cmp	r2, r4
 8006310:	d12b      	bne.n	800636a <_malloc_r+0xe2>
 8006312:	2200      	movs	r2, #0
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	e00f      	b.n	8006338 <_malloc_r+0xb0>
 8006318:	6822      	ldr	r2, [r4, #0]
 800631a:	1b52      	subs	r2, r2, r5
 800631c:	d41f      	bmi.n	800635e <_malloc_r+0xd6>
 800631e:	2a0b      	cmp	r2, #11
 8006320:	d917      	bls.n	8006352 <_malloc_r+0xca>
 8006322:	1961      	adds	r1, r4, r5
 8006324:	42a3      	cmp	r3, r4
 8006326:	6025      	str	r5, [r4, #0]
 8006328:	bf18      	it	ne
 800632a:	6059      	strne	r1, [r3, #4]
 800632c:	6863      	ldr	r3, [r4, #4]
 800632e:	bf08      	it	eq
 8006330:	f8c8 1000 	streq.w	r1, [r8]
 8006334:	5162      	str	r2, [r4, r5]
 8006336:	604b      	str	r3, [r1, #4]
 8006338:	4638      	mov	r0, r7
 800633a:	f104 060b 	add.w	r6, r4, #11
 800633e:	f000 f829 	bl	8006394 <__malloc_unlock>
 8006342:	f026 0607 	bic.w	r6, r6, #7
 8006346:	1d23      	adds	r3, r4, #4
 8006348:	1af2      	subs	r2, r6, r3
 800634a:	d0ae      	beq.n	80062aa <_malloc_r+0x22>
 800634c:	1b9b      	subs	r3, r3, r6
 800634e:	50a3      	str	r3, [r4, r2]
 8006350:	e7ab      	b.n	80062aa <_malloc_r+0x22>
 8006352:	42a3      	cmp	r3, r4
 8006354:	6862      	ldr	r2, [r4, #4]
 8006356:	d1dd      	bne.n	8006314 <_malloc_r+0x8c>
 8006358:	f8c8 2000 	str.w	r2, [r8]
 800635c:	e7ec      	b.n	8006338 <_malloc_r+0xb0>
 800635e:	4623      	mov	r3, r4
 8006360:	6864      	ldr	r4, [r4, #4]
 8006362:	e7ac      	b.n	80062be <_malloc_r+0x36>
 8006364:	4634      	mov	r4, r6
 8006366:	6876      	ldr	r6, [r6, #4]
 8006368:	e7b4      	b.n	80062d4 <_malloc_r+0x4c>
 800636a:	4613      	mov	r3, r2
 800636c:	e7cc      	b.n	8006308 <_malloc_r+0x80>
 800636e:	230c      	movs	r3, #12
 8006370:	603b      	str	r3, [r7, #0]
 8006372:	4638      	mov	r0, r7
 8006374:	f000 f80e 	bl	8006394 <__malloc_unlock>
 8006378:	e797      	b.n	80062aa <_malloc_r+0x22>
 800637a:	6025      	str	r5, [r4, #0]
 800637c:	e7dc      	b.n	8006338 <_malloc_r+0xb0>
 800637e:	605b      	str	r3, [r3, #4]
 8006380:	deff      	udf	#255	; 0xff
 8006382:	bf00      	nop
 8006384:	20000274 	.word	0x20000274

08006388 <__malloc_lock>:
 8006388:	4801      	ldr	r0, [pc, #4]	; (8006390 <__malloc_lock+0x8>)
 800638a:	f7ff bee0 	b.w	800614e <__retarget_lock_acquire_recursive>
 800638e:	bf00      	nop
 8006390:	20000270 	.word	0x20000270

08006394 <__malloc_unlock>:
 8006394:	4801      	ldr	r0, [pc, #4]	; (800639c <__malloc_unlock+0x8>)
 8006396:	f7ff bedb 	b.w	8006150 <__retarget_lock_release_recursive>
 800639a:	bf00      	nop
 800639c:	20000270 	.word	0x20000270

080063a0 <__ssputs_r>:
 80063a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a4:	688e      	ldr	r6, [r1, #8]
 80063a6:	461f      	mov	r7, r3
 80063a8:	42be      	cmp	r6, r7
 80063aa:	680b      	ldr	r3, [r1, #0]
 80063ac:	4682      	mov	sl, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	4690      	mov	r8, r2
 80063b2:	d82c      	bhi.n	800640e <__ssputs_r+0x6e>
 80063b4:	898a      	ldrh	r2, [r1, #12]
 80063b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063ba:	d026      	beq.n	800640a <__ssputs_r+0x6a>
 80063bc:	6965      	ldr	r5, [r4, #20]
 80063be:	6909      	ldr	r1, [r1, #16]
 80063c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063c4:	eba3 0901 	sub.w	r9, r3, r1
 80063c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063cc:	1c7b      	adds	r3, r7, #1
 80063ce:	444b      	add	r3, r9
 80063d0:	106d      	asrs	r5, r5, #1
 80063d2:	429d      	cmp	r5, r3
 80063d4:	bf38      	it	cc
 80063d6:	461d      	movcc	r5, r3
 80063d8:	0553      	lsls	r3, r2, #21
 80063da:	d527      	bpl.n	800642c <__ssputs_r+0x8c>
 80063dc:	4629      	mov	r1, r5
 80063de:	f7ff ff53 	bl	8006288 <_malloc_r>
 80063e2:	4606      	mov	r6, r0
 80063e4:	b360      	cbz	r0, 8006440 <__ssputs_r+0xa0>
 80063e6:	6921      	ldr	r1, [r4, #16]
 80063e8:	464a      	mov	r2, r9
 80063ea:	f000 fbab 	bl	8006b44 <memcpy>
 80063ee:	89a3      	ldrh	r3, [r4, #12]
 80063f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f8:	81a3      	strh	r3, [r4, #12]
 80063fa:	6126      	str	r6, [r4, #16]
 80063fc:	6165      	str	r5, [r4, #20]
 80063fe:	444e      	add	r6, r9
 8006400:	eba5 0509 	sub.w	r5, r5, r9
 8006404:	6026      	str	r6, [r4, #0]
 8006406:	60a5      	str	r5, [r4, #8]
 8006408:	463e      	mov	r6, r7
 800640a:	42be      	cmp	r6, r7
 800640c:	d900      	bls.n	8006410 <__ssputs_r+0x70>
 800640e:	463e      	mov	r6, r7
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	4632      	mov	r2, r6
 8006414:	4641      	mov	r1, r8
 8006416:	f000 fb6b 	bl	8006af0 <memmove>
 800641a:	68a3      	ldr	r3, [r4, #8]
 800641c:	1b9b      	subs	r3, r3, r6
 800641e:	60a3      	str	r3, [r4, #8]
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	4433      	add	r3, r6
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	2000      	movs	r0, #0
 8006428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642c:	462a      	mov	r2, r5
 800642e:	f000 fb9e 	bl	8006b6e <_realloc_r>
 8006432:	4606      	mov	r6, r0
 8006434:	2800      	cmp	r0, #0
 8006436:	d1e0      	bne.n	80063fa <__ssputs_r+0x5a>
 8006438:	6921      	ldr	r1, [r4, #16]
 800643a:	4650      	mov	r0, sl
 800643c:	f7ff feb0 	bl	80061a0 <_free_r>
 8006440:	230c      	movs	r3, #12
 8006442:	f8ca 3000 	str.w	r3, [sl]
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800644c:	81a3      	strh	r3, [r4, #12]
 800644e:	f04f 30ff 	mov.w	r0, #4294967295
 8006452:	e7e9      	b.n	8006428 <__ssputs_r+0x88>

08006454 <_svfiprintf_r>:
 8006454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006458:	4698      	mov	r8, r3
 800645a:	898b      	ldrh	r3, [r1, #12]
 800645c:	061b      	lsls	r3, r3, #24
 800645e:	b09d      	sub	sp, #116	; 0x74
 8006460:	4607      	mov	r7, r0
 8006462:	460d      	mov	r5, r1
 8006464:	4614      	mov	r4, r2
 8006466:	d50e      	bpl.n	8006486 <_svfiprintf_r+0x32>
 8006468:	690b      	ldr	r3, [r1, #16]
 800646a:	b963      	cbnz	r3, 8006486 <_svfiprintf_r+0x32>
 800646c:	2140      	movs	r1, #64	; 0x40
 800646e:	f7ff ff0b 	bl	8006288 <_malloc_r>
 8006472:	6028      	str	r0, [r5, #0]
 8006474:	6128      	str	r0, [r5, #16]
 8006476:	b920      	cbnz	r0, 8006482 <_svfiprintf_r+0x2e>
 8006478:	230c      	movs	r3, #12
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	f04f 30ff 	mov.w	r0, #4294967295
 8006480:	e0d0      	b.n	8006624 <_svfiprintf_r+0x1d0>
 8006482:	2340      	movs	r3, #64	; 0x40
 8006484:	616b      	str	r3, [r5, #20]
 8006486:	2300      	movs	r3, #0
 8006488:	9309      	str	r3, [sp, #36]	; 0x24
 800648a:	2320      	movs	r3, #32
 800648c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006490:	f8cd 800c 	str.w	r8, [sp, #12]
 8006494:	2330      	movs	r3, #48	; 0x30
 8006496:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800663c <_svfiprintf_r+0x1e8>
 800649a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800649e:	f04f 0901 	mov.w	r9, #1
 80064a2:	4623      	mov	r3, r4
 80064a4:	469a      	mov	sl, r3
 80064a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064aa:	b10a      	cbz	r2, 80064b0 <_svfiprintf_r+0x5c>
 80064ac:	2a25      	cmp	r2, #37	; 0x25
 80064ae:	d1f9      	bne.n	80064a4 <_svfiprintf_r+0x50>
 80064b0:	ebba 0b04 	subs.w	fp, sl, r4
 80064b4:	d00b      	beq.n	80064ce <_svfiprintf_r+0x7a>
 80064b6:	465b      	mov	r3, fp
 80064b8:	4622      	mov	r2, r4
 80064ba:	4629      	mov	r1, r5
 80064bc:	4638      	mov	r0, r7
 80064be:	f7ff ff6f 	bl	80063a0 <__ssputs_r>
 80064c2:	3001      	adds	r0, #1
 80064c4:	f000 80a9 	beq.w	800661a <_svfiprintf_r+0x1c6>
 80064c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ca:	445a      	add	r2, fp
 80064cc:	9209      	str	r2, [sp, #36]	; 0x24
 80064ce:	f89a 3000 	ldrb.w	r3, [sl]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80a1 	beq.w	800661a <_svfiprintf_r+0x1c6>
 80064d8:	2300      	movs	r3, #0
 80064da:	f04f 32ff 	mov.w	r2, #4294967295
 80064de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064e2:	f10a 0a01 	add.w	sl, sl, #1
 80064e6:	9304      	str	r3, [sp, #16]
 80064e8:	9307      	str	r3, [sp, #28]
 80064ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064ee:	931a      	str	r3, [sp, #104]	; 0x68
 80064f0:	4654      	mov	r4, sl
 80064f2:	2205      	movs	r2, #5
 80064f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f8:	4850      	ldr	r0, [pc, #320]	; (800663c <_svfiprintf_r+0x1e8>)
 80064fa:	f7f9 fe71 	bl	80001e0 <memchr>
 80064fe:	9a04      	ldr	r2, [sp, #16]
 8006500:	b9d8      	cbnz	r0, 800653a <_svfiprintf_r+0xe6>
 8006502:	06d0      	lsls	r0, r2, #27
 8006504:	bf44      	itt	mi
 8006506:	2320      	movmi	r3, #32
 8006508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800650c:	0711      	lsls	r1, r2, #28
 800650e:	bf44      	itt	mi
 8006510:	232b      	movmi	r3, #43	; 0x2b
 8006512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006516:	f89a 3000 	ldrb.w	r3, [sl]
 800651a:	2b2a      	cmp	r3, #42	; 0x2a
 800651c:	d015      	beq.n	800654a <_svfiprintf_r+0xf6>
 800651e:	9a07      	ldr	r2, [sp, #28]
 8006520:	4654      	mov	r4, sl
 8006522:	2000      	movs	r0, #0
 8006524:	f04f 0c0a 	mov.w	ip, #10
 8006528:	4621      	mov	r1, r4
 800652a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800652e:	3b30      	subs	r3, #48	; 0x30
 8006530:	2b09      	cmp	r3, #9
 8006532:	d94d      	bls.n	80065d0 <_svfiprintf_r+0x17c>
 8006534:	b1b0      	cbz	r0, 8006564 <_svfiprintf_r+0x110>
 8006536:	9207      	str	r2, [sp, #28]
 8006538:	e014      	b.n	8006564 <_svfiprintf_r+0x110>
 800653a:	eba0 0308 	sub.w	r3, r0, r8
 800653e:	fa09 f303 	lsl.w	r3, r9, r3
 8006542:	4313      	orrs	r3, r2
 8006544:	9304      	str	r3, [sp, #16]
 8006546:	46a2      	mov	sl, r4
 8006548:	e7d2      	b.n	80064f0 <_svfiprintf_r+0x9c>
 800654a:	9b03      	ldr	r3, [sp, #12]
 800654c:	1d19      	adds	r1, r3, #4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	9103      	str	r1, [sp, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	bfbb      	ittet	lt
 8006556:	425b      	neglt	r3, r3
 8006558:	f042 0202 	orrlt.w	r2, r2, #2
 800655c:	9307      	strge	r3, [sp, #28]
 800655e:	9307      	strlt	r3, [sp, #28]
 8006560:	bfb8      	it	lt
 8006562:	9204      	strlt	r2, [sp, #16]
 8006564:	7823      	ldrb	r3, [r4, #0]
 8006566:	2b2e      	cmp	r3, #46	; 0x2e
 8006568:	d10c      	bne.n	8006584 <_svfiprintf_r+0x130>
 800656a:	7863      	ldrb	r3, [r4, #1]
 800656c:	2b2a      	cmp	r3, #42	; 0x2a
 800656e:	d134      	bne.n	80065da <_svfiprintf_r+0x186>
 8006570:	9b03      	ldr	r3, [sp, #12]
 8006572:	1d1a      	adds	r2, r3, #4
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	9203      	str	r2, [sp, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	bfb8      	it	lt
 800657c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006580:	3402      	adds	r4, #2
 8006582:	9305      	str	r3, [sp, #20]
 8006584:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800664c <_svfiprintf_r+0x1f8>
 8006588:	7821      	ldrb	r1, [r4, #0]
 800658a:	2203      	movs	r2, #3
 800658c:	4650      	mov	r0, sl
 800658e:	f7f9 fe27 	bl	80001e0 <memchr>
 8006592:	b138      	cbz	r0, 80065a4 <_svfiprintf_r+0x150>
 8006594:	9b04      	ldr	r3, [sp, #16]
 8006596:	eba0 000a 	sub.w	r0, r0, sl
 800659a:	2240      	movs	r2, #64	; 0x40
 800659c:	4082      	lsls	r2, r0
 800659e:	4313      	orrs	r3, r2
 80065a0:	3401      	adds	r4, #1
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a8:	4825      	ldr	r0, [pc, #148]	; (8006640 <_svfiprintf_r+0x1ec>)
 80065aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ae:	2206      	movs	r2, #6
 80065b0:	f7f9 fe16 	bl	80001e0 <memchr>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d038      	beq.n	800662a <_svfiprintf_r+0x1d6>
 80065b8:	4b22      	ldr	r3, [pc, #136]	; (8006644 <_svfiprintf_r+0x1f0>)
 80065ba:	bb1b      	cbnz	r3, 8006604 <_svfiprintf_r+0x1b0>
 80065bc:	9b03      	ldr	r3, [sp, #12]
 80065be:	3307      	adds	r3, #7
 80065c0:	f023 0307 	bic.w	r3, r3, #7
 80065c4:	3308      	adds	r3, #8
 80065c6:	9303      	str	r3, [sp, #12]
 80065c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ca:	4433      	add	r3, r6
 80065cc:	9309      	str	r3, [sp, #36]	; 0x24
 80065ce:	e768      	b.n	80064a2 <_svfiprintf_r+0x4e>
 80065d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065d4:	460c      	mov	r4, r1
 80065d6:	2001      	movs	r0, #1
 80065d8:	e7a6      	b.n	8006528 <_svfiprintf_r+0xd4>
 80065da:	2300      	movs	r3, #0
 80065dc:	3401      	adds	r4, #1
 80065de:	9305      	str	r3, [sp, #20]
 80065e0:	4619      	mov	r1, r3
 80065e2:	f04f 0c0a 	mov.w	ip, #10
 80065e6:	4620      	mov	r0, r4
 80065e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ec:	3a30      	subs	r2, #48	; 0x30
 80065ee:	2a09      	cmp	r2, #9
 80065f0:	d903      	bls.n	80065fa <_svfiprintf_r+0x1a6>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0c6      	beq.n	8006584 <_svfiprintf_r+0x130>
 80065f6:	9105      	str	r1, [sp, #20]
 80065f8:	e7c4      	b.n	8006584 <_svfiprintf_r+0x130>
 80065fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80065fe:	4604      	mov	r4, r0
 8006600:	2301      	movs	r3, #1
 8006602:	e7f0      	b.n	80065e6 <_svfiprintf_r+0x192>
 8006604:	ab03      	add	r3, sp, #12
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	462a      	mov	r2, r5
 800660a:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <_svfiprintf_r+0x1f4>)
 800660c:	a904      	add	r1, sp, #16
 800660e:	4638      	mov	r0, r7
 8006610:	f3af 8000 	nop.w
 8006614:	1c42      	adds	r2, r0, #1
 8006616:	4606      	mov	r6, r0
 8006618:	d1d6      	bne.n	80065c8 <_svfiprintf_r+0x174>
 800661a:	89ab      	ldrh	r3, [r5, #12]
 800661c:	065b      	lsls	r3, r3, #25
 800661e:	f53f af2d 	bmi.w	800647c <_svfiprintf_r+0x28>
 8006622:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006624:	b01d      	add	sp, #116	; 0x74
 8006626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662a:	ab03      	add	r3, sp, #12
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	462a      	mov	r2, r5
 8006630:	4b05      	ldr	r3, [pc, #20]	; (8006648 <_svfiprintf_r+0x1f4>)
 8006632:	a904      	add	r1, sp, #16
 8006634:	4638      	mov	r0, r7
 8006636:	f000 f879 	bl	800672c <_printf_i>
 800663a:	e7eb      	b.n	8006614 <_svfiprintf_r+0x1c0>
 800663c:	08007367 	.word	0x08007367
 8006640:	08007371 	.word	0x08007371
 8006644:	00000000 	.word	0x00000000
 8006648:	080063a1 	.word	0x080063a1
 800664c:	0800736d 	.word	0x0800736d

08006650 <_printf_common>:
 8006650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006654:	4616      	mov	r6, r2
 8006656:	4699      	mov	r9, r3
 8006658:	688a      	ldr	r2, [r1, #8]
 800665a:	690b      	ldr	r3, [r1, #16]
 800665c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006660:	4293      	cmp	r3, r2
 8006662:	bfb8      	it	lt
 8006664:	4613      	movlt	r3, r2
 8006666:	6033      	str	r3, [r6, #0]
 8006668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800666c:	4607      	mov	r7, r0
 800666e:	460c      	mov	r4, r1
 8006670:	b10a      	cbz	r2, 8006676 <_printf_common+0x26>
 8006672:	3301      	adds	r3, #1
 8006674:	6033      	str	r3, [r6, #0]
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	0699      	lsls	r1, r3, #26
 800667a:	bf42      	ittt	mi
 800667c:	6833      	ldrmi	r3, [r6, #0]
 800667e:	3302      	addmi	r3, #2
 8006680:	6033      	strmi	r3, [r6, #0]
 8006682:	6825      	ldr	r5, [r4, #0]
 8006684:	f015 0506 	ands.w	r5, r5, #6
 8006688:	d106      	bne.n	8006698 <_printf_common+0x48>
 800668a:	f104 0a19 	add.w	sl, r4, #25
 800668e:	68e3      	ldr	r3, [r4, #12]
 8006690:	6832      	ldr	r2, [r6, #0]
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	42ab      	cmp	r3, r5
 8006696:	dc26      	bgt.n	80066e6 <_printf_common+0x96>
 8006698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800669c:	1e13      	subs	r3, r2, #0
 800669e:	6822      	ldr	r2, [r4, #0]
 80066a0:	bf18      	it	ne
 80066a2:	2301      	movne	r3, #1
 80066a4:	0692      	lsls	r2, r2, #26
 80066a6:	d42b      	bmi.n	8006700 <_printf_common+0xb0>
 80066a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066ac:	4649      	mov	r1, r9
 80066ae:	4638      	mov	r0, r7
 80066b0:	47c0      	blx	r8
 80066b2:	3001      	adds	r0, #1
 80066b4:	d01e      	beq.n	80066f4 <_printf_common+0xa4>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	6922      	ldr	r2, [r4, #16]
 80066ba:	f003 0306 	and.w	r3, r3, #6
 80066be:	2b04      	cmp	r3, #4
 80066c0:	bf02      	ittt	eq
 80066c2:	68e5      	ldreq	r5, [r4, #12]
 80066c4:	6833      	ldreq	r3, [r6, #0]
 80066c6:	1aed      	subeq	r5, r5, r3
 80066c8:	68a3      	ldr	r3, [r4, #8]
 80066ca:	bf0c      	ite	eq
 80066cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066d0:	2500      	movne	r5, #0
 80066d2:	4293      	cmp	r3, r2
 80066d4:	bfc4      	itt	gt
 80066d6:	1a9b      	subgt	r3, r3, r2
 80066d8:	18ed      	addgt	r5, r5, r3
 80066da:	2600      	movs	r6, #0
 80066dc:	341a      	adds	r4, #26
 80066de:	42b5      	cmp	r5, r6
 80066e0:	d11a      	bne.n	8006718 <_printf_common+0xc8>
 80066e2:	2000      	movs	r0, #0
 80066e4:	e008      	b.n	80066f8 <_printf_common+0xa8>
 80066e6:	2301      	movs	r3, #1
 80066e8:	4652      	mov	r2, sl
 80066ea:	4649      	mov	r1, r9
 80066ec:	4638      	mov	r0, r7
 80066ee:	47c0      	blx	r8
 80066f0:	3001      	adds	r0, #1
 80066f2:	d103      	bne.n	80066fc <_printf_common+0xac>
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295
 80066f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066fc:	3501      	adds	r5, #1
 80066fe:	e7c6      	b.n	800668e <_printf_common+0x3e>
 8006700:	18e1      	adds	r1, r4, r3
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	2030      	movs	r0, #48	; 0x30
 8006706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800670a:	4422      	add	r2, r4
 800670c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006714:	3302      	adds	r3, #2
 8006716:	e7c7      	b.n	80066a8 <_printf_common+0x58>
 8006718:	2301      	movs	r3, #1
 800671a:	4622      	mov	r2, r4
 800671c:	4649      	mov	r1, r9
 800671e:	4638      	mov	r0, r7
 8006720:	47c0      	blx	r8
 8006722:	3001      	adds	r0, #1
 8006724:	d0e6      	beq.n	80066f4 <_printf_common+0xa4>
 8006726:	3601      	adds	r6, #1
 8006728:	e7d9      	b.n	80066de <_printf_common+0x8e>
	...

0800672c <_printf_i>:
 800672c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006730:	7e0f      	ldrb	r7, [r1, #24]
 8006732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006734:	2f78      	cmp	r7, #120	; 0x78
 8006736:	4691      	mov	r9, r2
 8006738:	4680      	mov	r8, r0
 800673a:	460c      	mov	r4, r1
 800673c:	469a      	mov	sl, r3
 800673e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006742:	d807      	bhi.n	8006754 <_printf_i+0x28>
 8006744:	2f62      	cmp	r7, #98	; 0x62
 8006746:	d80a      	bhi.n	800675e <_printf_i+0x32>
 8006748:	2f00      	cmp	r7, #0
 800674a:	f000 80d4 	beq.w	80068f6 <_printf_i+0x1ca>
 800674e:	2f58      	cmp	r7, #88	; 0x58
 8006750:	f000 80c0 	beq.w	80068d4 <_printf_i+0x1a8>
 8006754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800675c:	e03a      	b.n	80067d4 <_printf_i+0xa8>
 800675e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006762:	2b15      	cmp	r3, #21
 8006764:	d8f6      	bhi.n	8006754 <_printf_i+0x28>
 8006766:	a101      	add	r1, pc, #4	; (adr r1, 800676c <_printf_i+0x40>)
 8006768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800676c:	080067c5 	.word	0x080067c5
 8006770:	080067d9 	.word	0x080067d9
 8006774:	08006755 	.word	0x08006755
 8006778:	08006755 	.word	0x08006755
 800677c:	08006755 	.word	0x08006755
 8006780:	08006755 	.word	0x08006755
 8006784:	080067d9 	.word	0x080067d9
 8006788:	08006755 	.word	0x08006755
 800678c:	08006755 	.word	0x08006755
 8006790:	08006755 	.word	0x08006755
 8006794:	08006755 	.word	0x08006755
 8006798:	080068dd 	.word	0x080068dd
 800679c:	08006805 	.word	0x08006805
 80067a0:	08006897 	.word	0x08006897
 80067a4:	08006755 	.word	0x08006755
 80067a8:	08006755 	.word	0x08006755
 80067ac:	080068ff 	.word	0x080068ff
 80067b0:	08006755 	.word	0x08006755
 80067b4:	08006805 	.word	0x08006805
 80067b8:	08006755 	.word	0x08006755
 80067bc:	08006755 	.word	0x08006755
 80067c0:	0800689f 	.word	0x0800689f
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	1d1a      	adds	r2, r3, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	602a      	str	r2, [r5, #0]
 80067cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067d4:	2301      	movs	r3, #1
 80067d6:	e09f      	b.n	8006918 <_printf_i+0x1ec>
 80067d8:	6820      	ldr	r0, [r4, #0]
 80067da:	682b      	ldr	r3, [r5, #0]
 80067dc:	0607      	lsls	r7, r0, #24
 80067de:	f103 0104 	add.w	r1, r3, #4
 80067e2:	6029      	str	r1, [r5, #0]
 80067e4:	d501      	bpl.n	80067ea <_printf_i+0xbe>
 80067e6:	681e      	ldr	r6, [r3, #0]
 80067e8:	e003      	b.n	80067f2 <_printf_i+0xc6>
 80067ea:	0646      	lsls	r6, r0, #25
 80067ec:	d5fb      	bpl.n	80067e6 <_printf_i+0xba>
 80067ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80067f2:	2e00      	cmp	r6, #0
 80067f4:	da03      	bge.n	80067fe <_printf_i+0xd2>
 80067f6:	232d      	movs	r3, #45	; 0x2d
 80067f8:	4276      	negs	r6, r6
 80067fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067fe:	485a      	ldr	r0, [pc, #360]	; (8006968 <_printf_i+0x23c>)
 8006800:	230a      	movs	r3, #10
 8006802:	e012      	b.n	800682a <_printf_i+0xfe>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	6820      	ldr	r0, [r4, #0]
 8006808:	1d19      	adds	r1, r3, #4
 800680a:	6029      	str	r1, [r5, #0]
 800680c:	0605      	lsls	r5, r0, #24
 800680e:	d501      	bpl.n	8006814 <_printf_i+0xe8>
 8006810:	681e      	ldr	r6, [r3, #0]
 8006812:	e002      	b.n	800681a <_printf_i+0xee>
 8006814:	0641      	lsls	r1, r0, #25
 8006816:	d5fb      	bpl.n	8006810 <_printf_i+0xe4>
 8006818:	881e      	ldrh	r6, [r3, #0]
 800681a:	4853      	ldr	r0, [pc, #332]	; (8006968 <_printf_i+0x23c>)
 800681c:	2f6f      	cmp	r7, #111	; 0x6f
 800681e:	bf0c      	ite	eq
 8006820:	2308      	moveq	r3, #8
 8006822:	230a      	movne	r3, #10
 8006824:	2100      	movs	r1, #0
 8006826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800682a:	6865      	ldr	r5, [r4, #4]
 800682c:	60a5      	str	r5, [r4, #8]
 800682e:	2d00      	cmp	r5, #0
 8006830:	bfa2      	ittt	ge
 8006832:	6821      	ldrge	r1, [r4, #0]
 8006834:	f021 0104 	bicge.w	r1, r1, #4
 8006838:	6021      	strge	r1, [r4, #0]
 800683a:	b90e      	cbnz	r6, 8006840 <_printf_i+0x114>
 800683c:	2d00      	cmp	r5, #0
 800683e:	d04b      	beq.n	80068d8 <_printf_i+0x1ac>
 8006840:	4615      	mov	r5, r2
 8006842:	fbb6 f1f3 	udiv	r1, r6, r3
 8006846:	fb03 6711 	mls	r7, r3, r1, r6
 800684a:	5dc7      	ldrb	r7, [r0, r7]
 800684c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006850:	4637      	mov	r7, r6
 8006852:	42bb      	cmp	r3, r7
 8006854:	460e      	mov	r6, r1
 8006856:	d9f4      	bls.n	8006842 <_printf_i+0x116>
 8006858:	2b08      	cmp	r3, #8
 800685a:	d10b      	bne.n	8006874 <_printf_i+0x148>
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	07de      	lsls	r6, r3, #31
 8006860:	d508      	bpl.n	8006874 <_printf_i+0x148>
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	6861      	ldr	r1, [r4, #4]
 8006866:	4299      	cmp	r1, r3
 8006868:	bfde      	ittt	le
 800686a:	2330      	movle	r3, #48	; 0x30
 800686c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006870:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006874:	1b52      	subs	r2, r2, r5
 8006876:	6122      	str	r2, [r4, #16]
 8006878:	f8cd a000 	str.w	sl, [sp]
 800687c:	464b      	mov	r3, r9
 800687e:	aa03      	add	r2, sp, #12
 8006880:	4621      	mov	r1, r4
 8006882:	4640      	mov	r0, r8
 8006884:	f7ff fee4 	bl	8006650 <_printf_common>
 8006888:	3001      	adds	r0, #1
 800688a:	d14a      	bne.n	8006922 <_printf_i+0x1f6>
 800688c:	f04f 30ff 	mov.w	r0, #4294967295
 8006890:	b004      	add	sp, #16
 8006892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	f043 0320 	orr.w	r3, r3, #32
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	4833      	ldr	r0, [pc, #204]	; (800696c <_printf_i+0x240>)
 80068a0:	2778      	movs	r7, #120	; 0x78
 80068a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	6829      	ldr	r1, [r5, #0]
 80068aa:	061f      	lsls	r7, r3, #24
 80068ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80068b0:	d402      	bmi.n	80068b8 <_printf_i+0x18c>
 80068b2:	065f      	lsls	r7, r3, #25
 80068b4:	bf48      	it	mi
 80068b6:	b2b6      	uxthmi	r6, r6
 80068b8:	07df      	lsls	r7, r3, #31
 80068ba:	bf48      	it	mi
 80068bc:	f043 0320 	orrmi.w	r3, r3, #32
 80068c0:	6029      	str	r1, [r5, #0]
 80068c2:	bf48      	it	mi
 80068c4:	6023      	strmi	r3, [r4, #0]
 80068c6:	b91e      	cbnz	r6, 80068d0 <_printf_i+0x1a4>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	f023 0320 	bic.w	r3, r3, #32
 80068ce:	6023      	str	r3, [r4, #0]
 80068d0:	2310      	movs	r3, #16
 80068d2:	e7a7      	b.n	8006824 <_printf_i+0xf8>
 80068d4:	4824      	ldr	r0, [pc, #144]	; (8006968 <_printf_i+0x23c>)
 80068d6:	e7e4      	b.n	80068a2 <_printf_i+0x176>
 80068d8:	4615      	mov	r5, r2
 80068da:	e7bd      	b.n	8006858 <_printf_i+0x12c>
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	6826      	ldr	r6, [r4, #0]
 80068e0:	6961      	ldr	r1, [r4, #20]
 80068e2:	1d18      	adds	r0, r3, #4
 80068e4:	6028      	str	r0, [r5, #0]
 80068e6:	0635      	lsls	r5, r6, #24
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	d501      	bpl.n	80068f0 <_printf_i+0x1c4>
 80068ec:	6019      	str	r1, [r3, #0]
 80068ee:	e002      	b.n	80068f6 <_printf_i+0x1ca>
 80068f0:	0670      	lsls	r0, r6, #25
 80068f2:	d5fb      	bpl.n	80068ec <_printf_i+0x1c0>
 80068f4:	8019      	strh	r1, [r3, #0]
 80068f6:	2300      	movs	r3, #0
 80068f8:	6123      	str	r3, [r4, #16]
 80068fa:	4615      	mov	r5, r2
 80068fc:	e7bc      	b.n	8006878 <_printf_i+0x14c>
 80068fe:	682b      	ldr	r3, [r5, #0]
 8006900:	1d1a      	adds	r2, r3, #4
 8006902:	602a      	str	r2, [r5, #0]
 8006904:	681d      	ldr	r5, [r3, #0]
 8006906:	6862      	ldr	r2, [r4, #4]
 8006908:	2100      	movs	r1, #0
 800690a:	4628      	mov	r0, r5
 800690c:	f7f9 fc68 	bl	80001e0 <memchr>
 8006910:	b108      	cbz	r0, 8006916 <_printf_i+0x1ea>
 8006912:	1b40      	subs	r0, r0, r5
 8006914:	6060      	str	r0, [r4, #4]
 8006916:	6863      	ldr	r3, [r4, #4]
 8006918:	6123      	str	r3, [r4, #16]
 800691a:	2300      	movs	r3, #0
 800691c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006920:	e7aa      	b.n	8006878 <_printf_i+0x14c>
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	462a      	mov	r2, r5
 8006926:	4649      	mov	r1, r9
 8006928:	4640      	mov	r0, r8
 800692a:	47d0      	blx	sl
 800692c:	3001      	adds	r0, #1
 800692e:	d0ad      	beq.n	800688c <_printf_i+0x160>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	079b      	lsls	r3, r3, #30
 8006934:	d413      	bmi.n	800695e <_printf_i+0x232>
 8006936:	68e0      	ldr	r0, [r4, #12]
 8006938:	9b03      	ldr	r3, [sp, #12]
 800693a:	4298      	cmp	r0, r3
 800693c:	bfb8      	it	lt
 800693e:	4618      	movlt	r0, r3
 8006940:	e7a6      	b.n	8006890 <_printf_i+0x164>
 8006942:	2301      	movs	r3, #1
 8006944:	4632      	mov	r2, r6
 8006946:	4649      	mov	r1, r9
 8006948:	4640      	mov	r0, r8
 800694a:	47d0      	blx	sl
 800694c:	3001      	adds	r0, #1
 800694e:	d09d      	beq.n	800688c <_printf_i+0x160>
 8006950:	3501      	adds	r5, #1
 8006952:	68e3      	ldr	r3, [r4, #12]
 8006954:	9903      	ldr	r1, [sp, #12]
 8006956:	1a5b      	subs	r3, r3, r1
 8006958:	42ab      	cmp	r3, r5
 800695a:	dcf2      	bgt.n	8006942 <_printf_i+0x216>
 800695c:	e7eb      	b.n	8006936 <_printf_i+0x20a>
 800695e:	2500      	movs	r5, #0
 8006960:	f104 0619 	add.w	r6, r4, #25
 8006964:	e7f5      	b.n	8006952 <_printf_i+0x226>
 8006966:	bf00      	nop
 8006968:	08007378 	.word	0x08007378
 800696c:	08007389 	.word	0x08007389

08006970 <__sflush_r>:
 8006970:	898a      	ldrh	r2, [r1, #12]
 8006972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006976:	4605      	mov	r5, r0
 8006978:	0710      	lsls	r0, r2, #28
 800697a:	460c      	mov	r4, r1
 800697c:	d458      	bmi.n	8006a30 <__sflush_r+0xc0>
 800697e:	684b      	ldr	r3, [r1, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	dc05      	bgt.n	8006990 <__sflush_r+0x20>
 8006984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	dc02      	bgt.n	8006990 <__sflush_r+0x20>
 800698a:	2000      	movs	r0, #0
 800698c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006992:	2e00      	cmp	r6, #0
 8006994:	d0f9      	beq.n	800698a <__sflush_r+0x1a>
 8006996:	2300      	movs	r3, #0
 8006998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800699c:	682f      	ldr	r7, [r5, #0]
 800699e:	6a21      	ldr	r1, [r4, #32]
 80069a0:	602b      	str	r3, [r5, #0]
 80069a2:	d032      	beq.n	8006a0a <__sflush_r+0x9a>
 80069a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	075a      	lsls	r2, r3, #29
 80069aa:	d505      	bpl.n	80069b8 <__sflush_r+0x48>
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	1ac0      	subs	r0, r0, r3
 80069b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069b2:	b10b      	cbz	r3, 80069b8 <__sflush_r+0x48>
 80069b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069b6:	1ac0      	subs	r0, r0, r3
 80069b8:	2300      	movs	r3, #0
 80069ba:	4602      	mov	r2, r0
 80069bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069be:	6a21      	ldr	r1, [r4, #32]
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b0      	blx	r6
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	89a3      	ldrh	r3, [r4, #12]
 80069c8:	d106      	bne.n	80069d8 <__sflush_r+0x68>
 80069ca:	6829      	ldr	r1, [r5, #0]
 80069cc:	291d      	cmp	r1, #29
 80069ce:	d82b      	bhi.n	8006a28 <__sflush_r+0xb8>
 80069d0:	4a29      	ldr	r2, [pc, #164]	; (8006a78 <__sflush_r+0x108>)
 80069d2:	410a      	asrs	r2, r1
 80069d4:	07d6      	lsls	r6, r2, #31
 80069d6:	d427      	bmi.n	8006a28 <__sflush_r+0xb8>
 80069d8:	2200      	movs	r2, #0
 80069da:	6062      	str	r2, [r4, #4]
 80069dc:	04d9      	lsls	r1, r3, #19
 80069de:	6922      	ldr	r2, [r4, #16]
 80069e0:	6022      	str	r2, [r4, #0]
 80069e2:	d504      	bpl.n	80069ee <__sflush_r+0x7e>
 80069e4:	1c42      	adds	r2, r0, #1
 80069e6:	d101      	bne.n	80069ec <__sflush_r+0x7c>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b903      	cbnz	r3, 80069ee <__sflush_r+0x7e>
 80069ec:	6560      	str	r0, [r4, #84]	; 0x54
 80069ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069f0:	602f      	str	r7, [r5, #0]
 80069f2:	2900      	cmp	r1, #0
 80069f4:	d0c9      	beq.n	800698a <__sflush_r+0x1a>
 80069f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069fa:	4299      	cmp	r1, r3
 80069fc:	d002      	beq.n	8006a04 <__sflush_r+0x94>
 80069fe:	4628      	mov	r0, r5
 8006a00:	f7ff fbce 	bl	80061a0 <_free_r>
 8006a04:	2000      	movs	r0, #0
 8006a06:	6360      	str	r0, [r4, #52]	; 0x34
 8006a08:	e7c0      	b.n	800698c <__sflush_r+0x1c>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	47b0      	blx	r6
 8006a10:	1c41      	adds	r1, r0, #1
 8006a12:	d1c8      	bne.n	80069a6 <__sflush_r+0x36>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0c5      	beq.n	80069a6 <__sflush_r+0x36>
 8006a1a:	2b1d      	cmp	r3, #29
 8006a1c:	d001      	beq.n	8006a22 <__sflush_r+0xb2>
 8006a1e:	2b16      	cmp	r3, #22
 8006a20:	d101      	bne.n	8006a26 <__sflush_r+0xb6>
 8006a22:	602f      	str	r7, [r5, #0]
 8006a24:	e7b1      	b.n	800698a <__sflush_r+0x1a>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	e7ad      	b.n	800698c <__sflush_r+0x1c>
 8006a30:	690f      	ldr	r7, [r1, #16]
 8006a32:	2f00      	cmp	r7, #0
 8006a34:	d0a9      	beq.n	800698a <__sflush_r+0x1a>
 8006a36:	0793      	lsls	r3, r2, #30
 8006a38:	680e      	ldr	r6, [r1, #0]
 8006a3a:	bf08      	it	eq
 8006a3c:	694b      	ldreq	r3, [r1, #20]
 8006a3e:	600f      	str	r7, [r1, #0]
 8006a40:	bf18      	it	ne
 8006a42:	2300      	movne	r3, #0
 8006a44:	eba6 0807 	sub.w	r8, r6, r7
 8006a48:	608b      	str	r3, [r1, #8]
 8006a4a:	f1b8 0f00 	cmp.w	r8, #0
 8006a4e:	dd9c      	ble.n	800698a <__sflush_r+0x1a>
 8006a50:	6a21      	ldr	r1, [r4, #32]
 8006a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a54:	4643      	mov	r3, r8
 8006a56:	463a      	mov	r2, r7
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b0      	blx	r6
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	dc06      	bgt.n	8006a6e <__sflush_r+0xfe>
 8006a60:	89a3      	ldrh	r3, [r4, #12]
 8006a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a66:	81a3      	strh	r3, [r4, #12]
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	e78e      	b.n	800698c <__sflush_r+0x1c>
 8006a6e:	4407      	add	r7, r0
 8006a70:	eba8 0800 	sub.w	r8, r8, r0
 8006a74:	e7e9      	b.n	8006a4a <__sflush_r+0xda>
 8006a76:	bf00      	nop
 8006a78:	dfbffffe 	.word	0xdfbffffe

08006a7c <_fflush_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	690b      	ldr	r3, [r1, #16]
 8006a80:	4605      	mov	r5, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	b913      	cbnz	r3, 8006a8c <_fflush_r+0x10>
 8006a86:	2500      	movs	r5, #0
 8006a88:	4628      	mov	r0, r5
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	b118      	cbz	r0, 8006a96 <_fflush_r+0x1a>
 8006a8e:	6a03      	ldr	r3, [r0, #32]
 8006a90:	b90b      	cbnz	r3, 8006a96 <_fflush_r+0x1a>
 8006a92:	f7ff fa0f 	bl	8005eb4 <__sinit>
 8006a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f3      	beq.n	8006a86 <_fflush_r+0xa>
 8006a9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006aa0:	07d0      	lsls	r0, r2, #31
 8006aa2:	d404      	bmi.n	8006aae <_fflush_r+0x32>
 8006aa4:	0599      	lsls	r1, r3, #22
 8006aa6:	d402      	bmi.n	8006aae <_fflush_r+0x32>
 8006aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aaa:	f7ff fb50 	bl	800614e <__retarget_lock_acquire_recursive>
 8006aae:	4628      	mov	r0, r5
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	f7ff ff5d 	bl	8006970 <__sflush_r>
 8006ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ab8:	07da      	lsls	r2, r3, #31
 8006aba:	4605      	mov	r5, r0
 8006abc:	d4e4      	bmi.n	8006a88 <_fflush_r+0xc>
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	059b      	lsls	r3, r3, #22
 8006ac2:	d4e1      	bmi.n	8006a88 <_fflush_r+0xc>
 8006ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ac6:	f7ff fb43 	bl	8006150 <__retarget_lock_release_recursive>
 8006aca:	e7dd      	b.n	8006a88 <_fflush_r+0xc>

08006acc <fiprintf>:
 8006acc:	b40e      	push	{r1, r2, r3}
 8006ace:	b503      	push	{r0, r1, lr}
 8006ad0:	4601      	mov	r1, r0
 8006ad2:	ab03      	add	r3, sp, #12
 8006ad4:	4805      	ldr	r0, [pc, #20]	; (8006aec <fiprintf+0x20>)
 8006ad6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	f000 f89f 	bl	8006c20 <_vfiprintf_r>
 8006ae2:	b002      	add	sp, #8
 8006ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ae8:	b003      	add	sp, #12
 8006aea:	4770      	bx	lr
 8006aec:	20000064 	.word	0x20000064

08006af0 <memmove>:
 8006af0:	4288      	cmp	r0, r1
 8006af2:	b510      	push	{r4, lr}
 8006af4:	eb01 0402 	add.w	r4, r1, r2
 8006af8:	d902      	bls.n	8006b00 <memmove+0x10>
 8006afa:	4284      	cmp	r4, r0
 8006afc:	4623      	mov	r3, r4
 8006afe:	d807      	bhi.n	8006b10 <memmove+0x20>
 8006b00:	1e43      	subs	r3, r0, #1
 8006b02:	42a1      	cmp	r1, r4
 8006b04:	d008      	beq.n	8006b18 <memmove+0x28>
 8006b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b0e:	e7f8      	b.n	8006b02 <memmove+0x12>
 8006b10:	4402      	add	r2, r0
 8006b12:	4601      	mov	r1, r0
 8006b14:	428a      	cmp	r2, r1
 8006b16:	d100      	bne.n	8006b1a <memmove+0x2a>
 8006b18:	bd10      	pop	{r4, pc}
 8006b1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b22:	e7f7      	b.n	8006b14 <memmove+0x24>

08006b24 <_sbrk_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d06      	ldr	r5, [pc, #24]	; (8006b40 <_sbrk_r+0x1c>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	602b      	str	r3, [r5, #0]
 8006b30:	f7fb fd6e 	bl	8002610 <_sbrk>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_sbrk_r+0x1a>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_sbrk_r+0x1a>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	2000026c 	.word	0x2000026c

08006b44 <memcpy>:
 8006b44:	440a      	add	r2, r1
 8006b46:	4291      	cmp	r1, r2
 8006b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b4c:	d100      	bne.n	8006b50 <memcpy+0xc>
 8006b4e:	4770      	bx	lr
 8006b50:	b510      	push	{r4, lr}
 8006b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b5a:	4291      	cmp	r1, r2
 8006b5c:	d1f9      	bne.n	8006b52 <memcpy+0xe>
 8006b5e:	bd10      	pop	{r4, pc}

08006b60 <abort>:
 8006b60:	b508      	push	{r3, lr}
 8006b62:	2006      	movs	r0, #6
 8006b64:	f000 fa34 	bl	8006fd0 <raise>
 8006b68:	2001      	movs	r0, #1
 8006b6a:	f7fb fcd9 	bl	8002520 <_exit>

08006b6e <_realloc_r>:
 8006b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b72:	4680      	mov	r8, r0
 8006b74:	4614      	mov	r4, r2
 8006b76:	460e      	mov	r6, r1
 8006b78:	b921      	cbnz	r1, 8006b84 <_realloc_r+0x16>
 8006b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7e:	4611      	mov	r1, r2
 8006b80:	f7ff bb82 	b.w	8006288 <_malloc_r>
 8006b84:	b92a      	cbnz	r2, 8006b92 <_realloc_r+0x24>
 8006b86:	f7ff fb0b 	bl	80061a0 <_free_r>
 8006b8a:	4625      	mov	r5, r4
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b92:	f000 fa39 	bl	8007008 <_malloc_usable_size_r>
 8006b96:	4284      	cmp	r4, r0
 8006b98:	4607      	mov	r7, r0
 8006b9a:	d802      	bhi.n	8006ba2 <_realloc_r+0x34>
 8006b9c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ba0:	d812      	bhi.n	8006bc8 <_realloc_r+0x5a>
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	f7ff fb6f 	bl	8006288 <_malloc_r>
 8006baa:	4605      	mov	r5, r0
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d0ed      	beq.n	8006b8c <_realloc_r+0x1e>
 8006bb0:	42bc      	cmp	r4, r7
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	bf28      	it	cs
 8006bb8:	463a      	movcs	r2, r7
 8006bba:	f7ff ffc3 	bl	8006b44 <memcpy>
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	f7ff faed 	bl	80061a0 <_free_r>
 8006bc6:	e7e1      	b.n	8006b8c <_realloc_r+0x1e>
 8006bc8:	4635      	mov	r5, r6
 8006bca:	e7df      	b.n	8006b8c <_realloc_r+0x1e>

08006bcc <__sfputc_r>:
 8006bcc:	6893      	ldr	r3, [r2, #8]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	b410      	push	{r4}
 8006bd4:	6093      	str	r3, [r2, #8]
 8006bd6:	da08      	bge.n	8006bea <__sfputc_r+0x1e>
 8006bd8:	6994      	ldr	r4, [r2, #24]
 8006bda:	42a3      	cmp	r3, r4
 8006bdc:	db01      	blt.n	8006be2 <__sfputc_r+0x16>
 8006bde:	290a      	cmp	r1, #10
 8006be0:	d103      	bne.n	8006bea <__sfputc_r+0x1e>
 8006be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006be6:	f000 b935 	b.w	8006e54 <__swbuf_r>
 8006bea:	6813      	ldr	r3, [r2, #0]
 8006bec:	1c58      	adds	r0, r3, #1
 8006bee:	6010      	str	r0, [r2, #0]
 8006bf0:	7019      	strb	r1, [r3, #0]
 8006bf2:	4608      	mov	r0, r1
 8006bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <__sfputs_r>:
 8006bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	460f      	mov	r7, r1
 8006c00:	4614      	mov	r4, r2
 8006c02:	18d5      	adds	r5, r2, r3
 8006c04:	42ac      	cmp	r4, r5
 8006c06:	d101      	bne.n	8006c0c <__sfputs_r+0x12>
 8006c08:	2000      	movs	r0, #0
 8006c0a:	e007      	b.n	8006c1c <__sfputs_r+0x22>
 8006c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c10:	463a      	mov	r2, r7
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7ff ffda 	bl	8006bcc <__sfputc_r>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d1f3      	bne.n	8006c04 <__sfputs_r+0xa>
 8006c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c20 <_vfiprintf_r>:
 8006c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c24:	460d      	mov	r5, r1
 8006c26:	b09d      	sub	sp, #116	; 0x74
 8006c28:	4614      	mov	r4, r2
 8006c2a:	4698      	mov	r8, r3
 8006c2c:	4606      	mov	r6, r0
 8006c2e:	b118      	cbz	r0, 8006c38 <_vfiprintf_r+0x18>
 8006c30:	6a03      	ldr	r3, [r0, #32]
 8006c32:	b90b      	cbnz	r3, 8006c38 <_vfiprintf_r+0x18>
 8006c34:	f7ff f93e 	bl	8005eb4 <__sinit>
 8006c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c3a:	07d9      	lsls	r1, r3, #31
 8006c3c:	d405      	bmi.n	8006c4a <_vfiprintf_r+0x2a>
 8006c3e:	89ab      	ldrh	r3, [r5, #12]
 8006c40:	059a      	lsls	r2, r3, #22
 8006c42:	d402      	bmi.n	8006c4a <_vfiprintf_r+0x2a>
 8006c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c46:	f7ff fa82 	bl	800614e <__retarget_lock_acquire_recursive>
 8006c4a:	89ab      	ldrh	r3, [r5, #12]
 8006c4c:	071b      	lsls	r3, r3, #28
 8006c4e:	d501      	bpl.n	8006c54 <_vfiprintf_r+0x34>
 8006c50:	692b      	ldr	r3, [r5, #16]
 8006c52:	b99b      	cbnz	r3, 8006c7c <_vfiprintf_r+0x5c>
 8006c54:	4629      	mov	r1, r5
 8006c56:	4630      	mov	r0, r6
 8006c58:	f000 f93a 	bl	8006ed0 <__swsetup_r>
 8006c5c:	b170      	cbz	r0, 8006c7c <_vfiprintf_r+0x5c>
 8006c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c60:	07dc      	lsls	r4, r3, #31
 8006c62:	d504      	bpl.n	8006c6e <_vfiprintf_r+0x4e>
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	b01d      	add	sp, #116	; 0x74
 8006c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	0598      	lsls	r0, r3, #22
 8006c72:	d4f7      	bmi.n	8006c64 <_vfiprintf_r+0x44>
 8006c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c76:	f7ff fa6b 	bl	8006150 <__retarget_lock_release_recursive>
 8006c7a:	e7f3      	b.n	8006c64 <_vfiprintf_r+0x44>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c80:	2320      	movs	r3, #32
 8006c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c8a:	2330      	movs	r3, #48	; 0x30
 8006c8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006e40 <_vfiprintf_r+0x220>
 8006c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c94:	f04f 0901 	mov.w	r9, #1
 8006c98:	4623      	mov	r3, r4
 8006c9a:	469a      	mov	sl, r3
 8006c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca0:	b10a      	cbz	r2, 8006ca6 <_vfiprintf_r+0x86>
 8006ca2:	2a25      	cmp	r2, #37	; 0x25
 8006ca4:	d1f9      	bne.n	8006c9a <_vfiprintf_r+0x7a>
 8006ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8006caa:	d00b      	beq.n	8006cc4 <_vfiprintf_r+0xa4>
 8006cac:	465b      	mov	r3, fp
 8006cae:	4622      	mov	r2, r4
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f7ff ffa1 	bl	8006bfa <__sfputs_r>
 8006cb8:	3001      	adds	r0, #1
 8006cba:	f000 80a9 	beq.w	8006e10 <_vfiprintf_r+0x1f0>
 8006cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc0:	445a      	add	r2, fp
 8006cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8006cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 80a1 	beq.w	8006e10 <_vfiprintf_r+0x1f0>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cd8:	f10a 0a01 	add.w	sl, sl, #1
 8006cdc:	9304      	str	r3, [sp, #16]
 8006cde:	9307      	str	r3, [sp, #28]
 8006ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ce6:	4654      	mov	r4, sl
 8006ce8:	2205      	movs	r2, #5
 8006cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cee:	4854      	ldr	r0, [pc, #336]	; (8006e40 <_vfiprintf_r+0x220>)
 8006cf0:	f7f9 fa76 	bl	80001e0 <memchr>
 8006cf4:	9a04      	ldr	r2, [sp, #16]
 8006cf6:	b9d8      	cbnz	r0, 8006d30 <_vfiprintf_r+0x110>
 8006cf8:	06d1      	lsls	r1, r2, #27
 8006cfa:	bf44      	itt	mi
 8006cfc:	2320      	movmi	r3, #32
 8006cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d02:	0713      	lsls	r3, r2, #28
 8006d04:	bf44      	itt	mi
 8006d06:	232b      	movmi	r3, #43	; 0x2b
 8006d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d10:	2b2a      	cmp	r3, #42	; 0x2a
 8006d12:	d015      	beq.n	8006d40 <_vfiprintf_r+0x120>
 8006d14:	9a07      	ldr	r2, [sp, #28]
 8006d16:	4654      	mov	r4, sl
 8006d18:	2000      	movs	r0, #0
 8006d1a:	f04f 0c0a 	mov.w	ip, #10
 8006d1e:	4621      	mov	r1, r4
 8006d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d24:	3b30      	subs	r3, #48	; 0x30
 8006d26:	2b09      	cmp	r3, #9
 8006d28:	d94d      	bls.n	8006dc6 <_vfiprintf_r+0x1a6>
 8006d2a:	b1b0      	cbz	r0, 8006d5a <_vfiprintf_r+0x13a>
 8006d2c:	9207      	str	r2, [sp, #28]
 8006d2e:	e014      	b.n	8006d5a <_vfiprintf_r+0x13a>
 8006d30:	eba0 0308 	sub.w	r3, r0, r8
 8006d34:	fa09 f303 	lsl.w	r3, r9, r3
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	9304      	str	r3, [sp, #16]
 8006d3c:	46a2      	mov	sl, r4
 8006d3e:	e7d2      	b.n	8006ce6 <_vfiprintf_r+0xc6>
 8006d40:	9b03      	ldr	r3, [sp, #12]
 8006d42:	1d19      	adds	r1, r3, #4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	9103      	str	r1, [sp, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	bfbb      	ittet	lt
 8006d4c:	425b      	neglt	r3, r3
 8006d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d52:	9307      	strge	r3, [sp, #28]
 8006d54:	9307      	strlt	r3, [sp, #28]
 8006d56:	bfb8      	it	lt
 8006d58:	9204      	strlt	r2, [sp, #16]
 8006d5a:	7823      	ldrb	r3, [r4, #0]
 8006d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d5e:	d10c      	bne.n	8006d7a <_vfiprintf_r+0x15a>
 8006d60:	7863      	ldrb	r3, [r4, #1]
 8006d62:	2b2a      	cmp	r3, #42	; 0x2a
 8006d64:	d134      	bne.n	8006dd0 <_vfiprintf_r+0x1b0>
 8006d66:	9b03      	ldr	r3, [sp, #12]
 8006d68:	1d1a      	adds	r2, r3, #4
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	9203      	str	r2, [sp, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	bfb8      	it	lt
 8006d72:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d76:	3402      	adds	r4, #2
 8006d78:	9305      	str	r3, [sp, #20]
 8006d7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006e50 <_vfiprintf_r+0x230>
 8006d7e:	7821      	ldrb	r1, [r4, #0]
 8006d80:	2203      	movs	r2, #3
 8006d82:	4650      	mov	r0, sl
 8006d84:	f7f9 fa2c 	bl	80001e0 <memchr>
 8006d88:	b138      	cbz	r0, 8006d9a <_vfiprintf_r+0x17a>
 8006d8a:	9b04      	ldr	r3, [sp, #16]
 8006d8c:	eba0 000a 	sub.w	r0, r0, sl
 8006d90:	2240      	movs	r2, #64	; 0x40
 8006d92:	4082      	lsls	r2, r0
 8006d94:	4313      	orrs	r3, r2
 8006d96:	3401      	adds	r4, #1
 8006d98:	9304      	str	r3, [sp, #16]
 8006d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9e:	4829      	ldr	r0, [pc, #164]	; (8006e44 <_vfiprintf_r+0x224>)
 8006da0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006da4:	2206      	movs	r2, #6
 8006da6:	f7f9 fa1b 	bl	80001e0 <memchr>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d03f      	beq.n	8006e2e <_vfiprintf_r+0x20e>
 8006dae:	4b26      	ldr	r3, [pc, #152]	; (8006e48 <_vfiprintf_r+0x228>)
 8006db0:	bb1b      	cbnz	r3, 8006dfa <_vfiprintf_r+0x1da>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	3307      	adds	r3, #7
 8006db6:	f023 0307 	bic.w	r3, r3, #7
 8006dba:	3308      	adds	r3, #8
 8006dbc:	9303      	str	r3, [sp, #12]
 8006dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc0:	443b      	add	r3, r7
 8006dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc4:	e768      	b.n	8006c98 <_vfiprintf_r+0x78>
 8006dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dca:	460c      	mov	r4, r1
 8006dcc:	2001      	movs	r0, #1
 8006dce:	e7a6      	b.n	8006d1e <_vfiprintf_r+0xfe>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	3401      	adds	r4, #1
 8006dd4:	9305      	str	r3, [sp, #20]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f04f 0c0a 	mov.w	ip, #10
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de2:	3a30      	subs	r2, #48	; 0x30
 8006de4:	2a09      	cmp	r2, #9
 8006de6:	d903      	bls.n	8006df0 <_vfiprintf_r+0x1d0>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0c6      	beq.n	8006d7a <_vfiprintf_r+0x15a>
 8006dec:	9105      	str	r1, [sp, #20]
 8006dee:	e7c4      	b.n	8006d7a <_vfiprintf_r+0x15a>
 8006df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df4:	4604      	mov	r4, r0
 8006df6:	2301      	movs	r3, #1
 8006df8:	e7f0      	b.n	8006ddc <_vfiprintf_r+0x1bc>
 8006dfa:	ab03      	add	r3, sp, #12
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	462a      	mov	r2, r5
 8006e00:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <_vfiprintf_r+0x22c>)
 8006e02:	a904      	add	r1, sp, #16
 8006e04:	4630      	mov	r0, r6
 8006e06:	f3af 8000 	nop.w
 8006e0a:	4607      	mov	r7, r0
 8006e0c:	1c78      	adds	r0, r7, #1
 8006e0e:	d1d6      	bne.n	8006dbe <_vfiprintf_r+0x19e>
 8006e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e12:	07d9      	lsls	r1, r3, #31
 8006e14:	d405      	bmi.n	8006e22 <_vfiprintf_r+0x202>
 8006e16:	89ab      	ldrh	r3, [r5, #12]
 8006e18:	059a      	lsls	r2, r3, #22
 8006e1a:	d402      	bmi.n	8006e22 <_vfiprintf_r+0x202>
 8006e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e1e:	f7ff f997 	bl	8006150 <__retarget_lock_release_recursive>
 8006e22:	89ab      	ldrh	r3, [r5, #12]
 8006e24:	065b      	lsls	r3, r3, #25
 8006e26:	f53f af1d 	bmi.w	8006c64 <_vfiprintf_r+0x44>
 8006e2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e2c:	e71c      	b.n	8006c68 <_vfiprintf_r+0x48>
 8006e2e:	ab03      	add	r3, sp, #12
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	462a      	mov	r2, r5
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <_vfiprintf_r+0x22c>)
 8006e36:	a904      	add	r1, sp, #16
 8006e38:	4630      	mov	r0, r6
 8006e3a:	f7ff fc77 	bl	800672c <_printf_i>
 8006e3e:	e7e4      	b.n	8006e0a <_vfiprintf_r+0x1ea>
 8006e40:	08007367 	.word	0x08007367
 8006e44:	08007371 	.word	0x08007371
 8006e48:	00000000 	.word	0x00000000
 8006e4c:	08006bfb 	.word	0x08006bfb
 8006e50:	0800736d 	.word	0x0800736d

08006e54 <__swbuf_r>:
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	460e      	mov	r6, r1
 8006e58:	4614      	mov	r4, r2
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	b118      	cbz	r0, 8006e66 <__swbuf_r+0x12>
 8006e5e:	6a03      	ldr	r3, [r0, #32]
 8006e60:	b90b      	cbnz	r3, 8006e66 <__swbuf_r+0x12>
 8006e62:	f7ff f827 	bl	8005eb4 <__sinit>
 8006e66:	69a3      	ldr	r3, [r4, #24]
 8006e68:	60a3      	str	r3, [r4, #8]
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	071a      	lsls	r2, r3, #28
 8006e6e:	d525      	bpl.n	8006ebc <__swbuf_r+0x68>
 8006e70:	6923      	ldr	r3, [r4, #16]
 8006e72:	b31b      	cbz	r3, 8006ebc <__swbuf_r+0x68>
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	6922      	ldr	r2, [r4, #16]
 8006e78:	1a98      	subs	r0, r3, r2
 8006e7a:	6963      	ldr	r3, [r4, #20]
 8006e7c:	b2f6      	uxtb	r6, r6
 8006e7e:	4283      	cmp	r3, r0
 8006e80:	4637      	mov	r7, r6
 8006e82:	dc04      	bgt.n	8006e8e <__swbuf_r+0x3a>
 8006e84:	4621      	mov	r1, r4
 8006e86:	4628      	mov	r0, r5
 8006e88:	f7ff fdf8 	bl	8006a7c <_fflush_r>
 8006e8c:	b9e0      	cbnz	r0, 8006ec8 <__swbuf_r+0x74>
 8006e8e:	68a3      	ldr	r3, [r4, #8]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	60a3      	str	r3, [r4, #8]
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	6022      	str	r2, [r4, #0]
 8006e9a:	701e      	strb	r6, [r3, #0]
 8006e9c:	6962      	ldr	r2, [r4, #20]
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d004      	beq.n	8006eae <__swbuf_r+0x5a>
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	07db      	lsls	r3, r3, #31
 8006ea8:	d506      	bpl.n	8006eb8 <__swbuf_r+0x64>
 8006eaa:	2e0a      	cmp	r6, #10
 8006eac:	d104      	bne.n	8006eb8 <__swbuf_r+0x64>
 8006eae:	4621      	mov	r1, r4
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	f7ff fde3 	bl	8006a7c <_fflush_r>
 8006eb6:	b938      	cbnz	r0, 8006ec8 <__swbuf_r+0x74>
 8006eb8:	4638      	mov	r0, r7
 8006eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f000 f806 	bl	8006ed0 <__swsetup_r>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d0d5      	beq.n	8006e74 <__swbuf_r+0x20>
 8006ec8:	f04f 37ff 	mov.w	r7, #4294967295
 8006ecc:	e7f4      	b.n	8006eb8 <__swbuf_r+0x64>
	...

08006ed0 <__swsetup_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4b2a      	ldr	r3, [pc, #168]	; (8006f7c <__swsetup_r+0xac>)
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	460c      	mov	r4, r1
 8006eda:	b118      	cbz	r0, 8006ee4 <__swsetup_r+0x14>
 8006edc:	6a03      	ldr	r3, [r0, #32]
 8006ede:	b90b      	cbnz	r3, 8006ee4 <__swsetup_r+0x14>
 8006ee0:	f7fe ffe8 	bl	8005eb4 <__sinit>
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006eea:	0718      	lsls	r0, r3, #28
 8006eec:	d422      	bmi.n	8006f34 <__swsetup_r+0x64>
 8006eee:	06d9      	lsls	r1, r3, #27
 8006ef0:	d407      	bmi.n	8006f02 <__swsetup_r+0x32>
 8006ef2:	2309      	movs	r3, #9
 8006ef4:	602b      	str	r3, [r5, #0]
 8006ef6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006efa:	81a3      	strh	r3, [r4, #12]
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
 8006f00:	e034      	b.n	8006f6c <__swsetup_r+0x9c>
 8006f02:	0758      	lsls	r0, r3, #29
 8006f04:	d512      	bpl.n	8006f2c <__swsetup_r+0x5c>
 8006f06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f08:	b141      	cbz	r1, 8006f1c <__swsetup_r+0x4c>
 8006f0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f0e:	4299      	cmp	r1, r3
 8006f10:	d002      	beq.n	8006f18 <__swsetup_r+0x48>
 8006f12:	4628      	mov	r0, r5
 8006f14:	f7ff f944 	bl	80061a0 <_free_r>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	6363      	str	r3, [r4, #52]	; 0x34
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f22:	81a3      	strh	r3, [r4, #12]
 8006f24:	2300      	movs	r3, #0
 8006f26:	6063      	str	r3, [r4, #4]
 8006f28:	6923      	ldr	r3, [r4, #16]
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	89a3      	ldrh	r3, [r4, #12]
 8006f2e:	f043 0308 	orr.w	r3, r3, #8
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	b94b      	cbnz	r3, 8006f4c <__swsetup_r+0x7c>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f42:	d003      	beq.n	8006f4c <__swsetup_r+0x7c>
 8006f44:	4621      	mov	r1, r4
 8006f46:	4628      	mov	r0, r5
 8006f48:	f000 f88c 	bl	8007064 <__smakebuf_r>
 8006f4c:	89a0      	ldrh	r0, [r4, #12]
 8006f4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f52:	f010 0301 	ands.w	r3, r0, #1
 8006f56:	d00a      	beq.n	8006f6e <__swsetup_r+0x9e>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60a3      	str	r3, [r4, #8]
 8006f5c:	6963      	ldr	r3, [r4, #20]
 8006f5e:	425b      	negs	r3, r3
 8006f60:	61a3      	str	r3, [r4, #24]
 8006f62:	6923      	ldr	r3, [r4, #16]
 8006f64:	b943      	cbnz	r3, 8006f78 <__swsetup_r+0xa8>
 8006f66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f6a:	d1c4      	bne.n	8006ef6 <__swsetup_r+0x26>
 8006f6c:	bd38      	pop	{r3, r4, r5, pc}
 8006f6e:	0781      	lsls	r1, r0, #30
 8006f70:	bf58      	it	pl
 8006f72:	6963      	ldrpl	r3, [r4, #20]
 8006f74:	60a3      	str	r3, [r4, #8]
 8006f76:	e7f4      	b.n	8006f62 <__swsetup_r+0x92>
 8006f78:	2000      	movs	r0, #0
 8006f7a:	e7f7      	b.n	8006f6c <__swsetup_r+0x9c>
 8006f7c:	20000064 	.word	0x20000064

08006f80 <_raise_r>:
 8006f80:	291f      	cmp	r1, #31
 8006f82:	b538      	push	{r3, r4, r5, lr}
 8006f84:	4604      	mov	r4, r0
 8006f86:	460d      	mov	r5, r1
 8006f88:	d904      	bls.n	8006f94 <_raise_r+0x14>
 8006f8a:	2316      	movs	r3, #22
 8006f8c:	6003      	str	r3, [r0, #0]
 8006f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f96:	b112      	cbz	r2, 8006f9e <_raise_r+0x1e>
 8006f98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f9c:	b94b      	cbnz	r3, 8006fb2 <_raise_r+0x32>
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 f830 	bl	8007004 <_getpid_r>
 8006fa4:	462a      	mov	r2, r5
 8006fa6:	4601      	mov	r1, r0
 8006fa8:	4620      	mov	r0, r4
 8006faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fae:	f000 b817 	b.w	8006fe0 <_kill_r>
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d00a      	beq.n	8006fcc <_raise_r+0x4c>
 8006fb6:	1c59      	adds	r1, r3, #1
 8006fb8:	d103      	bne.n	8006fc2 <_raise_r+0x42>
 8006fba:	2316      	movs	r3, #22
 8006fbc:	6003      	str	r3, [r0, #0]
 8006fbe:	2001      	movs	r0, #1
 8006fc0:	e7e7      	b.n	8006f92 <_raise_r+0x12>
 8006fc2:	2400      	movs	r4, #0
 8006fc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fc8:	4628      	mov	r0, r5
 8006fca:	4798      	blx	r3
 8006fcc:	2000      	movs	r0, #0
 8006fce:	e7e0      	b.n	8006f92 <_raise_r+0x12>

08006fd0 <raise>:
 8006fd0:	4b02      	ldr	r3, [pc, #8]	; (8006fdc <raise+0xc>)
 8006fd2:	4601      	mov	r1, r0
 8006fd4:	6818      	ldr	r0, [r3, #0]
 8006fd6:	f7ff bfd3 	b.w	8006f80 <_raise_r>
 8006fda:	bf00      	nop
 8006fdc:	20000064 	.word	0x20000064

08006fe0 <_kill_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d07      	ldr	r5, [pc, #28]	; (8007000 <_kill_r+0x20>)
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	4608      	mov	r0, r1
 8006fea:	4611      	mov	r1, r2
 8006fec:	602b      	str	r3, [r5, #0]
 8006fee:	f7fb fa87 	bl	8002500 <_kill>
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	d102      	bne.n	8006ffc <_kill_r+0x1c>
 8006ff6:	682b      	ldr	r3, [r5, #0]
 8006ff8:	b103      	cbz	r3, 8006ffc <_kill_r+0x1c>
 8006ffa:	6023      	str	r3, [r4, #0]
 8006ffc:	bd38      	pop	{r3, r4, r5, pc}
 8006ffe:	bf00      	nop
 8007000:	2000026c 	.word	0x2000026c

08007004 <_getpid_r>:
 8007004:	f7fb ba74 	b.w	80024f0 <_getpid>

08007008 <_malloc_usable_size_r>:
 8007008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800700c:	1f18      	subs	r0, r3, #4
 800700e:	2b00      	cmp	r3, #0
 8007010:	bfbc      	itt	lt
 8007012:	580b      	ldrlt	r3, [r1, r0]
 8007014:	18c0      	addlt	r0, r0, r3
 8007016:	4770      	bx	lr

08007018 <__swhatbuf_r>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	460c      	mov	r4, r1
 800701c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007020:	2900      	cmp	r1, #0
 8007022:	b096      	sub	sp, #88	; 0x58
 8007024:	4615      	mov	r5, r2
 8007026:	461e      	mov	r6, r3
 8007028:	da0d      	bge.n	8007046 <__swhatbuf_r+0x2e>
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007030:	f04f 0100 	mov.w	r1, #0
 8007034:	bf0c      	ite	eq
 8007036:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800703a:	2340      	movne	r3, #64	; 0x40
 800703c:	2000      	movs	r0, #0
 800703e:	6031      	str	r1, [r6, #0]
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	b016      	add	sp, #88	; 0x58
 8007044:	bd70      	pop	{r4, r5, r6, pc}
 8007046:	466a      	mov	r2, sp
 8007048:	f000 f848 	bl	80070dc <_fstat_r>
 800704c:	2800      	cmp	r0, #0
 800704e:	dbec      	blt.n	800702a <__swhatbuf_r+0x12>
 8007050:	9901      	ldr	r1, [sp, #4]
 8007052:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007056:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800705a:	4259      	negs	r1, r3
 800705c:	4159      	adcs	r1, r3
 800705e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007062:	e7eb      	b.n	800703c <__swhatbuf_r+0x24>

08007064 <__smakebuf_r>:
 8007064:	898b      	ldrh	r3, [r1, #12]
 8007066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007068:	079d      	lsls	r5, r3, #30
 800706a:	4606      	mov	r6, r0
 800706c:	460c      	mov	r4, r1
 800706e:	d507      	bpl.n	8007080 <__smakebuf_r+0x1c>
 8007070:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	2301      	movs	r3, #1
 800707a:	6163      	str	r3, [r4, #20]
 800707c:	b002      	add	sp, #8
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	ab01      	add	r3, sp, #4
 8007082:	466a      	mov	r2, sp
 8007084:	f7ff ffc8 	bl	8007018 <__swhatbuf_r>
 8007088:	9900      	ldr	r1, [sp, #0]
 800708a:	4605      	mov	r5, r0
 800708c:	4630      	mov	r0, r6
 800708e:	f7ff f8fb 	bl	8006288 <_malloc_r>
 8007092:	b948      	cbnz	r0, 80070a8 <__smakebuf_r+0x44>
 8007094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007098:	059a      	lsls	r2, r3, #22
 800709a:	d4ef      	bmi.n	800707c <__smakebuf_r+0x18>
 800709c:	f023 0303 	bic.w	r3, r3, #3
 80070a0:	f043 0302 	orr.w	r3, r3, #2
 80070a4:	81a3      	strh	r3, [r4, #12]
 80070a6:	e7e3      	b.n	8007070 <__smakebuf_r+0xc>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	6020      	str	r0, [r4, #0]
 80070ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	9b00      	ldr	r3, [sp, #0]
 80070b4:	6163      	str	r3, [r4, #20]
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	6120      	str	r0, [r4, #16]
 80070ba:	b15b      	cbz	r3, 80070d4 <__smakebuf_r+0x70>
 80070bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070c0:	4630      	mov	r0, r6
 80070c2:	f000 f81d 	bl	8007100 <_isatty_r>
 80070c6:	b128      	cbz	r0, 80070d4 <__smakebuf_r+0x70>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	f023 0303 	bic.w	r3, r3, #3
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	431d      	orrs	r5, r3
 80070d8:	81a5      	strh	r5, [r4, #12]
 80070da:	e7cf      	b.n	800707c <__smakebuf_r+0x18>

080070dc <_fstat_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d07      	ldr	r5, [pc, #28]	; (80070fc <_fstat_r+0x20>)
 80070e0:	2300      	movs	r3, #0
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	f7fb fa68 	bl	80025be <_fstat>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d102      	bne.n	80070f8 <_fstat_r+0x1c>
 80070f2:	682b      	ldr	r3, [r5, #0]
 80070f4:	b103      	cbz	r3, 80070f8 <_fstat_r+0x1c>
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	bd38      	pop	{r3, r4, r5, pc}
 80070fa:	bf00      	nop
 80070fc:	2000026c 	.word	0x2000026c

08007100 <_isatty_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4d06      	ldr	r5, [pc, #24]	; (800711c <_isatty_r+0x1c>)
 8007104:	2300      	movs	r3, #0
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	602b      	str	r3, [r5, #0]
 800710c:	f7fb fa67 	bl	80025de <_isatty>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_isatty_r+0x1a>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b103      	cbz	r3, 800711a <_isatty_r+0x1a>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	2000026c 	.word	0x2000026c

08007120 <_gettimeofday>:
 8007120:	4b02      	ldr	r3, [pc, #8]	; (800712c <_gettimeofday+0xc>)
 8007122:	2258      	movs	r2, #88	; 0x58
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	f04f 30ff 	mov.w	r0, #4294967295
 800712a:	4770      	bx	lr
 800712c:	2000026c 	.word	0x2000026c

08007130 <_init>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	bf00      	nop
 8007134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007136:	bc08      	pop	{r3}
 8007138:	469e      	mov	lr, r3
 800713a:	4770      	bx	lr

0800713c <_fini>:
 800713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713e:	bf00      	nop
 8007140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007142:	bc08      	pop	{r3}
 8007144:	469e      	mov	lr, r3
 8007146:	4770      	bx	lr
